# This is an auto-generated Django model module.
# You'll have to do the following manually to clean this up:
#   * Rearrange models' order
#   * Make sure each model has one field with primary_key=True
#   * Make sure each ForeignKey and OneToOneField has `on_delete` set to the desired behavior
#   * Remove `managed = False` lines if you wish to allow Django to create, modify, and delete the table
# Feel free to rename the models, but don't rename db_table values or field names.
from salesforce import models


class Account(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=models.DefaultedOnCreate(False))
    master_record = models.ForeignKey('self', models.DO_NOTHING, related_name='account_masterrecord_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    name = models.CharField(max_length=255, verbose_name='Account Name', sf_read_only=models.READ_ONLY)
    type = models.CharField(max_length=40, verbose_name='Account Type', sf_read_only=models.READ_ONLY, default=models.DefaultedOnCreate('Prospect'), choices=[('Customer', 'Customer'), ('Prospect', 'Prospect'), ('Partner - Formal', 'Partner - Formal'), ('Partner - Informal', 'Partner - Informal'), ('Agency', 'Agency'), ('Agent', 'Agent'), ('Group', 'Group'), ('Individual', 'Individual'), ('Partner - Prospective', 'Partner - Prospective'), ('Dead Partner', 'Dead Partner'), ('Partner - Inactive', 'Partner - Inactive'), ('Enterprise', 'Enterprise'), ('Customer Contact', 'Customer Contact'), ('Carrier', 'Carrier')], blank=True, null=True)
    record_type = models.ForeignKey('RecordType', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    parent = models.ForeignKey('self', models.DO_NOTHING, related_name='account_parent_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    billing_street = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    billing_city = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    billing_state = models.CharField(max_length=80, verbose_name='Billing State/Province', sf_read_only=models.READ_ONLY, blank=True, null=True)
    billing_postal_code = models.CharField(max_length=20, verbose_name='Billing Zip/Postal Code', sf_read_only=models.READ_ONLY, blank=True, null=True)
    billing_country = models.CharField(max_length=80, sf_read_only=models.READ_ONLY, blank=True, null=True)
    billing_state_code = models.CharField(max_length=10, verbose_name='Billing State/Province Code', sf_read_only=models.READ_ONLY, choices=[('AL', 'Alabama'), ('AK', 'Alaska'), ('AB', 'Alberta'), ('AZ', 'Arizona'), ('AR', 'Arkansas'), ('BC', 'British Columbia'), ('CA', 'California'), ('CO', 'Colorado'), ('CT', 'Connecticut'), ('DE', 'Delaware'), ('DC', 'District of Columbia'), ('FL', 'Florida'), ('GA', 'Georgia'), ('GU', 'Guam'), ('HI', 'Hawaii'), ('ID', 'Idaho'), ('IL', 'Illinois'), ('IN', 'Indiana'), ('IA', 'Iowa'), ('KS', 'Kansas'), ('KY', 'Kentucky'), ('LA', 'Louisiana'), ('ME', 'Maine'), ('MB', 'Manitoba'), ('MD', 'Maryland'), ('MA', 'Massachusetts'), ('MI', 'Michigan'), ('MN', 'Minnesota'), ('MS', 'Mississippi'), ('MO', 'Missouri'), ('MT', 'Montana'), ('NE', 'Nebraska'), ('NV', 'Nevada'), ('NB', 'New Brunswick'), ('NL', 'Newfoundland and Labrador'), ('NH', 'New Hampshire'), ('NJ', 'New Jersey'), ('NM', 'New Mexico'), ('NY', 'New York'), ('NC', 'North Carolina'), ('ND', 'North Dakota'), ('NT', 'Northwest Territories'), ('NS', 'Nova Scotia'), ('NU', 'Nunavut'), ('OH', 'Ohio'), ('OK', 'Oklahoma'), ('ON', 'Ontario'), ('OR', 'Oregon'), ('PA', 'Pennsylvania'), ('PE', 'Prince Edward Island'), ('PR', 'Puerto Rico'), ('QC', 'Quebec'), ('RI', 'Rhode Island'), ('SK', 'Saskatchewan'), ('SC', 'South Carolina'), ('SD', 'South Dakota'), ('TN', 'Tennessee'), ('TX', 'Texas'), ('VI', 'US Virgin Islands'), ('UT', 'Utah'), ('VT', 'Vermont'), ('VA', 'Virginia'), ('WA', 'Washington'), ('WV', 'West Virginia'), ('WI', 'Wisconsin'), ('WY', 'Wyoming'), ('YT', 'Yukon Territories')], blank=True, null=True)
    billing_country_code = models.CharField(max_length=10, sf_read_only=models.READ_ONLY, default=models.DefaultedOnCreate('US'), choices=[('CA', 'Canada'), ('US', 'United States')], blank=True, null=True)
    billing_latitude = models.DecimalField(max_digits=18, decimal_places=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    billing_longitude = models.DecimalField(max_digits=18, decimal_places=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    billing_geocode_accuracy = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Address', 'Address'), ('NearAddress', 'NearAddress'), ('Block', 'Block'), ('Street', 'Street'), ('ExtendedZip', 'ExtendedZip'), ('Zip', 'Zip'), ('Neighborhood', 'Neighborhood'), ('City', 'City'), ('County', 'County'), ('State', 'State'), ('Unknown', 'Unknown')], blank=True, null=True)
    billing_address = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)  # This field type is a guess.
    shipping_street = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    shipping_city = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    shipping_state = models.CharField(max_length=80, verbose_name='Shipping State/Province', sf_read_only=models.READ_ONLY, blank=True, null=True)
    shipping_postal_code = models.CharField(max_length=20, verbose_name='Shipping Zip/Postal Code', sf_read_only=models.READ_ONLY, blank=True, null=True)
    shipping_country = models.CharField(max_length=80, sf_read_only=models.READ_ONLY, blank=True, null=True)
    shipping_state_code = models.CharField(max_length=10, verbose_name='Shipping State/Province Code', sf_read_only=models.READ_ONLY, choices=[('AL', 'Alabama'), ('AK', 'Alaska'), ('AB', 'Alberta'), ('AZ', 'Arizona'), ('AR', 'Arkansas'), ('BC', 'British Columbia'), ('CA', 'California'), ('CO', 'Colorado'), ('CT', 'Connecticut'), ('DE', 'Delaware'), ('DC', 'District of Columbia'), ('FL', 'Florida'), ('GA', 'Georgia'), ('GU', 'Guam'), ('HI', 'Hawaii'), ('ID', 'Idaho'), ('IL', 'Illinois'), ('IN', 'Indiana'), ('IA', 'Iowa'), ('KS', 'Kansas'), ('KY', 'Kentucky'), ('LA', 'Louisiana'), ('ME', 'Maine'), ('MB', 'Manitoba'), ('MD', 'Maryland'), ('MA', 'Massachusetts'), ('MI', 'Michigan'), ('MN', 'Minnesota'), ('MS', 'Mississippi'), ('MO', 'Missouri'), ('MT', 'Montana'), ('NE', 'Nebraska'), ('NV', 'Nevada'), ('NB', 'New Brunswick'), ('NL', 'Newfoundland and Labrador'), ('NH', 'New Hampshire'), ('NJ', 'New Jersey'), ('NM', 'New Mexico'), ('NY', 'New York'), ('NC', 'North Carolina'), ('ND', 'North Dakota'), ('NT', 'Northwest Territories'), ('NS', 'Nova Scotia'), ('NU', 'Nunavut'), ('OH', 'Ohio'), ('OK', 'Oklahoma'), ('ON', 'Ontario'), ('OR', 'Oregon'), ('PA', 'Pennsylvania'), ('PE', 'Prince Edward Island'), ('PR', 'Puerto Rico'), ('QC', 'Quebec'), ('RI', 'Rhode Island'), ('SK', 'Saskatchewan'), ('SC', 'South Carolina'), ('SD', 'South Dakota'), ('TN', 'Tennessee'), ('TX', 'Texas'), ('VI', 'US Virgin Islands'), ('UT', 'Utah'), ('VT', 'Vermont'), ('VA', 'Virginia'), ('WA', 'Washington'), ('WV', 'West Virginia'), ('WI', 'Wisconsin'), ('WY', 'Wyoming'), ('YT', 'Yukon Territories')], blank=True, null=True)
    shipping_country_code = models.CharField(max_length=10, sf_read_only=models.READ_ONLY, default=models.DefaultedOnCreate('US'), choices=[('CA', 'Canada'), ('US', 'United States')], blank=True, null=True)
    shipping_latitude = models.DecimalField(max_digits=18, decimal_places=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    shipping_longitude = models.DecimalField(max_digits=18, decimal_places=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    shipping_geocode_accuracy = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Address', 'Address'), ('NearAddress', 'NearAddress'), ('Block', 'Block'), ('Street', 'Street'), ('ExtendedZip', 'ExtendedZip'), ('Zip', 'Zip'), ('Neighborhood', 'Neighborhood'), ('City', 'City'), ('County', 'County'), ('State', 'State'), ('Unknown', 'Unknown')], blank=True, null=True)
    shipping_address = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)  # This field type is a guess.
    phone = models.CharField(max_length=40, verbose_name='Account Phone', sf_read_only=models.READ_ONLY, blank=True, null=True)
    fax = models.CharField(max_length=40, verbose_name='Account Fax', sf_read_only=models.READ_ONLY, blank=True, null=True)
    website = models.URLField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    photo_url = models.URLField(verbose_name='Photo URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    sic = models.CharField(max_length=20, verbose_name='SIC Code', sf_read_only=models.READ_ONLY, blank=True, null=True)
    industry = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Agriculture', 'Agriculture'), ('Apparel', 'Apparel'), ('Aviation', 'Aviation'), ('Banking', 'Banking'), ('Biotechnology', 'Biotechnology'), ('Chemicals', 'Chemicals'), ('Communications', 'Communications'), ('Construction', 'Construction'), ('Consulting', 'Consulting'), ('Education', 'Education'), ('Electronics', 'Electronics'), ('Energy', 'Energy'), ('Engineering', 'Engineering'), ('Entertainment', 'Entertainment'), ('Environmental', 'Environmental'), ('Finance', 'Finance'), ('Food & Beverage', 'Food & Beverage'), ('Government', 'Government'), ('Healthcare', 'Healthcare'), ('Hospitality', 'Hospitality'), ('Insurance', 'Insurance'), ('Machinery', 'Machinery'), ('Manufacturing', 'Manufacturing'), ('Media', 'Media'), ('Not For Profit', 'Not For Profit'), ('Other', 'Other'), ('Real Estate', 'Real Estate'), ('Recreation', 'Recreation'), ('Retail', 'Retail'), ('Shipping', 'Shipping'), ('Spa', 'Spa'), ('Technology', 'Technology'), ('Telecommunications', 'Telecommunications'), ('Transportation', 'Transportation'), ('Utilities', 'Utilities'), ('Waste Management', 'Waste Management')], blank=True, null=True)
    number_of_employees = models.IntegerField(verbose_name='Employees', sf_read_only=models.READ_ONLY, blank=True, null=True)
    description = models.TextField(verbose_name='Account Description', sf_read_only=models.READ_ONLY, blank=True, null=True)
    rating = models.CharField(max_length=40, verbose_name='Account Rating', sf_read_only=models.READ_ONLY, choices=[('Hot', 'Hot'), ('Warm', 'Warm'), ('Cold', 'Cold')], blank=True, null=True)
    owner = models.ForeignKey('salesforce.User', models.DO_NOTHING, related_name='account_owner_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY, default=models.DEFAULTED_ON_CREATE)
    created_by = models.ForeignKey('salesforce.User', models.DO_NOTHING, related_name='account_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY, default=models.DEFAULTED_ON_CREATE)
    last_modified_by = models.ForeignKey('salesforce.User', models.DO_NOTHING, related_name='account_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, default=models.DEFAULTED_ON_CREATE)
    last_activity_date = models.DateField(verbose_name='Last Activity', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_customer_portal = models.BooleanField(verbose_name='Customer Portal Account', sf_read_only=models.READ_ONLY, default=models.DefaultedOnCreate(False))
    jigsaw_company_id = models.CharField(max_length=20, verbose_name='Jigsaw Company ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    account_source = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, default=models.DefaultedOnCreate('Sales Generated'), choices=[('Client', 'Client'), ('Sales Generated', 'Sales Generated'), ('Partner', 'Partner'), ('Advertisement', 'Advertisement'), ('Internal Employee Referral', 'Internal Employee Referral'), ('Marketing Lists', 'Marketing Lists'), ('Public Relations', 'Public Relations'), ('Social Media', 'Social Media'), ('Toll Free', 'Toll Free'), ('Trade Show', 'Trade Show'), ('Website', 'Website'), ('Product', 'Product'), ('Association', 'Association'), ('Associations', 'Associations'), ('Bank', 'Bank'), ('Broker', 'Broker'), ('Chat', 'Chat'), ('Client Add On', 'Client Add On'), ('Clientele Conversion', 'Clientele Conversion'), ('Compliance', 'Compliance'), ('CPA', 'CPA'), ('Customer Referral', 'Customer Referral'), ('DSI', 'DSI'), ('EIN Change', 'EIN Change'), ('Existing Client', 'Existing Client'), ('External Referral', 'External Referral'), ('Franchisee', 'Franchisee'), ('Jigsaw', 'Jigsaw'), ('Networking', 'Networking'), ('Rest. List', 'Rest. List'), ('Sage', 'Sage'), ('Self Gen', 'Self Gen'), ('Self Generated', 'Self Generated'), ('Strategic Alliance', 'Strategic Alliance'), ('Tony Dillard', 'Tony Dillard'), ('Web Forms', 'Web Forms'), ('Webinar', 'Webinar'), ('PartnerFocus', 'PartnerFocus'), ('Acquisition - Planet Payroll', 'Acquisition - Planet Payroll'), ('Agency Workspace', 'Agency Workspace'), ('Acquisition - Rams', 'Acquisition - Rams')], blank=True, null=True)
    print_location = models.CharField(custom=True, db_column='Print_Location__c', max_length=255, verbose_name='Print Location', sf_read_only=models.READ_ONLY, help_text='For Operations users to indicate where the account’s checks and reports are printed and shipped.', choices=[('016 - West Palm Beach', '016 - West Palm Beach'), ('C99 - Tennessee', 'C99 - Tennessee'), ('001 - Miramar', '001 - Miramar'), ('002 - Tampa', '002 - Tampa'), ('003 - Phoenix', '003 - Phoenix'), ('004 - New York', '004 - New York'), ('005 - Atlanta', '005 - Atlanta'), ('006 - Long Island', '006 - Long Island'), ('007 - Selma', '007 - Selma'), ('008 - Maine', '008 - Maine'), ('010 - Tennessee', '010 - Tennessee'), ('011 - Chicago', '011 - Chicago'), ('012 - Orange County', '012 - Orange County'), ('013 - Boston', '013 - Boston'), ('014 - Walnut Creek', '014 - Walnut Creek'), ('097 - Seattle', '097 - Seattle'), ('095 - Tennessee', '095 - Tennessee'), ('P12 - Orange County', 'P12 - Orange County'), ('C02 - Tampa', 'C02 - Tampa'), ('C07 - Selma', 'C07 - Selma'), ('C34 - Seattle', 'C34 - Seattle'), ('C36 - Las Vegas', 'C36 - Las Vegas'), ('099 - Tennessee', '099 - Tennessee'), ('035 - New Jersey', '035 - New Jersey'), ('C03 - Phoenix', 'C03 - Phoenix')], blank=True, null=True)
    telemarketing_lead = models.BooleanField(custom=True, db_column='Telemarketing_Lead__c', verbose_name='Telemarketing Lead', sf_read_only=models.READ_ONLY, default=models.DefaultedOnCreate(False))
    cpay_business_size = models.CharField(custom=True, db_column='CPAY_Business_Size__c', max_length=1300, verbose_name='CPAY Business Size', sf_read_only=models.READ_ONLY, blank=True, null=True)
    bmll_business_size = models.CharField(custom=True, db_column='BMLL_Business_Size__c', max_length=1300, verbose_name='BMLL Business Size', sf_read_only=models.READ_ONLY, blank=True, null=True)
    frequency_of_payroll = models.CharField(custom=True, db_column='Frequency_of_Payroll__c', max_length=255, verbose_name='Frequency of Payroll', sf_read_only=models.READ_ONLY, choices=[('Weekly (52)', 'Weekly (52)'), ('Biweekly (26)', 'Biweekly (26)'), ('Semimonthly (24)', 'Semimonthly (24)'), ('Monthly (12)', 'Monthly (12)'), ('Quarterly (4)', 'Quarterly (4)')], blank=True, null=True)
    partner_type = models.CharField(custom=True, db_column='Partner_Type__c', max_length=255, verbose_name='Partner Type', sf_read_only=models.READ_ONLY, choices=[('Accountant', 'Accountant'), ('Association', 'Association'), ('Bank', 'Bank'), ('BMall GA Agency', 'BMall GA Agency'), ('Broker', 'Broker'), ('Brokerage Agency', 'Brokerage Agency'), ('Strategic', 'Strategic'), ('Other', 'Other')], blank=True, null=True)
    ein = models.CharField(custom=True, db_column='EIN__c', max_length=10, verbose_name='EIN', sf_read_only=models.READ_ONLY, blank=True, null=True)
    source_system = models.CharField(custom=True, db_column='Source_System__c', max_length=255, verbose_name='Source System', sf_read_only=models.READ_ONLY, choices=[('PayFocus', 'PayFocus'), ('PayFocus Full Service', 'PayFocus Full Service'), ('PayFocus Pro', 'PayFocus Pro'), ('PayFocus2 Full Service', 'PayFocus2 Full Service'), ('Construction Payroll', 'Construction Payroll'), ('M3', 'M3'), ('PayEntry (Mpay)', 'PayEntry (Mpay)'), ('Payload', 'Payload'), ('PayRight', 'PayRight'), ('PowerPay', 'PowerPay'), ('XpressPay', 'XpressPay'), ('BenefitPoint', 'BenefitPoint'), ('AMS', 'AMS'), ('CXC', 'CXC')], blank=True, null=True)
    service_location = models.CharField(custom=True, db_column='Service_Location__c', max_length=255, verbose_name='Service Location', sf_read_only=models.READ_ONLY, help_text='Operations users will populate this field with the location of the Service Rep who works the account.', choices=[('001 - Miramar', '001 - Miramar'), ('002 - Tampa', '002 - Tampa'), ('003 - Phoenix', '003 - Phoenix'), ('004 - New York', '004 - New York'), ('005 - Atlanta', '005 - Atlanta'), ('006 - PayFocus General Support', '006 - PayFocus General Support'), ('007 - Selma', '007 - Selma'), ('008 - Maine', '008 - Maine'), ('010 - Tennessee', '010 - Tennessee'), ('011 - Chicago', '011 - Chicago'), ('012 - Orange County', '012 - Orange County'), ('013 - Boston', '013 - Boston'), ('014 - Walnut Creek', '014 - Walnut Creek'), ('015 - PayFocus Partner Support', '015 - PayFocus Partner Support'), ('016 - West Palm Beach', '016 - West Palm Beach'), ('035 - New Jersey', '035 - New Jersey'), ('095 - Tennessee', '095 - Tennessee'), ('097 - Seattle', '097 - Seattle'), ('099 - Tennessee', '099 - Tennessee'), ('C02 - Tampa', 'C02 - Tampa'), ('C07 - Selma', 'C07 - Selma'), ('C34 - Seattle', 'C34 - Seattle'), ('C36 - Las Vegas', 'C36 - Las Vegas'), ('C99 - Tennessee', 'C99 - Tennessee'), ('P12 - Orange County', 'P12 - Orange County'), ('C15 - Dallas', 'C15 - Dallas'), ('C03 - Phoenix', 'C03 - Phoenix')], blank=True, null=True)
    client_code = models.CharField(custom=True, db_column='Client_Code__c', max_length=20, verbose_name='Client Code', sf_read_only=models.READ_ONLY, blank=True, null=True)
    platform_integration_id = models.CharField(custom=True, db_column='PlatformIntegrationID__c', unique=True, max_length=20, verbose_name='PlatformIntegrationID', sf_read_only=models.READ_ONLY, help_text='The unique ID of the account from the source system', blank=True, null=True)
    preferred_marketing_method = models.CharField(custom=True, db_column='Preferred_Marketing_Method__c', max_length=255, verbose_name='Preferred Marketing Method', sf_read_only=models.READ_ONLY, choices=[('Newsletter Articles', 'Newsletter Articles'), ('Statement Stuffers', 'Statement Stuffers'), ('Small Business Month', 'Small Business Month'), ('Promotions', 'Promotions')], blank=True, null=True)
    attrition_reason = models.CharField(custom=True, db_column='Attrition_Reason__c', max_length=255, verbose_name='Attrition Reason', sf_read_only=models.READ_ONLY, choices=[('Acquisition Conversion Issue', 'Acquisition Conversion Issue'), ('Annual Price Increase', 'Annual Price Increase'), ('Bank/CPA Relationship', 'Bank/CPA Relationship'), ('Bankruptcy', 'Bankruptcy'), ('Branch Service Issues', 'Branch Service Issues'), ('Copy Over - Changing Platforms', 'Copy Over - Changing Platforms'), ('Copy Over - Same Platform', 'Copy Over - Same Platform'), ('Distribution Issues', 'Distribution Issues'), ('Employee Leasing', 'Employee Leasing'), ('In House', 'In House'), ('Local Processing', 'Local Processing'), ("Moved EE's to a current account", "Moved EE's to a current account"), ('Never Processed One Payroll', 'Never Processed One Payroll'), ('No Employees', 'No Employees'), ('NSF/Past Due', 'NSF/Past Due'), ('Oversold by Sales', 'Oversold by Sales'), ('Permanently Closed Business', 'Permanently Closed Business'), ('Pricing', 'Pricing'), ('Products/Features', 'Products/Features'), ('Sold Business - not replaced', 'Sold Business - not replaced'), ('Tax Issues', 'Tax Issues'), ('Treasury Issues', 'Treasury Issues'), ('Workers Comp Issues', 'Workers Comp Issues'), ('Other', 'Other'), ('Service - Can’t Contact', 'Service - Can’t Contact')], blank=True, null=True)
    attrition_other_reason = models.TextField(custom=True, db_column='Attrition_Other_Reason__c', verbose_name='Attrition Other Reason', sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_provider = models.CharField(custom=True, db_column='New_Provider__c', max_length=255, verbose_name='New Provider', sf_read_only=models.READ_ONLY, choices=[('ADP', 'ADP'), ('Banking Service [Require field to specify]', 'Banking Service [Require field to specify]'), ('Ceridian', 'Ceridian'), ('CPA', 'CPA'), ('In House', 'In House'), ('Internal Transfer', 'Internal Transfer'), ('Intuit (QuickBooks)', 'Intuit (QuickBooks)'), ('Ovation Payroll', 'Ovation Payroll'), ('Paychex', 'Paychex'), ('PayChoice', 'PayChoice'), ('Paycor', 'Paycor'), ('Paylocity', 'Paylocity'), ('PrimePay', 'PrimePay'), ('SurePayroll', 'SurePayroll'), ('Unknown', 'Unknown'), ('Other', 'Other')], blank=True, null=True)
    other_new_provider = models.CharField(custom=True, db_column='Other_New_Provider__c', max_length=20, verbose_name='Other New Provider', sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_method = models.CharField(custom=True, db_column='New_Method__c', max_length=255, verbose_name='New Method', sf_read_only=models.READ_ONLY, choices=[('Phone', 'Phone'), ('Mobile', 'Mobile'), ('Fax', 'Fax'), ('Desktop Software', 'Desktop Software'), ('Web', 'Web'), ('Other', 'Other')], blank=True, null=True)
    other_new_method = models.CharField(custom=True, db_column='Other_New_Method__c', max_length=20, verbose_name='Other New Method', sf_read_only=models.READ_ONLY, blank=True, null=True)
    high_visibility = models.BooleanField(custom=True, db_column='High_Visibility__c', verbose_name='High Visibility', sf_read_only=models.READ_ONLY, default=models.DefaultedOnCreate(False))
    last_process_date = models.DateTimeField(custom=True, db_column='Last_Process_Date__c', verbose_name='Last Process Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    source_service_rep = models.CharField(custom=True, db_column='Source_Service_Rep__c', max_length=100, verbose_name='Source Service Rep', sf_read_only=models.READ_ONLY, blank=True, null=True)
    next_check_date = models.DateField(custom=True, db_column='Next_Check_Date__c', verbose_name='Next Check Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    next_schedule_date = models.DateTimeField(custom=True, db_column='Next_Schedule_Date__c', verbose_name='Next Schedule Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    tax_type = models.CharField(custom=True, db_column='Tax_Type__c', max_length=255, verbose_name='Tax Type', sf_read_only=models.READ_ONLY, choices=[('941 Only', '941 Only'), ('944 Only', '944 Only'), ('943 Only', '943 Only'), ('941/943', '941/943'), ('944', '944'), ('943', '943'), ('Household', 'Household')], blank=True, null=True)
    processing_type = models.CharField(custom=True, db_column='Processing_Type__c', max_length=255, verbose_name='Processing Type', sf_read_only=models.READ_ONLY, choices=[('Auto', 'Auto'), ('Call-In', 'Call-In'), ('Call-Out', 'Call-Out'), ('Email', 'Email'), ('Fax-In', 'Fax-In'), ('Hosted', 'Hosted'), ('Online', 'Online'), ('Remote (PC)', 'Remote (PC)')], blank=True, null=True)
    processing_deadline = models.DateField(custom=True, db_column='Processing_Deadline__c', verbose_name='Processing Deadline', sf_read_only=models.READ_ONLY, blank=True, null=True)
    branch = models.CharField(custom=True, max_length=50, sf_read_only=models.READ_ONLY, blank=True, null=True)
    consolidate = models.CharField(custom=True, max_length=255, sf_read_only=models.READ_ONLY, choices=[('None', 'None'), ('Child', 'Child'), ('Master', 'Master')], blank=True, null=True)
    processing_discount = models.DecimalField(custom=True, db_column='Processing_Discount__c', max_digits=5, decimal_places=2, verbose_name='Processing Discount', sf_read_only=models.READ_ONLY, blank=True, null=True)
    telemarketer = models.CharField(custom=True, max_length=100, sf_read_only=models.READ_ONLY, blank=True, null=True)
    termination_date = models.DateField(custom=True, db_column='Termination_Date__c', verbose_name='Termination Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    location = models.CharField(custom=True, max_length=255, verbose_name='Data Location', sf_read_only=models.READ_ONLY, help_text='For Operations users to indicate the cost center to which these accounts are coded.', choices=[('001 - Miramar', '001 - Miramar'), ('016 - West Palm Beach', '016 - West Palm Beach'), ('C99 - Tennessee', 'C99 - Tennessee'), ('002 - Tampa', '002 - Tampa'), ('003 - Phoenix', '003 - Phoenix'), ('004 - New York', '004 - New York'), ('005 - Atlanta', '005 - Atlanta'), ('006 - Long Island', '006 - Long Island'), ('007 - Selma', '007 - Selma'), ('008 - Maine', '008 - Maine'), ('010 - Tennessee', '010 - Tennessee'), ('012 - Orange County', '012 - Orange County'), ('013 - Boston', '013 - Boston'), ('014 - Walnut Creek', '014 - Walnut Creek'), ('035 - New Jersey', '035 - New Jersey'), ('095 - Tennessee', '095 - Tennessee'), ('097 - Seattle', '097 - Seattle'), ('099 - Tennessee', '099 - Tennessee'), ('C02 - Tampa', 'C02 - Tampa'), ('C07 - Selma', 'C07 - Selma'), ('C34 - Seattle', 'C34 - Seattle'), ('C36 - Las Vegas', 'C36 - Las Vegas'), ('P12 - Orange County', 'P12 - Orange County'), ('011 - Chicago', '011 - Chicago'), ('C15 - PayFocus Pro Dallas', 'C15 - PayFocus Pro Dallas'), ('015 - Dallas PAM', '015 - Dallas PAM'), ('C03 - Phoenix', 'C03 - Phoenix')], blank=True, null=True)
    direct_deposit_ach_term = models.CharField(custom=True, db_column='Direct_Deposit_ACH_Term__c', max_length=255, verbose_name='Direct Deposit ACH Term', sf_read_only=models.READ_ONLY, help_text='N/A = Not on Service', choices=[('ACH24', 'ACH24'), ('ACH48', 'ACH48'), ('ACH72', 'ACH72'), ('ACH96', 'ACH96'), ('ACH120', 'ACH120'), ('WIRE', 'WIRE'), ('REV WIRE', 'REV WIRE'), ('ACH Credit', 'ACH Credit'), ('N/A', 'N/A')], blank=True, null=True)
    legacy_id = models.CharField(custom=True, db_column='Legacy_ID__c', max_length=24, verbose_name='Legacy ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    year_end_hold = models.BooleanField(custom=True, db_column='Year_End_Hold__c', verbose_name='Year End Hold', sf_read_only=models.READ_ONLY, default=models.DefaultedOnCreate(False))
    quarter_end_hold = models.BooleanField(custom=True, db_column='Quarter_End_Hold__c', verbose_name='Quarter End Hold', sf_read_only=models.READ_ONLY, default=models.DefaultedOnCreate(False))
    business_type = models.CharField(custom=True, db_column='Business_Type__c', max_length=255, verbose_name='Business Type', sf_read_only=models.READ_ONLY, choices=[('S-Corp', 'S-Corp'), ('C-Corp', 'C-Corp'), ('Partnership', 'Partnership'), ('LLC', 'LLC'), ('Sole Proprietor', 'Sole Proprietor'), ('Corporation', 'Corporation'), ('Non-profit Organization', 'Non-profit Organization')], blank=True, null=True)
    first_payroll_of_transactions = models.DecimalField(custom=True, db_column='First_Payroll_of_Transactions__c', max_digits=16, decimal_places=0, verbose_name='First Payroll # of Transactions', sf_read_only=models.READ_ONLY, blank=True, null=True)
    previous_provider = models.CharField(custom=True, db_column='Previous_Provider__c', max_length=255, verbose_name='Previous Provider', sf_read_only=models.READ_ONLY, choices=[('ADP', 'ADP'), ('Bamboo HR', 'Bamboo HR'), ('Banking Service', 'Banking Service'), ('Ceridian', 'Ceridian'), ('CPA', 'CPA'), ('In House', 'In House'), ('Internal Transfer', 'Internal Transfer'), ('Intuit (QuickBooks)', 'Intuit (QuickBooks)'), ('Other', 'Other'), ('Ovation Payroll', 'Ovation Payroll'), ('Patriot Software', 'Patriot Software'), ('Paychex', 'Paychex'), ('Pay Choice', 'Pay Choice'), ('Paycor', 'Paycor'), ('Paylocity', 'Paylocity'), ('PrimePay', 'PrimePay'), ('SurePayroll', 'SurePayroll'), ('Unknown', 'Unknown')], blank=True, null=True)
    record_type_name = models.CharField(custom=True, db_column='Record_Type_Name__c', max_length=1300, verbose_name='Record Type Name', sf_read_only=models.READ_ONLY, blank=True, null=True)
    lead_referral_id = models.CharField(custom=True, db_column='Lead_Referral_ID__c', max_length=20, verbose_name='Lead Referral ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    state_sui_filing = models.CharField(custom=True, db_column='State_SUI_Filing__c', max_length=4099, verbose_name='State SUI Filing', sf_read_only=models.READ_ONLY, choices=[('AL', 'AL'), ('AK', 'AK'), ('AZ', 'AZ'), ('AR', 'AR'), ('CA', 'CA'), ('CO', 'CO'), ('CT', 'CT'), ('DE', 'DE'), ('DC', 'DC'), ('FL', 'FL'), ('GA', 'GA'), ('HI', 'HI'), ('ID', 'ID'), ('IL', 'IL'), ('IN', 'IN'), ('IA', 'IA'), ('KS', 'KS'), ('KY', 'KY'), ('LA', 'LA'), ('ME', 'ME'), ('MD', 'MD'), ('MA', 'MA'), ('MI', 'MI'), ('MN', 'MN'), ('MS', 'MS'), ('MO', 'MO'), ('MT', 'MT'), ('NE', 'NE'), ('NV', 'NV'), ('NH', 'NH'), ('NJ', 'NJ'), ('NM', 'NM'), ('NY', 'NY'), ('NC', 'NC'), ('ND', 'ND'), ('OH', 'OH'), ('OK', 'OK'), ('OR', 'OR'), ('PA', 'PA'), ('RI', 'RI'), ('SC', 'SC'), ('SD', 'SD'), ('TN', 'TN'), ('TX', 'TX'), ('UT', 'UT'), ('VT', 'VT'), ('VA', 'VA'), ('WA', 'WA'), ('WV', 'WV'), ('WI', 'WI'), ('WY', 'WY')], blank=True, null=True)
    date_of_first_payroll = models.DateField(custom=True, db_column='Date_of_First_Payroll__c', verbose_name='Date of First Payroll', sf_read_only=models.READ_ONLY, blank=True, null=True)
    dba = models.CharField(custom=True, db_column='DBA__c', max_length=100, verbose_name='DBA', sf_read_only=models.READ_ONLY, blank=True, null=True)
    partner_code = models.CharField(custom=True, db_column='Partner_Code__c', max_length=20, verbose_name='Partner Code', sf_read_only=models.READ_ONLY, blank=True, null=True)
    advisory_notice = models.TextField(custom=True, db_column='Advisory_Notice__c', verbose_name='Advisory Notice', sf_read_only=models.READ_ONLY, blank=True, null=True)
    referring_employee = models.ForeignKey('salesforce.User', models.DO_NOTHING, db_column='Referring_Employee__c', custom=True, related_name='account_referringemployee_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    state_swt_filing = models.CharField(custom=True, db_column='State_SWT_Filing__c', max_length=4099, verbose_name='State SWT Filing', sf_read_only=models.READ_ONLY, choices=[('Values', 'Values'), ('AL', 'AL'), ('AK', 'AK'), ('AZ', 'AZ'), ('AR', 'AR'), ('CA', 'CA'), ('CO', 'CO'), ('CT', 'CT'), ('DE', 'DE'), ('DC', 'DC'), ('FL', 'FL'), ('GA', 'GA'), ('HI', 'HI'), ('ID', 'ID'), ('IL', 'IL'), ('IN', 'IN'), ('IA', 'IA'), ('KS', 'KS'), ('KY', 'KY'), ('LA', 'LA'), ('ME', 'ME'), ('MD', 'MD'), ('MA', 'MA'), ('MI', 'MI'), ('MN', 'MN'), ('MS', 'MS'), ('MO', 'MO'), ('MT', 'MT'), ('NE', 'NE'), ('NV', 'NV'), ('NH', 'NH'), ('NJ', 'NJ'), ('NM', 'NM'), ('NY', 'NY'), ('NC', 'NC'), ('ND', 'ND'), ('OH', 'OH'), ('OK', 'OK'), ('OR', 'OR'), ('PA', 'PA'), ('RI', 'RI'), ('SC', 'SC'), ('SD', 'SD'), ('TN', 'TN'), ('TX', 'TX'), ('UT', 'UT'), ('VT', 'VT'), ('VA', 'VA'), ('WA', 'WA'), ('WV', 'WV'), ('WI', 'WI'), ('WY', 'WY')], blank=True, null=True)
    state_sdi_filing = models.CharField(custom=True, db_column='State_SDI_Filing__c', max_length=4099, verbose_name='State SDI Filing', sf_read_only=models.READ_ONLY, choices=[('Values', 'Values'), ('AL', 'AL'), ('AK', 'AK'), ('AZ', 'AZ'), ('AR', 'AR'), ('CA', 'CA'), ('CO', 'CO'), ('CT', 'CT'), ('DE', 'DE'), ('DC', 'DC'), ('FL', 'FL'), ('GA', 'GA'), ('HI', 'HI'), ('ID', 'ID'), ('IL', 'IL'), ('IN', 'IN'), ('IA', 'IA'), ('KS', 'KS'), ('KY', 'KY'), ('LA', 'LA'), ('ME', 'ME'), ('MD', 'MD'), ('MA', 'MA'), ('MI', 'MI'), ('MN', 'MN'), ('MS', 'MS'), ('MO', 'MO'), ('MT', 'MT'), ('NE', 'NE'), ('NV', 'NV'), ('NH', 'NH'), ('NJ', 'NJ'), ('NM', 'NM'), ('NY', 'NY'), ('NC', 'NC'), ('ND', 'ND'), ('OH', 'OH'), ('OK', 'OK'), ('OR', 'OR'), ('PA', 'PA'), ('RI', 'RI'), ('SC', 'SC'), ('SD', 'SD'), ('TN', 'TN'), ('TX', 'TX'), ('UT', 'UT'), ('VT', 'VT'), ('VA', 'VA'), ('WA', 'WA'), ('WV', 'WV'), ('WI', 'WI'), ('WY', 'WY')], blank=True, null=True)
    payroll_url = models.URLField(custom=True, db_column='Payroll_URL__c', verbose_name='Payroll URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    officer = models.CharField(custom=True, max_length=25, sf_read_only=models.READ_ONLY, blank=True, null=True)
    broker_payroll_referral_program = models.CharField(custom=True, db_column='Broker_Payroll_Referral_Program__c', max_length=255, verbose_name='Broker Payroll Referral Program', sf_read_only=models.READ_ONLY, choices=[('Yes', 'Yes'), ('No', 'No')], blank=True, null=True)
    file_thru_date = models.CharField(custom=True, db_column='File_Thru_Date__c', max_length=6, verbose_name='File Thru Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    region = models.CharField(custom=True, max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    premium = models.DecimalField(custom=True, max_digits=5, decimal_places=2, sf_read_only=models.READ_ONLY, blank=True, null=True)
    annualized_payroll_revenue = models.DecimalField(custom=True, db_column='Annualized_Payroll_Revenue__c', max_digits=18, decimal_places=2, verbose_name='Annualized Payroll Revenue', sf_read_only=models.READ_ONLY, help_text='The revolving sum of the last 12 months of invoices combined.', blank=True, null=True)
    maximum_discount_allowable = models.DecimalField(custom=True, db_column='Maximum_Discount_Allowable__c', max_digits=5, decimal_places=2, verbose_name='Maximum Discount Allowable', sf_read_only=models.READ_ONLY, help_text='The maximum discount that Sales is allowed to grant', blank=True, null=True)
    contracted_pricing_schedule = models.CharField(custom=True, db_column='Contracted_Pricing_Schedule__c', max_length=40, verbose_name='Contracted Pricing Schedule', sf_read_only=models.READ_ONLY, blank=True, null=True)
    xp_pp_corp_id_range = models.CharField(custom=True, db_column='XP_PP_Corp_ID_Range__c', max_length=40, verbose_name='XP/PP Corp ID Range', sf_read_only=models.READ_ONLY, blank=True, null=True)
    xp_pp_partner_code = models.CharField(custom=True, db_column='XP_PP_Partner_Code__c', max_length=40, verbose_name='XP/PP Partner Code', sf_read_only=models.READ_ONLY, blank=True, null=True)
    pam_cpo_partner_code = models.CharField(custom=True, db_column='PAM_CPO_Partner_Code__c', max_length=40, verbose_name='PAM/CPO Partner Code', sf_read_only=models.READ_ONLY, blank=True, null=True)
    back_office_partner_code = models.CharField(custom=True, db_column='Back_Office_Partner_Code__c', max_length=40, verbose_name='Back Office Partner Code', sf_read_only=models.READ_ONLY, blank=True, null=True)
    partner_category = models.CharField(custom=True, db_column='Partner_Category__c', max_length=255, verbose_name='Partner Category', sf_read_only=models.READ_ONLY, choices=[('Accountant', 'Accountant'), ('Acumatica VAR', 'Acumatica VAR'), ('Bank-Branch', 'Bank-Branch'), ('Bank-Main', 'Bank-Main'), ('BenefitMall broker', 'BenefitMall broker'), ('Benefitmall - Top Tier', 'Benefitmall - Top Tier'), ('Benefitmall - All Other', 'Benefitmall - All Other'), ('Benefitmall - Market Broker Prospect', 'Benefitmall - Market Broker Prospect'), ('Non-Benefitmall Broker', 'Non-Benefitmall Broker'), ('Business partner (other)', 'Business partner (other)'), ('Complimentary Payroll', 'Complimentary Payroll'), ('Financial institution', 'Financial institution'), ('Main', 'Main'), ('Sage', 'Sage'), ('Smart Tax Franchise', 'Smart Tax Franchise'), ('Warren/Averett', 'Warren/Averett')], blank=True, null=True)
    partner_subcategory = models.CharField(custom=True, db_column='Partner_Subcategory__c', max_length=4099, verbose_name='Partner Subcategory', sf_read_only=models.READ_ONLY, choices=[('Acquisition', 'Acquisition'), ('Back-office', 'Back-office'), ('Referral', 'Referral'), ('Sage BusinessWorks', 'Sage BusinessWorks'), ('Sage DacEasy', 'Sage DacEasy'), ('Sage HRMS', 'Sage HRMS'), ('Sage 50', 'Sage 50'), ('Sage 100 Contractor', 'Sage 100 Contractor'), ('Sage 100 ERP', 'Sage 100 ERP'), ('Sage 100 Fund Accounting', 'Sage 100 Fund Accounting'), ('Sage 300 Construction and Real Estate', 'Sage 300 Construction and Real Estate'), ('Sage 300 ERP', 'Sage 300 ERP'), ('Sage 500 ERP', 'Sage 500 ERP'), ('KeyBank Referral', 'KeyBank Referral'), ('KeyBank Back Office', 'KeyBank Back Office'), ('Wholesale Program', 'Wholesale Program')], blank=True, null=True)
    billing = models.CharField(custom=True, max_length=255, sf_read_only=models.READ_ONLY, choices=[('Bill Client', 'Bill Client'), ('Bill Accountant', 'Bill Accountant')], blank=True, null=True)
    coverage = models.CharField(custom=True, max_length=255, sf_read_only=models.READ_ONLY, choices=[('Field Sales', 'Field Sales'), ('Inside Sales', 'Inside Sales'), ('Mid Market', 'Mid Market'), ('Corporate/National Sales', 'Corporate/National Sales')], blank=True, null=True)
    contract_entrance_date = models.DateField(custom=True, db_column='Contract_Entrance_Date__c', verbose_name='Contract Entrance Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    payment_schedule = models.CharField(custom=True, db_column='Payment_Schedule__c', max_length=255, verbose_name='Payment Schedule', sf_read_only=models.READ_ONLY, choices=[('Monthly', 'Monthly'), ('Quarterly', 'Quarterly')], blank=True, null=True)
    promotions = models.CharField(custom=True, max_length=255, sf_read_only=models.READ_ONLY, choices=[('1 month free', '1 month free'), ('2 months free', '2 months free'), ('Free W-2s', 'Free W-2s')], blank=True, null=True)
    office = models.CharField(custom=True, max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_check_date = models.DateField(custom=True, db_column='Last_Check_Date__c', verbose_name='Last Check Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    schedule_day = models.CharField(custom=True, db_column='Schedule_Day__c', max_length=255, verbose_name='Schedule Day', sf_read_only=models.READ_ONLY, choices=[('Monday', 'Monday'), ('Tuesday', 'Tuesday'), ('Wednesday', 'Wednesday'), ('Thursday', 'Thursday'), ('Friday', 'Friday'), ('Saturday', 'Saturday'), ('Sunday', 'Sunday')], blank=True, null=True)
    do_not_sell = models.CharField(custom=True, db_column='Do_Not_Sell__c', max_length=4099, verbose_name='Do Not Sell', sf_read_only=models.READ_ONLY, choices=[('401k', '401k'), ('Accting SW', 'Accting SW'), ('All', 'All'), ('Casualty', 'Casualty'), ('Data Risk Management', 'Data Risk Management'), ('Emp Background Scrn', 'Emp Background Scrn'), ('FSA', 'FSA'), ('Gen Liability', 'Gen Liability'), ('Health to BMLL Broker', 'Health to BMLL Broker'), ('HR360', 'HR360'), ('HRA', 'HRA'), ('HRIS', 'HRIS'), ('HR Mgr Helpline', 'HR Mgr Helpline'), ('HSA', 'HSA'), ('L&D', 'L&D'), ('Mgr Self-Svc', 'Mgr Self-Svc'), ('NY SDI Prem Calc', 'NY SDI Prem Calc'), ('OnePay Svc', 'OnePay Svc'), ('PayComp', 'PayComp'), ('Payroll', 'Payroll'), ('P-Cards', 'P-Cards'), ('POP', 'POP'), ('PowerCobra', 'PowerCobra'), ('Prof Liability', 'Prof Liability'), ('Sec 132', 'Sec 132'), ('Tax Credit Rec', 'Tax Credit Rec'), ('Time & Att', 'Time & Att'), ('Unemployment', 'Unemployment'), ('Voluntary Benes', 'Voluntary Benes'), ('WC BMLL (P&C)', 'WC BMLL (P&C)'), ('WC Direct Bill', 'WC Direct Bill'), ('WC Other', 'WC Other'), ('WC PayComp', 'WC PayComp'), ('WC Wholesale', 'WC Wholesale'), ('Welfare', 'Welfare')], blank=True, null=True)
    broker_id = models.CharField(custom=True, db_column='Broker_ID__c', max_length=15, verbose_name='Broker ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    high_vis_yes_no = models.CharField(custom=True, db_column='HighVis_YesNo__c', max_length=1300, verbose_name='HighVis YesNo', sf_read_only=models.READ_ONLY, blank=True, null=True)
    lead_referral_date = models.DateField(custom=True, db_column='Lead_Referral_Date__c', verbose_name='Lead Referral Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    dns_formula = models.CharField(custom=True, db_column='DNS_Formula__c', max_length=1300, verbose_name='Do Not Sell List', sf_read_only=models.READ_ONLY, blank=True, null=True)
    dns_trigger = models.TextField(custom=True, db_column='DNS_Trigger__c', verbose_name='DNS_Trigger', sf_read_only=models.READ_ONLY, blank=True, null=True)
    primary_partner_type = models.CharField(custom=True, db_column='Primary_Partner_Type__c', max_length=255, verbose_name='Primary Partner Type', sf_read_only=models.READ_ONLY, choices=[('Agent', 'Agent'), ('CPA', 'CPA')], blank=True, null=True)
    primary_partner = models.ForeignKey('self', models.DO_NOTHING, db_column='Primary_Partner__c', custom=True, related_name='account_primarypartner_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    secondary_partner_type = models.CharField(custom=True, db_column='Secondary_Partner_Type__c', max_length=255, verbose_name='Secondary Partner Type', sf_read_only=models.READ_ONLY, choices=[('Agent', 'Agent'), ('CPA', 'CPA')], blank=True, null=True)
    secondary_partner = models.ForeignKey('self', models.DO_NOTHING, db_column='Secondary_Partner__c', custom=True, related_name='account_secondarypartner_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    update_flag = models.BooleanField(custom=True, verbose_name='UpdateFlag', sf_read_only=models.READ_ONLY, default=models.DefaultedOnCreate(False))
    loss_notes = models.TextField(custom=True, db_column='Loss_Notes__c', verbose_name='Loss Notes', sf_read_only=models.READ_ONLY, help_text='Any details surrounding customer leaving payroll services', blank=True, null=True)
    zchange_origin = models.CharField(custom=True, db_column='ZChangeOrigin__c', max_length=16, verbose_name='ZChangeOrigin', sf_read_only=models.READ_ONLY, blank=True, null=True)
    number_of_full_time_equivalents = models.DecimalField(custom=True, db_column='Number_Of_Full_Time_Equivalents__c', max_digits=18, decimal_places=0, verbose_name='Number Of Full Time Equivalents', sf_read_only=models.READ_ONLY, blank=True, null=True)
    number_of_full_time_equivalents_as_of_date = models.DateField(custom=True, db_column='Number_Of_Full_Time_Equivalents_AsOfDate__c', verbose_name='Number Of Full Time Equivalents AsOfDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    first_name = models.CharField(custom=True, db_column='First_Name__c', max_length=40, verbose_name='First Name', sf_read_only=models.READ_ONLY, blank=True, null=True)
    middle_name = models.CharField(custom=True, db_column='Middle_Name__c', max_length=40, verbose_name='Middle Name', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_name = models.CharField(custom=True, db_column='Last_Name__c', max_length=50, verbose_name='Last Name', sf_read_only=models.READ_ONLY, blank=True, null=True)
    broker_referral_program = models.CharField(custom=True, db_column='Broker_Referral_Program__c', max_length=255, verbose_name='Broker Referral Program', sf_read_only=models.READ_ONLY, choices=[('Yes', 'Yes'), ('No', 'No')], blank=True, null=True)
    entitlement_program = models.CharField(custom=True, db_column='Entitlement_Program__c', max_length=255, verbose_name='Entitlement Program', sf_read_only=models.READ_ONLY, choices=[('Broker Referral', 'Broker Referral'), ('Payroll Subjective', 'Payroll Subjective')], blank=True, null=True)
    entitlement = models.CharField(custom=True, max_length=1300, sf_read_only=models.READ_ONLY, blank=True, null=True)
    primary_partner_type_f = models.CharField(custom=True, db_column='Primary_Partner_Type_f__c', max_length=1300, verbose_name='Primary Partner Type', sf_read_only=models.READ_ONLY, blank=True, null=True)
    secondary_partner_type_f = models.CharField(custom=True, db_column='Secondary_Partner_Type_f__c', max_length=1300, verbose_name='Secondary Partner Type', sf_read_only=models.READ_ONLY, blank=True, null=True)
    reverse_integration_error = models.TextField(custom=True, db_column='Reverse_Integration_Error__c', verbose_name='Reverse Integration Error', sf_read_only=models.READ_ONLY, blank=True, null=True)
    pay_focus_hr_features = models.CharField(custom=True, db_column='PayFocus_HR_features__c', max_length=4099, verbose_name='PayFocus HR features', sf_read_only=models.READ_ONLY, choices=[('Position Profiles', 'Position Profiles'), ('Document Management', 'Document Management'), ('Org Chart', 'Org Chart'), ('Compliance Reporting', 'Compliance Reporting'), ('PTO Request', 'PTO Request'), ('Performance Management', 'Performance Management'), ('Custom Fields', 'Custom Fields'), ('Manager Self Service', 'Manager Self Service'), ('Company Calendar', 'Company Calendar')], blank=True, null=True)
    original_date_of_first_payroll = models.DateField(custom=True, db_column='Original_Date_of_First_Payroll__c', verbose_name='Original Date of First Payroll', sf_read_only=models.READ_ONLY, blank=True, null=True)
    people_focus_effective_date = models.DateField(custom=True, db_column='PeopleFocus_Effective_Date__c', verbose_name='PeopleFocus Effective Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    people_focus_term_date = models.DateField(custom=True, db_column='PeopleFocus_Term_Date__c', verbose_name='PeopleFocus Term Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    people_focus = models.BooleanField(custom=True, verbose_name='PeopleFocus', sf_read_only=models.READ_ONLY, default=models.DefaultedOnCreate(False))
    contracted_products = models.CharField(custom=True, db_column='Contracted_Products__c', max_length=4099, verbose_name='Contracted Products', sf_read_only=models.READ_ONLY, choices=[('401k', '401k'), ('allCompliance', 'allCompliance'), ('HRFocus', 'HRFocus'), ('Time/Attendance', 'Time/Attendance'), ("Worker's Compensation", "Worker's Compensation"), ('Payroll', 'Payroll')], blank=True, null=True)
    retail_broker = models.CharField(custom=True, db_column='Retail_Broker__c', max_length=255, verbose_name='Retail Broker', sf_read_only=models.READ_ONLY, choices=[('AG', 'AG'), ('Forest', 'Forest')], blank=True, null=True)
    payroll_platform = models.CharField(custom=True, db_column='Payroll_Platform__c', max_length=1300, verbose_name='Payroll Platform', sf_read_only=models.READ_ONLY, blank=True, null=True)
    cs_team = models.CharField(custom=True, db_column='CS_Team__c', max_length=255, verbose_name='CS Team', sf_read_only=models.READ_ONLY, choices=[('1', '1'), ('2', '2'), ('4', '4'), ('7', '7'), ('8', '8'), ('C', 'C'), ('D', 'D'), ('H', 'H'), ('K', 'K'), ('M', 'M'), ('P', 'P'), ('R', 'R')], blank=True, null=True)
    ffm = models.CharField(custom=True, db_column='FFM__c', max_length=100, verbose_name='FFM#', sf_read_only=models.READ_ONLY, help_text='Federally Facilitated Marketplace', blank=True, null=True)
    npn = models.CharField(custom=True, db_column='NPN__c', max_length=100, verbose_name='NPN#', sf_read_only=models.READ_ONLY, help_text='National Producer Number', blank=True, null=True)
    corporate_city = models.CharField(custom=True, db_column='Corporate_City__c', max_length=60, verbose_name='Corporate City', sf_read_only=models.READ_ONLY, blank=True, null=True)
    corporate_name = models.TextField(custom=True, db_column='Corporate_Name__c', verbose_name='Corporate Name', sf_read_only=models.READ_ONLY, blank=True, null=True)
    corporate_state_province = models.CharField(custom=True, db_column='Corporate_State_Province__c', max_length=60, verbose_name='Corporate State/Province', sf_read_only=models.READ_ONLY, blank=True, null=True)
    corporate_street = models.CharField(custom=True, db_column='Corporate_Street__c', max_length=255, verbose_name='Corporate Street', sf_read_only=models.READ_ONLY, blank=True, null=True)
    corporate_zip_postal_code = models.CharField(custom=True, db_column='Corporate_Zip_Postal_Code__c', max_length=15, verbose_name='Corporate Zip/Postal Code', sf_read_only=models.READ_ONLY, blank=True, null=True)
    first_meeting_completed = models.DateField(custom=True, db_column='First_Meeting_Completed__c', verbose_name='First Meeting Completed', sf_read_only=models.READ_ONLY, blank=True, null=True)
    products_offered_lost = models.CharField(custom=True, db_column='Products_Offered_Lost__c', max_length=4099, verbose_name='Products- Offered Lost', sf_read_only=models.READ_ONLY, blank=True, null=True)
    products_offered_open = models.CharField(custom=True, db_column='Products_Offered_Open__c', max_length=4099, verbose_name='Products- Offered Open', sf_read_only=models.READ_ONLY, blank=True, null=True)
    services_active = models.CharField(custom=True, db_column='Services_Active__c', max_length=4099, verbose_name='Services - Active', sf_read_only=models.READ_ONLY, choices=[('401k-Admin Only', '401k-Admin Only'), ('401k-Power401k', '401k-Power401k'), ('Abra Suite', 'Abra Suite'), ('Abra Sync', 'Abra Sync'), ('ACA Compliance', 'ACA Compliance'), ('allCompliance PEPM Charge', 'allCompliance PEPM Charge'), ('Compliance Posters (Biweekly)', 'Compliance Posters (Biweekly)'), ('Compliance Posters (Semimonthly)', 'Compliance Posters (Semimonthly)'), ('Compliance Posters (Weekly)', 'Compliance Posters (Weekly)'), ('Compupay 125', 'Compupay 125'), ('Deferred Comp', 'Deferred Comp'), ('Direct Deposit', 'Direct Deposit'), ('ESS', 'ESS'), ('FSA', 'FSA'), ('General Ledger', 'General Ledger'), ('GL Interface-Add-on to Basic', 'GL Interface-Add-on to Basic'), ('HR Manager Helpline', 'HR Manager Helpline'), ('HR360', 'HR360'), ('HRFocus 500 Installation Fee', 'HRFocus 500 Installation Fee'), ('HRFocus Hardware', 'HRFocus Hardware'), ('HRIntegrations', 'HRIntegrations'), ('HRIS-HR Online - 3rd party', 'HRIS-HR Online - 3rd party'), ('HRIS-Sage HRMS', 'HRIS-Sage HRMS'), ('HRO to CPO', 'HRO to CPO'), ('HROnline', 'HROnline'), ('Manager Helpline', 'Manager Helpline'), ('Manager Helpline (Biweekly)', 'Manager Helpline (Biweekly)'), ('Manager Helpline (Monthly)', 'Manager Helpline (Monthly)'), ('Manager Helpline (Semimonthly)', 'Manager Helpline (Semimonthly)'), ('Manager Self Service', 'Manager Self Service'), ('NY SDI Admin', 'NY SDI Admin'), ('One Pay', 'One Pay'), ('OnePay Check Service-Base Setup', 'OnePay Check Service-Base Setup'), ('PayAgent', 'PayAgent'), ('Payroll Base Fee', 'Payroll Base Fee'), ('Payroll Cards (P-Cards)-PayOptions Card', 'Payroll Cards (P-Cards)-PayOptions Card'), ('Poster E-Update Service', 'Poster E-Update Service'), ('Restaurant Svc Pack + Avero (Monthly)', 'Restaurant Svc Pack + Avero (Monthly)'), ('Restaurant Svc Pack + Avero (Weekly)', 'Restaurant Svc Pack + Avero (Weekly)'), ('SAGE ESS', 'SAGE ESS'), ('Section 125', 'Section 125'), ('Section 132', 'Section 132'), ('Tax Filing', 'Tax Filing'), ('Time & Attendance-CompuPay Time', 'Time & Attendance-CompuPay Time'), ('TimeFocus', 'TimeFocus'), ('TippedReporting', 'TippedReporting'), ('Worker Comp', 'Worker Comp'), ('Workers Compensation Report', 'Workers Compensation Report')], blank=True, null=True)
    services_inactive = models.CharField(custom=True, db_column='Services_Inactive__c', max_length=4099, verbose_name='Services - Inactive', sf_read_only=models.READ_ONLY, choices=[('401k-Admin Only', '401k-Admin Only'), ('401k-Power401k', '401k-Power401k'), ('Abra Suite', 'Abra Suite'), ('Abra Sync', 'Abra Sync'), ('ACA Compliance', 'ACA Compliance'), ('allCompliance PEPM Charge', 'allCompliance PEPM Charge'), ('Compliance Posters (Biweekly)', 'Compliance Posters (Biweekly)'), ('Compliance Posters (Semimonthly)', 'Compliance Posters (Semimonthly)'), ('Compliance Posters (Weekly)', 'Compliance Posters (Weekly)'), ('Compupay 125', 'Compupay 125'), ('Deferred Comp', 'Deferred Comp'), ('Direct Deposit', 'Direct Deposit'), ('ESS', 'ESS'), ('FSA', 'FSA'), ('General Ledger', 'General Ledger'), ('GL Interface-Add-on to Basic', 'GL Interface-Add-on to Basic'), ('HR Manager Helpline', 'HR Manager Helpline'), ('HR360', 'HR360'), ('HRFocus 500 Installation Fee', 'HRFocus 500 Installation Fee'), ('HRFocus Hardware', 'HRFocus Hardware'), ('HRIntegrations', 'HRIntegrations'), ('HRIS-HR Online - 3rd party', 'HRIS-HR Online - 3rd party'), ('HRIS-Sage HRMS', 'HRIS-Sage HRMS'), ('HRO to CPO', 'HRO to CPO'), ('HROnline', 'HROnline'), ('Manager Helpline', 'Manager Helpline'), ('Manager Helpline (Biweekly)', 'Manager Helpline (Biweekly)'), ('Manager Helpline (Monthly)', 'Manager Helpline (Monthly)'), ('Manager Helpline (Semimonthly)', 'Manager Helpline (Semimonthly)'), ('Manager Self Service', 'Manager Self Service'), ('NY SDI Admin', 'NY SDI Admin'), ('One Pay', 'One Pay'), ('OnePay Check Service-Base Setup', 'OnePay Check Service-Base Setup'), ('PayAgent', 'PayAgent'), ('Payroll Base Fee', 'Payroll Base Fee'), ('Payroll Cards (P-Cards)-PayOptions Card', 'Payroll Cards (P-Cards)-PayOptions Card'), ('Poster E-Update Service', 'Poster E-Update Service'), ('Restaurant Svc Pack + Avero (Monthly)', 'Restaurant Svc Pack + Avero (Monthly)'), ('Restaurant Svc Pack + Avero (Weekly)', 'Restaurant Svc Pack + Avero (Weekly)'), ('SAGE ESS', 'SAGE ESS'), ('Section 125', 'Section 125'), ('Section 132', 'Section 132'), ('Tax Filing', 'Tax Filing'), ('Time & Attendance-CompuPay Time', 'Time & Attendance-CompuPay Time'), ('TimeFocus', 'TimeFocus'), ('TippedReporting', 'TippedReporting'), ('Worker Comp', 'Worker Comp'), ('Workers Compensation Report', 'Workers Compensation Report')], blank=True, null=True)
    vanilla_soft_lead = models.BooleanField(custom=True, db_column='VanillaSoft_Lead__c', verbose_name='LMT Processed', sf_read_only=models.READ_ONLY, default=models.DefaultedOnCreate(False))
    cannabis_business = models.BooleanField(custom=True, db_column='Cannabis_Business__c', verbose_name='MRB', sf_read_only=models.READ_ONLY, default=models.DefaultedOnCreate(False))
    ps_scheduled_delivery_date_time_0 = models.DateTimeField(custom=True, db_column='PS_Scheduled_Delivery_Date_Time_0__c', verbose_name='PS-Scheduled Delivery Date/Time 0', sf_read_only=models.READ_ONLY, blank=True, null=True)
    ps_scheduled_delivery_date_time_1 = models.DateTimeField(custom=True, db_column='PS_Scheduled_Delivery_Date_Time_1__c', verbose_name='PS-Scheduled Delivery Date/Time 1', sf_read_only=models.READ_ONLY, blank=True, null=True)
    ps_scheduled_delivery_date_time_2 = models.DateTimeField(custom=True, db_column='PS_Scheduled_Delivery_Date_Time_2__c', verbose_name='PS-Scheduled Delivery Date/Time 2', sf_read_only=models.READ_ONLY, blank=True, null=True)
    ps_scheduled_delivery_date_time_3 = models.DateTimeField(custom=True, db_column='PS_Scheduled_Delivery_Date_Time_3__c', verbose_name='PS-Scheduled Delivery Date/Time 3', sf_read_only=models.READ_ONLY, blank=True, null=True)
    ps_scheduled_delivery_date_time_4 = models.DateTimeField(custom=True, db_column='PS_Scheduled_Delivery_Date_Time_4__c', verbose_name='PS-Scheduled Delivery Date/Time 4', sf_read_only=models.READ_ONLY, blank=True, null=True)
    ps_scheduled_delivery_date_time_5 = models.DateTimeField(custom=True, db_column='PS_Scheduled_Delivery_Date_Time_5__c', verbose_name='PS-Scheduled Delivery Date/Time 5', sf_read_only=models.READ_ONLY, blank=True, null=True)
    ps_scheduled_delivery_date_time_6 = models.DateTimeField(custom=True, db_column='PS_Scheduled_Delivery_Date_Time_6__c', verbose_name='PS-Scheduled Delivery Date/Time 6', sf_read_only=models.READ_ONLY, blank=True, null=True)
    ps_scheduled_delivery_date_time_7 = models.DateTimeField(custom=True, db_column='PS_Scheduled_Delivery_Date_Time_7__c', verbose_name='PS-Scheduled Delivery Date/Time 7', sf_read_only=models.READ_ONLY, blank=True, null=True)
    ps_scheduled_delivery_date_time_8 = models.DateTimeField(custom=True, db_column='PS_Scheduled_Delivery_Date_Time_8__c', verbose_name='PS-Scheduled Delivery Date/Time 8', sf_read_only=models.READ_ONLY, blank=True, null=True)
    ps_scheduled_delivery_date_time_9 = models.DateTimeField(custom=True, db_column='PS_Scheduled_Delivery_Date_Time_9__c', verbose_name='PS-Scheduled Delivery Date/Time 9', sf_read_only=models.READ_ONLY, blank=True, null=True)
    ps_service_0 = models.CharField(custom=True, db_column='PS_Service_0__c', max_length=100, verbose_name='PS-Service 0', sf_read_only=models.READ_ONLY, blank=True, null=True)
    ps_service_1 = models.CharField(custom=True, db_column='PS_Service_1__c', max_length=100, verbose_name='PS-Service 1', sf_read_only=models.READ_ONLY, blank=True, null=True)
    ps_service_2 = models.CharField(custom=True, db_column='PS_Service_2__c', max_length=100, verbose_name='PS-Service 2', sf_read_only=models.READ_ONLY, blank=True, null=True)
    ps_service_3 = models.CharField(custom=True, db_column='PS_Service_3__c', max_length=100, verbose_name='PS-Service 3', sf_read_only=models.READ_ONLY, blank=True, null=True)
    ps_service_4 = models.CharField(custom=True, db_column='PS_Service_4__c', max_length=100, verbose_name='PS-Service 4', sf_read_only=models.READ_ONLY, blank=True, null=True)
    ps_service_5 = models.CharField(custom=True, db_column='PS_Service_5__c', max_length=100, verbose_name='PS-Service 5', sf_read_only=models.READ_ONLY, blank=True, null=True)
    ps_service_6 = models.CharField(custom=True, db_column='PS_Service_6__c', max_length=100, verbose_name='PS-Service 6', sf_read_only=models.READ_ONLY, blank=True, null=True)
    ps_service_7 = models.CharField(custom=True, db_column='PS_Service_7__c', max_length=100, verbose_name='PS-Service 7', sf_read_only=models.READ_ONLY, blank=True, null=True)
    ps_service_8 = models.CharField(custom=True, db_column='PS_Service_8__c', max_length=100, verbose_name='PS-Service 8', sf_read_only=models.READ_ONLY, blank=True, null=True)
    ps_service_9 = models.CharField(custom=True, db_column='PS_Service_9__c', max_length=100, verbose_name='PS-Service 9', sf_read_only=models.READ_ONLY, blank=True, null=True)
    ps_ship_to_address_0 = models.CharField(custom=True, db_column='PS_Ship_To_Address_0__c', max_length=255, verbose_name='PS-Ship To Address 0', sf_read_only=models.READ_ONLY, blank=True, null=True)
    ps_ship_to_address_1 = models.CharField(custom=True, db_column='PS_Ship_To_Address_1__c', max_length=255, verbose_name='PS-Ship To Address 1', sf_read_only=models.READ_ONLY, blank=True, null=True)
    ps_ship_to_address_2 = models.CharField(custom=True, db_column='PS_Ship_To_Address_2__c', max_length=255, verbose_name='PS-Ship To Address 2', sf_read_only=models.READ_ONLY, blank=True, null=True)
    ps_ship_to_address_3 = models.CharField(custom=True, db_column='PS_Ship_To_Address_3__c', max_length=255, verbose_name='PS-Ship To Address 3', sf_read_only=models.READ_ONLY, blank=True, null=True)
    ps_ship_to_address_4 = models.CharField(custom=True, db_column='PS_Ship_To_Address_4__c', max_length=255, verbose_name='PS-Ship To Address 4', sf_read_only=models.READ_ONLY, blank=True, null=True)
    ps_ship_to_address_5 = models.CharField(custom=True, db_column='PS_Ship_To_Address_5__c', max_length=255, verbose_name='PS-Ship To Address 5', sf_read_only=models.READ_ONLY, blank=True, null=True)
    ps_ship_to_address_6 = models.CharField(custom=True, db_column='PS_Ship_To_Address_6__c', max_length=255, verbose_name='PS-Ship To Address 6', sf_read_only=models.READ_ONLY, blank=True, null=True)
    ps_ship_to_address_7 = models.CharField(custom=True, db_column='PS_Ship_To_Address_7__c', max_length=255, verbose_name='PS-Ship To Address 7', sf_read_only=models.READ_ONLY, blank=True, null=True)
    ps_ship_to_address_8 = models.CharField(custom=True, db_column='PS_Ship_To_Address_8__c', max_length=255, verbose_name='PS-Ship To Address 8', sf_read_only=models.READ_ONLY, blank=True, null=True)
    ps_ship_to_address_9 = models.CharField(custom=True, db_column='PS_Ship_To_Address_9__c', max_length=255, verbose_name='PS-Ship To Address 9', sf_read_only=models.READ_ONLY, blank=True, null=True)
    ps_ship_to_attention_0 = models.CharField(custom=True, db_column='PS_Ship_To_Attention_0__c', max_length=100, verbose_name='PS-Ship To Attention 0', sf_read_only=models.READ_ONLY, blank=True, null=True)
    ps_ship_to_attention_1 = models.CharField(custom=True, db_column='PS_Ship_To_Attention_1__c', max_length=100, verbose_name='PS-Ship To Attention 1', sf_read_only=models.READ_ONLY, blank=True, null=True)
    ps_ship_to_attention_2 = models.CharField(custom=True, db_column='PS_Ship_To_Attention_2__c', max_length=100, verbose_name='PS-Ship To Attention 2', sf_read_only=models.READ_ONLY, blank=True, null=True)
    ps_ship_to_attention_3 = models.CharField(custom=True, db_column='PS_Ship_To_Attention_3__c', max_length=100, verbose_name='PS-Ship To Attention 3', sf_read_only=models.READ_ONLY, blank=True, null=True)
    ps_ship_to_attention_4 = models.CharField(custom=True, db_column='PS_Ship_To_Attention_4__c', max_length=100, verbose_name='PS-Ship To Attention 4', sf_read_only=models.READ_ONLY, blank=True, null=True)
    ps_ship_to_attention_5 = models.CharField(custom=True, db_column='PS_Ship_To_Attention_5__c', max_length=100, verbose_name='PS-Ship To Attention 5', sf_read_only=models.READ_ONLY, blank=True, null=True)
    ps_ship_to_attention_6 = models.CharField(custom=True, db_column='PS_Ship_To_Attention_6__c', max_length=100, verbose_name='PS-Ship To Attention 6', sf_read_only=models.READ_ONLY, blank=True, null=True)
    ps_ship_to_attention_7 = models.CharField(custom=True, db_column='PS_Ship_To_Attention_7__c', max_length=100, verbose_name='PS-Ship To Attention 7', sf_read_only=models.READ_ONLY, blank=True, null=True)
    ps_ship_to_attention_8 = models.CharField(custom=True, db_column='PS_Ship_To_Attention_8__c', max_length=100, verbose_name='PS-Ship To Attention 8', sf_read_only=models.READ_ONLY, blank=True, null=True)
    ps_ship_to_attention_9 = models.CharField(custom=True, db_column='PS_Ship_To_Attention_9__c', max_length=100, verbose_name='PS-Ship To Attention 9', sf_read_only=models.READ_ONLY, blank=True, null=True)
    ps_tracking_number_0 = models.CharField(custom=True, db_column='PS_Tracking_Number_0__c', max_length=100, verbose_name='PS-Tracking Number 0', sf_read_only=models.READ_ONLY, blank=True, null=True)
    ps_tracking_number_1 = models.CharField(custom=True, db_column='PS_Tracking_Number_1__c', max_length=100, verbose_name='PS-Tracking Number 1', sf_read_only=models.READ_ONLY, blank=True, null=True)
    ps_tracking_number_2 = models.CharField(custom=True, db_column='PS_Tracking_Number_2__c', max_length=100, verbose_name='PS-Tracking Number 2', sf_read_only=models.READ_ONLY, blank=True, null=True)
    ps_tracking_number_3 = models.CharField(custom=True, db_column='PS_Tracking_Number_3__c', max_length=100, verbose_name='PS-Tracking Number 3', sf_read_only=models.READ_ONLY, blank=True, null=True)
    ps_tracking_number_4 = models.CharField(custom=True, db_column='PS_Tracking_Number_4__c', max_length=100, verbose_name='PS-Tracking Number 4', sf_read_only=models.READ_ONLY, blank=True, null=True)
    ps_tracking_number_5 = models.CharField(custom=True, db_column='PS_Tracking_Number_5__c', max_length=100, verbose_name='PS-Tracking Number 5', sf_read_only=models.READ_ONLY, blank=True, null=True)
    ps_tracking_number_6 = models.CharField(custom=True, db_column='PS_Tracking_Number_6__c', max_length=100, verbose_name='PS-Tracking Number 6', sf_read_only=models.READ_ONLY, blank=True, null=True)
    ps_tracking_number_7 = models.CharField(custom=True, db_column='PS_Tracking_Number_7__c', max_length=100, verbose_name='PS-Tracking Number 7', sf_read_only=models.READ_ONLY, blank=True, null=True)
    ps_tracking_number_8 = models.CharField(custom=True, db_column='PS_Tracking_Number_8__c', max_length=100, verbose_name='PS-Tracking Number 8', sf_read_only=models.READ_ONLY, blank=True, null=True)
    ps_tracking_number_9 = models.CharField(custom=True, db_column='PS_Tracking_Number_9__c', max_length=100, verbose_name='PS-Tracking Number 9', sf_read_only=models.READ_ONLY, blank=True, null=True)
    ssn = models.CharField(custom=True, db_column='SSN__c', max_length=9, verbose_name='SSN', sf_read_only=models.READ_ONLY, blank=True, null=True)
    ben_admin_system = models.CharField(custom=True, db_column='BenAdmin_System__c', max_length=255, verbose_name='BenAdmin System', sf_read_only=models.READ_ONLY, choices=[('EaseCentral', 'EaseCentral'), ('EmployerFocus', 'EmployerFocus'), ('EmployeeNavigator', 'EmployeeNavigator'), ('HR Focus', 'HR Focus')], blank=True, null=True)
    naics_code = models.CharField(custom=True, db_column='NAICS_Code__c', max_length=8, verbose_name='NAICS Code', sf_read_only=models.READ_ONLY, blank=True, null=True)
    marketing_engaged = models.BooleanField(custom=True, db_column='Marketing_Engaged__c', verbose_name='Marketing Engaged', sf_read_only=models.READ_ONLY, default=models.DefaultedOnCreate(False))
    annualized_premium = models.DecimalField(custom=True, db_column='Annualized_Premium__c', max_digits=18, decimal_places=2, verbose_name='Annualized Premium', sf_read_only=models.READ_ONLY, blank=True, null=True)
    bse_assigned = models.ForeignKey('salesforce.User', models.DO_NOTHING, db_column='BSE_Assigned__c', custom=True, related_name='account_bseassigned_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    naics_description = models.CharField(custom=True, db_column='NAICS_Description__c', max_length=120, verbose_name='NAICS Description', sf_read_only=models.READ_ONLY, blank=True, null=True)
    active_assigned_dm_or_bse = models.BooleanField(custom=True, db_column='Active_Assigned_DM_or_BSE__c', verbose_name='Active Assigned DM or BSE', sf_read_only=models.READ_ONLY, default=models.DEFAULTED_ON_CREATE)
    noof_attachment = models.DecimalField(custom=True, max_digits=5, decimal_places=0, verbose_name='NoofAttachment', sf_read_only=models.READ_ONLY, blank=True, null=True)
    broker_class = models.CharField(custom=True, db_column='Broker_Class__c', max_length=255, verbose_name='Broker Class', sf_read_only=models.READ_ONLY, choices=[('Active', 'Active'), ('Growth', 'Growth'), ('Inactive', 'Inactive')], blank=True, null=True)
    bws_principle_agent_agency = models.ForeignKey('self', models.DO_NOTHING, db_column='BWS_Principle_Agent_Agency__c', custom=True, related_name='account_bwsprincipleagentagency_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    hipaa_acceptance = models.BooleanField(custom=True, db_column='HIPAA_Acceptance__c', verbose_name='HIPAA Acceptance', sf_read_only=models.READ_ONLY, default=models.DefaultedOnCreate(False))
    hipaa_agreement = models.DateTimeField(custom=True, db_column='HIPAA_Agreement__c', verbose_name='HIPAA Agreement', sf_read_only=models.READ_ONLY, blank=True, null=True)
    contract_term_date = models.DateField(custom=True, db_column='Contract_Term_Date__c', verbose_name='Contract Term Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    do_not_contact = models.BooleanField(custom=True, db_column='Do_Not_Contact__c', verbose_name='Do Not Contact', sf_read_only=models.READ_ONLY, default=models.DefaultedOnCreate(False))
    has_administered_plan = models.BooleanField(custom=True, verbose_name='HasAdministeredPlan', sf_read_only=models.READ_ONLY, default=models.DefaultedOnCreate(False))
    marketing_engaged_date = models.DateField(custom=True, db_column='Marketing_Engaged_Date__c', verbose_name='Marketing Engaged Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    bank = models.CharField(custom=True, max_length=100, sf_read_only=models.READ_ONLY, blank=True, null=True)
    benefit_enrollment_date = models.DateField(custom=True, db_column='Benefit_Enrollment_Date__c', verbose_name='Benefit Enrollment Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    benefits_carrier = models.CharField(custom=True, db_column='Benefits_Carrier__c', max_length=100, verbose_name='Benefits Carrier', sf_read_only=models.READ_ONLY, blank=True, null=True)
    benefits_offered = models.CharField(custom=True, db_column='Benefits_Offered__c', max_length=4099, verbose_name='Benefits Offered', sf_read_only=models.READ_ONLY, choices=[('Medical', 'Medical'), ('Dental', 'Dental'), ('Vision', 'Vision'), ('WC', 'WC')], blank=True, null=True)
    broker2 = models.CharField(custom=True, max_length=100, verbose_name='Broker', sf_read_only=models.READ_ONLY, blank=True, null=True)
    current_hr_system = models.CharField(custom=True, db_column='Current_HR_System__c', max_length=255, verbose_name='Current HR System', sf_read_only=models.READ_ONLY, choices=[('ADP', 'ADP'), ('Ascentis', 'Ascentis'), ('Bamboo HR', 'Bamboo HR'), ('Epicor', 'Epicor'), ('Kronos', 'Kronos'), ('Optimum Employer Solutions', 'Optimum Employer Solutions'), ('Oracle', 'Oracle'), ('Other', 'Other'), ('Paychex', 'Paychex'), ('Paycor', 'Paycor'), ('Paylocity', 'Paylocity'), ('PeopleSoft', 'PeopleSoft'), ('Proliant', 'Proliant'), ('Sage', 'Sage'), ('Ultimate Software', 'Ultimate Software'), ('Zenefits', 'Zenefits')], blank=True, null=True)
    current_time_system = models.CharField(custom=True, db_column='Current_Time_System__c', max_length=255, verbose_name='Current Time System', sf_read_only=models.READ_ONLY, choices=[('Avero', 'Avero'), ('CTR/NY', 'CTR/NY'), ('HRFocus', 'HRFocus'), ('Insperity', 'Insperity'), ('iSolved Time', 'iSolved Time'), ('Kronos', 'Kronos'), ('Other', 'Other'), ('SwipeClock', 'SwipeClock'), ('TimeFocus', 'TimeFocus')], blank=True, null=True)
    wc_carrier = models.CharField(custom=True, db_column='WC_Carrier__c', max_length=100, verbose_name='WC Carrier', sf_read_only=models.READ_ONLY, blank=True, null=True)
    wc_renewal_date = models.DateField(custom=True, db_column='WC_Renewal_Date__c', verbose_name='WC Renewal Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    accountant = models.CharField(custom=True, max_length=100, sf_read_only=models.READ_ONLY, blank=True, null=True)
    days_since_last_bfits_nb_case_created = models.DecimalField(custom=True, db_column='Days_Since_Last_Bfits_NB_Case_Created__c', max_digits=18, decimal_places=0, verbose_name='Days Since Last Bfits NB Case Created', sf_read_only=models.READ_ONLY, blank=True, null=True)
    days_since_last_oppty_modified = models.DecimalField(custom=True, db_column='Days_Since_Last_Oppty_Modified__c', max_digits=18, decimal_places=0, verbose_name='Days Since Last Oppty Modified', sf_read_only=models.READ_ONLY, blank=True, null=True)
    days_since_last_task_completed = models.DecimalField(custom=True, db_column='Days_Since_Last_Task_Completed__c', max_digits=18, decimal_places=0, verbose_name='Days Since Last Task Completed', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_bfits_nb_case_created = models.DateField(custom=True, db_column='Last_Bfits_NB_Case_Created__c', verbose_name='Last Bfits NB Case Created', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_oppty_modified = models.DateField(custom=True, db_column='Last_Oppty_Modified__c', verbose_name='Last Oppty Modified', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_task_completed = models.DateField(custom=True, db_column='Last_Task_Completed__c', verbose_name='Last Task Completed', sf_read_only=models.READ_ONLY, blank=True, null=True)
    ben_admin_integrated = models.BooleanField(custom=True, db_column='BenAdmin_Integrated__c', verbose_name='BenAdmin Integrated', sf_read_only=models.READ_ONLY, default=models.DefaultedOnCreate(False))
    inquisium_descriptor = models.CharField(custom=True, db_column='Inquisium_Descriptor__c', max_length=1300, verbose_name='Inquisium Descriptor', sf_read_only=models.READ_ONLY, blank=True, null=True)
    local_code = models.CharField(custom=True, db_column='Local_Code__c', max_length=255, verbose_name='Local Code', sf_read_only=models.READ_ONLY, blank=True, null=True)
    national_code = models.CharField(custom=True, db_column='National_Code__c', max_length=255, verbose_name='National Code', sf_read_only=models.READ_ONLY, blank=True, null=True)
    reason_type = models.CharField(custom=True, db_column='Reason_Type__c', max_length=1300, verbose_name='Reason Type', sf_read_only=models.READ_ONLY, blank=True, null=True)
    referral_nps = models.DecimalField(custom=True, db_column='Referral_NPS__c', max_digits=10, decimal_places=2, verbose_name='Referral NPS', sf_read_only=models.READ_ONLY, blank=True, null=True)
    service_nps = models.DecimalField(custom=True, db_column='Service_NPS__c', max_digits=10, decimal_places=2, verbose_name='Service NPS', sf_read_only=models.READ_ONLY, blank=True, null=True)
    bundle = models.CharField(custom=True, max_length=255, sf_read_only=models.READ_ONLY, default=models.DefaultedOnCreate('HR Basic'), choices=[('HR Basic', 'HR Basic'), ('HR Essentials', 'HR Essentials'), ('HR Enhanced', 'HR Enhanced')], blank=True, null=True)
    large_group_notifications = models.BooleanField(custom=True, db_column='Large_Group_Notifications__c', verbose_name='Large Group Notifications', sf_read_only=models.READ_ONLY, default=models.DefaultedOnCreate(True))
    small_group_notifications = models.BooleanField(custom=True, db_column='Small_Group_Notifications__c', verbose_name='Small Group Notifications', sf_read_only=models.READ_ONLY, default=models.DefaultedOnCreate(True))
    tpa_notification_email = models.EmailField(custom=True, db_column='TPA_Notification_Email__c', verbose_name='TPA Notification Email', sf_read_only=models.READ_ONLY, blank=True, null=True)
    qbdialer_close_date = models.DateTimeField(db_column='qbdialer__CloseDate__c', custom=True, verbose_name='NeuralView: Close Score Last Updated', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    qbdialer_close_score = models.DecimalField(db_column='qbdialer__CloseScore__c', custom=True, max_digits=9, decimal_places=5, verbose_name='NeuralView: Close Score', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    qbdialer_dials = models.DecimalField(db_column='qbdialer__Dials__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Dials', sf_read_only=models.READ_ONLY, default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    qbdialer_last_call_time = models.DateTimeField(db_column='qbdialer__LastCallTime__c', custom=True, verbose_name='Last Call Time', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    qbdialer_related_contact_dials = models.DecimalField(db_column='qbdialer__Related_Contact_Dials__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Related Contact Dials', sf_read_only=models.READ_ONLY, default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    qbdialer_related_contact_last_call_time = models.DateTimeField(db_column='qbdialer__Related_Contact_LastCallTime__c', custom=True, verbose_name='Related Contact Last Call Time', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    qbdialer_response_time = models.DecimalField(db_column='qbdialer__ResponseTime__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Response Time', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    cascading_updates_new = models.CharField(custom=True, db_column='Cascading_Updates_New__c', max_length=255, verbose_name='Cascading Updates New', sf_read_only=models.READ_ONLY, blank=True, null=True)
    noof_files = models.DecimalField(custom=True, max_digits=5, decimal_places=0, verbose_name='NoofFiles', sf_read_only=models.READ_ONLY, default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    days_since_last_bfits_nb_case_closed = models.DecimalField(custom=True, db_column='Days_Since_Last_Bfits_NB_Case_Closed__c', max_digits=18, decimal_places=0, verbose_name='Days Since Last Bfits NB Case Closed', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_bfits_nb_case_closed = models.DateField(custom=True, db_column='Last_Bfits_NB_Case_Closed__c', verbose_name='Last Bfits NB Case Closed', sf_read_only=models.READ_ONLY, blank=True, null=True)
    small_group_product_types = models.CharField(custom=True, db_column='Small_Group_Product_Types__c', max_length=4099, verbose_name='Small Group Product Types', sf_read_only=models.READ_ONLY, choices=[('Dental', 'Dental'), ('Disability', 'Disability'), ('Life', 'Life'), ('Medical', 'Medical'), ('Other', 'Other'), ('Vision', 'Vision')], blank=True, null=True)
    large_group_product_types = models.CharField(custom=True, db_column='Large_Group_Product_Types__c', max_length=4099, verbose_name='Large Group Product Types', sf_read_only=models.READ_ONLY, choices=[('Dental', 'Dental'), ('Disability', 'Disability'), ('Life', 'Life'), ('Medical', 'Medical'), ('Other', 'Other'), ('Vision', 'Vision')], blank=True, null=True)
    individual_product_types = models.CharField(custom=True, db_column='Individual_Product_Types__c', max_length=4099, verbose_name='Individual Product Types', sf_read_only=models.READ_ONLY, choices=[('Dental', 'Dental'), ('Disability', 'Disability'), ('Life', 'Life'), ('Medical', 'Medical'), ('Other', 'Other'), ('Vision', 'Vision')], blank=True, null=True)
    senior_product_types = models.CharField(custom=True, db_column='Senior_Product_Types__c', max_length=4099, verbose_name='Senior Product Types', sf_read_only=models.READ_ONLY, choices=[('Annuities', 'Annuities'), ('Dental', 'Dental'), ('Final Expense', 'Final Expense'), ('First Diagnosis Cancer', 'First Diagnosis Cancer'), ('Hospital Indemnity', 'Hospital Indemnity'), ('LTC', 'LTC'), ('Medicare Advantage', 'Medicare Advantage'), ('Medicare Supplements', 'Medicare Supplements'), ('Prescription Drug Plan', 'Prescription Drug Plan'), ('Savings Card', 'Savings Card')], blank=True, null=True)
    additional_product_types = models.CharField(custom=True, db_column='Additional_Product_Types__c', max_length=4099, verbose_name='Additional Product Types', sf_read_only=models.READ_ONLY, choices=[('Discount', 'Discount'), ('EAP/Telehealth/Wellness', 'EAP/Telehealth/Wellness'), ('HSA/HRA', 'HSA/HRA'), ('International', 'International'), ('Misc.', 'Misc.'), ('Worksite', 'Worksite')], blank=True, null=True)
    stop_loss_product_types = models.CharField(custom=True, db_column='Stop_Loss_Product_Types__c', max_length=4099, verbose_name='Stop Loss Product Types', sf_read_only=models.READ_ONLY, choices=[('Aggregate Stop Loss', 'Aggregate Stop Loss'), ('Specific Stop Loss', 'Specific Stop Loss')], blank=True, null=True)
    small_group_online_quoting_states = models.CharField(custom=True, db_column='Small_Group_Online_Quoting_States__c', max_length=4099, verbose_name='Small Group Online Quoting States', sf_read_only=models.READ_ONLY, choices=[('AL', 'AL'), ('AK', 'AK'), ('AZ', 'AZ'), ('AR', 'AR'), ('CA', 'CA'), ('CO', 'CO'), ('CT', 'CT'), ('DE', 'DE'), ('DC', 'DC'), ('FL', 'FL'), ('GA', 'GA'), ('HI', 'HI'), ('ID', 'ID'), ('IL', 'IL'), ('IN', 'IN'), ('IA', 'IA'), ('KS', 'KS'), ('KY', 'KY'), ('LA', 'LA'), ('ME', 'ME'), ('MD', 'MD'), ('MA', 'MA'), ('MI', 'MI'), ('MN', 'MN'), ('MS', 'MS'), ('MO', 'MO'), ('MT', 'MT'), ('NE', 'NE'), ('NV', 'NV'), ('NH', 'NH'), ('NJ', 'NJ'), ('NM', 'NM'), ('NY', 'NY'), ('NC', 'NC'), ('ND', 'ND'), ('OH', 'OH'), ('OK', 'OK'), ('OR', 'OR'), ('PA', 'PA'), ('RI', 'RI'), ('SC', 'SC'), ('SD', 'SD'), ('TN', 'TN'), ('TX', 'TX'), ('UT', 'UT'), ('VT', 'VT'), ('VA', 'VA'), ('WA', 'WA'), ('WV', 'WV'), ('WI', 'WI'), ('WY', 'WY')], blank=True, null=True)
    large_group_online_quoting_states = models.CharField(custom=True, db_column='Large_Group_Online_Quoting_States__c', max_length=4099, verbose_name='Large Group Online Quoting States', sf_read_only=models.READ_ONLY, choices=[('AL', 'AL'), ('AK', 'AK'), ('AZ', 'AZ'), ('AR', 'AR'), ('CA', 'CA'), ('CO', 'CO'), ('CT', 'CT'), ('DE', 'DE'), ('DC', 'DC'), ('FL', 'FL'), ('GA', 'GA'), ('HI', 'HI'), ('ID', 'ID'), ('IL', 'IL'), ('IN', 'IN'), ('IA', 'IA'), ('KS', 'KS'), ('KY', 'KY'), ('LA', 'LA'), ('ME', 'ME'), ('MD', 'MD'), ('MA', 'MA'), ('MI', 'MI'), ('MN', 'MN'), ('MS', 'MS'), ('MO', 'MO'), ('MT', 'MT'), ('NE', 'NE'), ('NV', 'NV'), ('NH', 'NH'), ('NJ', 'NJ'), ('NM', 'NM'), ('NY', 'NY'), ('NC', 'NC'), ('ND', 'ND'), ('OH', 'OH'), ('OK', 'OK'), ('OR', 'OR'), ('PA', 'PA'), ('RI', 'RI'), ('SC', 'SC'), ('SD', 'SD'), ('TN', 'TN'), ('TX', 'TX'), ('UT', 'UT'), ('VT', 'VT'), ('VA', 'VA'), ('WA', 'WA'), ('WV', 'WV'), ('WI', 'WI'), ('WY', 'WY')], blank=True, null=True)
    individual_online_quoting_states = models.CharField(custom=True, db_column='Individual_Online_Quoting_States__c', max_length=4099, verbose_name='Individual Online Quoting States', sf_read_only=models.READ_ONLY, choices=[('AL', 'AL'), ('AK', 'AK'), ('AZ', 'AZ'), ('AR', 'AR'), ('CA', 'CA'), ('CO', 'CO'), ('CT', 'CT'), ('DE', 'DE'), ('DC', 'DC'), ('FL', 'FL'), ('GA', 'GA'), ('HI', 'HI'), ('ID', 'ID'), ('IL', 'IL'), ('IN', 'IN'), ('IA', 'IA'), ('KS', 'KS'), ('KY', 'KY'), ('LA', 'LA'), ('ME', 'ME'), ('MD', 'MD'), ('MA', 'MA'), ('MI', 'MI'), ('MN', 'MN'), ('MS', 'MS'), ('MO', 'MO'), ('MT', 'MT'), ('NE', 'NE'), ('NV', 'NV'), ('NH', 'NH'), ('NJ', 'NJ'), ('NM', 'NM'), ('NY', 'NY'), ('NC', 'NC'), ('ND', 'ND'), ('OH', 'OH'), ('OK', 'OK'), ('OR', 'OR'), ('PA', 'PA'), ('RI', 'RI'), ('SC', 'SC'), ('SD', 'SD'), ('TN', 'TN'), ('TX', 'TX'), ('UT', 'UT'), ('VT', 'VT'), ('VA', 'VA'), ('WA', 'WA'), ('WV', 'WV'), ('WI', 'WI'), ('WY', 'WY')], blank=True, null=True)
    stop_loss_online_quoting_states = models.CharField(custom=True, db_column='Stop_Loss_Online_Quoting_States__c', max_length=4099, verbose_name='Stop Loss Online Quoting States', sf_read_only=models.READ_ONLY, choices=[('AL', 'AL'), ('AK', 'AK'), ('AZ', 'AZ'), ('AR', 'AR'), ('CA', 'CA'), ('CO', 'CO'), ('CT', 'CT'), ('DE', 'DE'), ('DC', 'DC'), ('FL', 'FL'), ('GA', 'GA'), ('HI', 'HI'), ('ID', 'ID'), ('IL', 'IL'), ('IN', 'IN'), ('IA', 'IA'), ('KS', 'KS'), ('KY', 'KY'), ('LA', 'LA'), ('ME', 'ME'), ('MD', 'MD'), ('MA', 'MA'), ('MI', 'MI'), ('MN', 'MN'), ('MS', 'MS'), ('MO', 'MO'), ('MT', 'MT'), ('NE', 'NE'), ('NV', 'NV'), ('NH', 'NH'), ('NJ', 'NJ'), ('NM', 'NM'), ('NY', 'NY'), ('NC', 'NC'), ('ND', 'ND'), ('OH', 'OH'), ('OK', 'OK'), ('OR', 'OR'), ('PA', 'PA'), ('RI', 'RI'), ('SC', 'SC'), ('SD', 'SD'), ('TN', 'TN'), ('TX', 'TX'), ('UT', 'UT'), ('VT', 'VT'), ('VA', 'VA'), ('WA', 'WA'), ('WV', 'WV'), ('WI', 'WI'), ('WY', 'WY')], blank=True, null=True)
    additional_online_quoting_states = models.CharField(custom=True, db_column='Additional_Online_Quoting_States__c', max_length=4099, verbose_name='Additional Online Quoting States', sf_read_only=models.READ_ONLY, choices=[('AL', 'AL'), ('AK', 'AK'), ('AZ', 'AZ'), ('AR', 'AR'), ('CA', 'CA'), ('CO', 'CO'), ('CT', 'CT'), ('DE', 'DE'), ('DC', 'DC'), ('FL', 'FL'), ('GA', 'GA'), ('HI', 'HI'), ('ID', 'ID'), ('IL', 'IL'), ('IN', 'IN'), ('IA', 'IA'), ('KS', 'KS'), ('KY', 'KY'), ('LA', 'LA'), ('ME', 'ME'), ('MD', 'MD'), ('MA', 'MA'), ('MI', 'MI'), ('MN', 'MN'), ('MS', 'MS'), ('MO', 'MO'), ('MT', 'MT'), ('NE', 'NE'), ('NV', 'NV'), ('NH', 'NH'), ('NJ', 'NJ'), ('NM', 'NM'), ('NY', 'NY'), ('NC', 'NC'), ('ND', 'ND'), ('OH', 'OH'), ('OK', 'OK'), ('OR', 'OR'), ('PA', 'PA'), ('RI', 'RI'), ('SC', 'SC'), ('SD', 'SD'), ('TN', 'TN'), ('TX', 'TX'), ('UT', 'UT'), ('VT', 'VT'), ('VA', 'VA'), ('WA', 'WA'), ('WV', 'WV'), ('WI', 'WI'), ('WY', 'WY')], blank=True, null=True)
    senior_online_quoting_states = models.CharField(custom=True, db_column='Senior_Online_Quoting_States__c', max_length=4099, verbose_name='Senior Online Quoting States', sf_read_only=models.READ_ONLY, choices=[('AL', 'AL'), ('AK', 'AK'), ('AZ', 'AZ'), ('AR', 'AR'), ('CA', 'CA'), ('CO', 'CO'), ('CT', 'CT'), ('DE', 'DE'), ('DC', 'DC'), ('FL', 'FL'), ('GA', 'GA'), ('HI', 'HI'), ('ID', 'ID'), ('IL', 'IL'), ('IN', 'IN'), ('IA', 'IA'), ('KS', 'KS'), ('KY', 'KY'), ('LA', 'LA'), ('ME', 'ME'), ('MD', 'MD'), ('MA', 'MA'), ('MI', 'MI'), ('MN', 'MN'), ('MS', 'MS'), ('MO', 'MO'), ('MT', 'MT'), ('NE', 'NE'), ('NV', 'NV'), ('NH', 'NH'), ('NJ', 'NJ'), ('NM', 'NM'), ('NY', 'NY'), ('NC', 'NC'), ('ND', 'ND'), ('OH', 'OH'), ('OK', 'OK'), ('OR', 'OR'), ('PA', 'PA'), ('RI', 'RI'), ('SC', 'SC'), ('SD', 'SD'), ('TN', 'TN'), ('TX', 'TX'), ('UT', 'UT'), ('VT', 'VT'), ('VA', 'VA'), ('WA', 'WA'), ('WV', 'WV'), ('WI', 'WI'), ('WY', 'WY')], blank=True, null=True)
    small_group_product_states = models.CharField(custom=True, db_column='Small_Group_Product_States__c', max_length=4099, verbose_name='Small Group Product States', sf_read_only=models.READ_ONLY, choices=[('AL', 'AL'), ('AK', 'AK'), ('AZ', 'AZ'), ('AR', 'AR'), ('CA', 'CA'), ('CO', 'CO'), ('CT', 'CT'), ('DE', 'DE'), ('DC', 'DC'), ('FL', 'FL'), ('GA', 'GA'), ('HI', 'HI'), ('ID', 'ID'), ('IL', 'IL'), ('IN', 'IN'), ('IA', 'IA'), ('KS', 'KS'), ('KY', 'KY'), ('LA', 'LA'), ('ME', 'ME'), ('MD', 'MD'), ('MA', 'MA'), ('MI', 'MI'), ('MN', 'MN'), ('MS', 'MS'), ('MO', 'MO'), ('MT', 'MT'), ('NE', 'NE'), ('NV', 'NV'), ('NH', 'NH'), ('NJ', 'NJ'), ('NM', 'NM'), ('NY', 'NY'), ('NC', 'NC'), ('ND', 'ND'), ('OH', 'OH'), ('OK', 'OK'), ('OR', 'OR'), ('PA', 'PA'), ('RI', 'RI'), ('SC', 'SC'), ('SD', 'SD'), ('TN', 'TN'), ('TX', 'TX'), ('UT', 'UT'), ('VT', 'VT'), ('VA', 'VA'), ('WA', 'WA'), ('WV', 'WV'), ('WI', 'WI'), ('WY', 'WY')], blank=True, null=True)
    large_group_product_states = models.CharField(custom=True, db_column='Large_Group_Product_States__c', max_length=4099, verbose_name='Large Group Product States', sf_read_only=models.READ_ONLY, choices=[('AL', 'AL'), ('AK', 'AK'), ('AZ', 'AZ'), ('AR', 'AR'), ('CA', 'CA'), ('CO', 'CO'), ('CT', 'CT'), ('DE', 'DE'), ('DC', 'DC'), ('FL', 'FL'), ('GA', 'GA'), ('HI', 'HI'), ('ID', 'ID'), ('IL', 'IL'), ('IN', 'IN'), ('IA', 'IA'), ('KS', 'KS'), ('KY', 'KY'), ('LA', 'LA'), ('ME', 'ME'), ('MD', 'MD'), ('MA', 'MA'), ('MI', 'MI'), ('MN', 'MN'), ('MS', 'MS'), ('MO', 'MO'), ('MT', 'MT'), ('NE', 'NE'), ('NV', 'NV'), ('NH', 'NH'), ('NJ', 'NJ'), ('NM', 'NM'), ('NY', 'NY'), ('NC', 'NC'), ('ND', 'ND'), ('OH', 'OH'), ('OK', 'OK'), ('OR', 'OR'), ('PA', 'PA'), ('RI', 'RI'), ('SC', 'SC'), ('SD', 'SD'), ('TN', 'TN'), ('TX', 'TX'), ('UT', 'UT'), ('VT', 'VT'), ('VA', 'VA'), ('WA', 'WA'), ('WV', 'WV'), ('WI', 'WI'), ('WY', 'WY')], blank=True, null=True)
    senior_product_states = models.CharField(custom=True, db_column='Senior_Product_States__c', max_length=4099, verbose_name='Senior Product States', sf_read_only=models.READ_ONLY, choices=[('AL', 'AL'), ('AK', 'AK'), ('AZ', 'AZ'), ('AR', 'AR'), ('CA', 'CA'), ('CO', 'CO'), ('CT', 'CT'), ('DE', 'DE'), ('DC', 'DC'), ('FL', 'FL'), ('GA', 'GA'), ('HI', 'HI'), ('ID', 'ID'), ('IL', 'IL'), ('IN', 'IN'), ('IA', 'IA'), ('KS', 'KS'), ('KY', 'KY'), ('LA', 'LA'), ('ME', 'ME'), ('MD', 'MD'), ('MA', 'MA'), ('MI', 'MI'), ('MN', 'MN'), ('MS', 'MS'), ('MO', 'MO'), ('MT', 'MT'), ('NE', 'NE'), ('NV', 'NV'), ('NH', 'NH'), ('NJ', 'NJ'), ('NM', 'NM'), ('NY', 'NY'), ('NC', 'NC'), ('ND', 'ND'), ('OH', 'OH'), ('OK', 'OK'), ('OR', 'OR'), ('PA', 'PA'), ('RI', 'RI'), ('SC', 'SC'), ('SD', 'SD'), ('TN', 'TN'), ('TX', 'TX'), ('UT', 'UT'), ('VT', 'VT'), ('VA', 'VA'), ('WA', 'WA'), ('WV', 'WV'), ('WI', 'WI'), ('WY', 'WY')], blank=True, null=True)
    additional_product_states = models.CharField(custom=True, db_column='Additional_Product_States__c', max_length=4099, verbose_name='Additional Product States', sf_read_only=models.READ_ONLY, choices=[('AL', 'AL'), ('AK', 'AK'), ('AZ', 'AZ'), ('AR', 'AR'), ('CA', 'CA'), ('CO', 'CO'), ('CT', 'CT'), ('DE', 'DE'), ('DC', 'DC'), ('FL', 'FL'), ('GA', 'GA'), ('HI', 'HI'), ('ID', 'ID'), ('IL', 'IL'), ('IN', 'IN'), ('IA', 'IA'), ('KS', 'KS'), ('KY', 'KY'), ('LA', 'LA'), ('ME', 'ME'), ('MD', 'MD'), ('MA', 'MA'), ('MI', 'MI'), ('MN', 'MN'), ('MS', 'MS'), ('MO', 'MO'), ('MT', 'MT'), ('NE', 'NE'), ('NV', 'NV'), ('NH', 'NH'), ('NJ', 'NJ'), ('NM', 'NM'), ('NY', 'NY'), ('NC', 'NC'), ('ND', 'ND'), ('OH', 'OH'), ('OK', 'OK'), ('OR', 'OR'), ('PA', 'PA'), ('RI', 'RI'), ('SC', 'SC'), ('SD', 'SD'), ('TN', 'TN'), ('TX', 'TX'), ('UT', 'UT'), ('VT', 'VT'), ('VA', 'VA'), ('WA', 'WA'), ('WV', 'WV'), ('WI', 'WI'), ('WY', 'WY')], blank=True, null=True)
    individual_product_states = models.CharField(custom=True, db_column='Individual_Product_States__c', max_length=4099, verbose_name='Individual Product States', sf_read_only=models.READ_ONLY, choices=[('AL', 'AL'), ('AK', 'AK'), ('AZ', 'AZ'), ('AR', 'AR'), ('CA', 'CA'), ('CO', 'CO'), ('CT', 'CT'), ('DE', 'DE'), ('DC', 'DC'), ('FL', 'FL'), ('GA', 'GA'), ('HI', 'HI'), ('ID', 'ID'), ('IL', 'IL'), ('IN', 'IN'), ('IA', 'IA'), ('KS', 'KS'), ('KY', 'KY'), ('LA', 'LA'), ('ME', 'ME'), ('MD', 'MD'), ('MA', 'MA'), ('MI', 'MI'), ('MN', 'MN'), ('MS', 'MS'), ('MO', 'MO'), ('MT', 'MT'), ('NE', 'NE'), ('NV', 'NV'), ('NH', 'NH'), ('NJ', 'NJ'), ('NM', 'NM'), ('NY', 'NY'), ('NC', 'NC'), ('ND', 'ND'), ('OH', 'OH'), ('OK', 'OK'), ('OR', 'OR'), ('PA', 'PA'), ('RI', 'RI'), ('SC', 'SC'), ('SD', 'SD'), ('TN', 'TN'), ('TX', 'TX'), ('UT', 'UT'), ('VT', 'VT'), ('VA', 'VA'), ('WA', 'WA'), ('WV', 'WV'), ('WI', 'WI'), ('WY', 'WY')], blank=True, null=True)
    stop_loss_product_states = models.CharField(custom=True, db_column='Stop_Loss_Product_States__c', max_length=4099, verbose_name='Stop Loss Product States', sf_read_only=models.READ_ONLY, choices=[('AL', 'AL'), ('AK', 'AK'), ('AZ', 'AZ'), ('AR', 'AR'), ('CA', 'CA'), ('CO', 'CO'), ('CT', 'CT'), ('DE', 'DE'), ('DC', 'DC'), ('FL', 'FL'), ('GA', 'GA'), ('HI', 'HI'), ('ID', 'ID'), ('IL', 'IL'), ('IN', 'IN'), ('IA', 'IA'), ('KS', 'KS'), ('KY', 'KY'), ('LA', 'LA'), ('ME', 'ME'), ('MD', 'MD'), ('MA', 'MA'), ('MI', 'MI'), ('MN', 'MN'), ('MS', 'MS'), ('MO', 'MO'), ('MT', 'MT'), ('NE', 'NE'), ('NV', 'NV'), ('NH', 'NH'), ('NJ', 'NJ'), ('NM', 'NM'), ('NY', 'NY'), ('NC', 'NC'), ('ND', 'ND'), ('OH', 'OH'), ('OK', 'OK'), ('OR', 'OR'), ('PA', 'PA'), ('RI', 'RI'), ('SC', 'SC'), ('SD', 'SD'), ('TN', 'TN'), ('TX', 'TX'), ('UT', 'UT'), ('VT', 'VT'), ('VA', 'VA'), ('WA', 'WA'), ('WV', 'WV'), ('WI', 'WI'), ('WY', 'WY')], blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Account'
        verbose_name = 'Account'
        verbose_name_plural = 'Accounts'
        # keyPrefix = '001'


class BusinessProcess(models.Model):
    name = models.CharField(max_length=80, sf_read_only=models.READ_ONLY)
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    description = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    table_enum_or_id = models.CharField(max_length=40, verbose_name='Entity Enumeration Or ID', sf_read_only=models.READ_ONLY, choices=[('Case', None), ('Lead', None), ('Opportunity', None), ('Solution', None)])
    is_active = models.BooleanField(verbose_name='Active', sf_read_only=models.READ_ONLY, default=models.DefaultedOnCreate(False))
    created_by = models.ForeignKey('salesforce.User', models.DO_NOTHING, related_name='businessprocess_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY, default=models.DEFAULTED_ON_CREATE)
    last_modified_by = models.ForeignKey('salesforce.User', models.DO_NOTHING, related_name='businessprocess_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY, default=models.DEFAULTED_ON_CREATE)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, default=models.DEFAULTED_ON_CREATE)
    class Meta(models.Model.Meta):
        db_table = 'BusinessProcess'
        verbose_name = 'Business Process'
        verbose_name_plural = 'Business Process'
        # keyPrefix = '019'


class CallCenter(models.Model):
    name = models.CharField(max_length=255, sf_read_only=models.READ_ONLY)
    internal_name = models.CharField(max_length=240, sf_read_only=models.READ_ONLY)
    version = models.DecimalField(max_digits=18, decimal_places=3, sf_read_only=models.READ_ONLY, blank=True, null=True)
    adapter_url = models.CharField(max_length=2000, verbose_name='CTI Adapter URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    custom_settings = models.CharField(max_length=3000, sf_read_only=models.READ_ONLY, blank=True, null=True)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, default=models.DEFAULTED_ON_CREATE)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY, default=models.DEFAULTED_ON_CREATE)
    created_by = models.ForeignKey('salesforce.User', models.DO_NOTHING, related_name='callcenter_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY, default=models.DEFAULTED_ON_CREATE)
    last_modified_by = models.ForeignKey('salesforce.User', models.DO_NOTHING, related_name='callcenter_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'CallCenter'
        verbose_name = 'Call Center'
        verbose_name_plural = 'Call Centers'
        # keyPrefix = '04v'


class Group(models.Model):
    name = models.CharField(max_length=40, sf_read_only=models.READ_ONLY)
    developer_name = models.CharField(max_length=80, sf_read_only=models.READ_ONLY, blank=True, null=True)
    related = models.ForeignKey('salesforce.User', models.DO_NOTHING, related_name='group_related_set', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [User, UserRole]
    type = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('AllCustomerPortal', None), ('ChannelProgramGroup', None), ('CollaborationGroup', None), ('Manager', None), ('ManagerAndSubordinatesInternal', None), ('Organization', None), ('PRMOrganization', None), ('Queue', None), ('Regular', None), ('Role', None), ('RoleAndSubordinates', None), ('RoleAndSubordinatesInternal', None), ('Territory', None), ('TerritoryAndSubordinates', None)])
    email = models.EmailField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    queue_routing_config = models.ForeignKey('QueueRoutingConfig', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    owner = models.ForeignKey('Organization', models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Reference to tables [Organization, User]
    does_send_email_to_members = models.BooleanField(verbose_name='Send Email to Members', sf_read_only=models.READ_ONLY, default=models.DefaultedOnCreate(False))
    does_include_bosses = models.BooleanField(verbose_name='Include Bosses', sf_read_only=models.READ_ONLY, default=models.DefaultedOnCreate(False))
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY, default=models.DEFAULTED_ON_CREATE)
    created_by = models.ForeignKey('salesforce.User', models.DO_NOTHING, related_name='group_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY, default=models.DEFAULTED_ON_CREATE)
    last_modified_by = models.ForeignKey('salesforce.User', models.DO_NOTHING, related_name='group_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, default=models.DEFAULTED_ON_CREATE)
    class Meta(models.Model.Meta):
        db_table = 'Group'
        verbose_name = 'Group'
        verbose_name_plural = 'Group'
        # keyPrefix = '00G'




class Organization(models.Model):
    name = models.CharField(max_length=80, sf_read_only=models.READ_ONLY)
    division = models.CharField(max_length=80, sf_read_only=models.READ_ONLY, blank=True, null=True)
    street = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    city = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    state = models.CharField(max_length=80, verbose_name='State/Province', sf_read_only=models.READ_ONLY, blank=True, null=True)
    postal_code = models.CharField(max_length=20, verbose_name='Zip/Postal Code', sf_read_only=models.READ_ONLY, blank=True, null=True)
    country = models.CharField(max_length=80, sf_read_only=models.READ_ONLY, blank=True, null=True)
    state_code = models.CharField(max_length=10, verbose_name='State/Province Code', sf_read_only=models.READ_ONLY, choices=[('AL', 'Alabama'), ('AK', 'Alaska'), ('AB', 'Alberta'), ('AZ', 'Arizona'), ('AR', 'Arkansas'), ('BC', 'British Columbia'), ('CA', 'California'), ('CO', 'Colorado'), ('CT', 'Connecticut'), ('DE', 'Delaware'), ('DC', 'District of Columbia'), ('FL', 'Florida'), ('GA', 'Georgia'), ('GU', 'Guam'), ('HI', 'Hawaii'), ('ID', 'Idaho'), ('IL', 'Illinois'), ('IN', 'Indiana'), ('IA', 'Iowa'), ('KS', 'Kansas'), ('KY', 'Kentucky'), ('LA', 'Louisiana'), ('ME', 'Maine'), ('MB', 'Manitoba'), ('MD', 'Maryland'), ('MA', 'Massachusetts'), ('MI', 'Michigan'), ('MN', 'Minnesota'), ('MS', 'Mississippi'), ('MO', 'Missouri'), ('MT', 'Montana'), ('NE', 'Nebraska'), ('NV', 'Nevada'), ('NB', 'New Brunswick'), ('NL', 'Newfoundland and Labrador'), ('NH', 'New Hampshire'), ('NJ', 'New Jersey'), ('NM', 'New Mexico'), ('NY', 'New York'), ('NC', 'North Carolina'), ('ND', 'North Dakota'), ('NT', 'Northwest Territories'), ('NS', 'Nova Scotia'), ('NU', 'Nunavut'), ('OH', 'Ohio'), ('OK', 'Oklahoma'), ('ON', 'Ontario'), ('OR', 'Oregon'), ('PA', 'Pennsylvania'), ('PE', 'Prince Edward Island'), ('PR', 'Puerto Rico'), ('QC', 'Quebec'), ('RI', 'Rhode Island'), ('SK', 'Saskatchewan'), ('SC', 'South Carolina'), ('SD', 'South Dakota'), ('TN', 'Tennessee'), ('TX', 'Texas'), ('VI', 'US Virgin Islands'), ('UT', 'Utah'), ('VT', 'Vermont'), ('VA', 'Virginia'), ('WA', 'Washington'), ('WV', 'West Virginia'), ('WI', 'Wisconsin'), ('WY', 'Wyoming'), ('YT', 'Yukon Territories')], blank=True, null=True)
    country_code = models.CharField(max_length=10, sf_read_only=models.READ_ONLY, default=models.DefaultedOnCreate('US'), choices=[('CA', 'Canada'), ('US', 'United States')], blank=True, null=True)
    latitude = models.DecimalField(max_digits=18, decimal_places=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    longitude = models.DecimalField(max_digits=18, decimal_places=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    geocode_accuracy = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Address', 'Address'), ('NearAddress', 'NearAddress'), ('Block', 'Block'), ('Street', 'Street'), ('ExtendedZip', 'ExtendedZip'), ('Zip', 'Zip'), ('Neighborhood', 'Neighborhood'), ('City', 'City'), ('County', 'County'), ('State', 'State'), ('Unknown', 'Unknown')], blank=True, null=True)
    address = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)  # This field type is a guess.
    phone = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    fax = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    primary_contact = models.CharField(max_length=80, sf_read_only=models.READ_ONLY, blank=True, null=True)
    default_locale_sid_key = models.CharField(max_length=40, verbose_name='Locale', sf_read_only=models.READ_ONLY, choices=[('af_ZA', 'Afrikaans (South Africa)'), ('sq_AL', 'Albanian (Albania)'), ('ar_DZ', 'Arabic (Algeria)'), ('ar_BH', 'Arabic (Bahrain)'), ('ar_EG', 'Arabic (Egypt)'), ('ar_IQ', 'Arabic (Iraq)'), ('ar_JO', 'Arabic (Jordan)'), ('ar_KW', 'Arabic (Kuwait)'), ('ar_LB', 'Arabic (Lebanon)'), ('ar_LY', 'Arabic (Libya)'), ('ar_MA', 'Arabic (Morocco)'), ('ar_OM', 'Arabic (Oman)'), ('ar_QA', 'Arabic (Qatar)'), ('ar_SA', 'Arabic (Saudi Arabia)'), ('ar_SD', 'Arabic (Sudan)'), ('ar_SY', 'Arabic (Syria)'), ('ar_TN', 'Arabic (Tunisia)'), ('ar_AE', 'Arabic (United Arab Emirates)'), ('ar_YE', 'Arabic (Yemen)'), ('hy_AM', 'Armenian (Armenia)'), ('az_AZ', 'Azerbaijani (Azerbaijan)'), ('bn_BD', 'Bangla (Bangladesh)'), ('bn_IN', 'Bangla (India)'), ('eu_ES', 'Basque (Spain)'), ('be_BY', 'Belarusian (Belarus)'), ('bs_BA', 'Bosnian (Bosnia & Herzegovina)'), ('bg_BG', 'Bulgarian (Bulgaria)'), ('my_MM', 'Burmese (Myanmar (Burma))'), ('ca_ES', 'Catalan (Spain)'), ('zh_CN_PINYIN', 'Chinese (China, Pinyin Ordering)'), ('zh_CN_STROKE', 'Chinese (China, Stroke Ordering)'), ('zh_CN', 'Chinese (China)'), ('zh_HK_STROKE', 'Chinese (Hong Kong SAR China, Stroke Ordering)'), ('zh_HK', 'Chinese (Hong Kong SAR China)'), ('zh_MO', 'Chinese (Macao SAR China)'), ('zh_SG', 'Chinese (Singapore)'), ('zh_TW_STROKE', 'Chinese (Taiwan, Stroke Ordering)'), ('zh_TW', 'Chinese (Taiwan)'), ('hr_HR', 'Croatian (Croatia)'), ('cs_CZ', 'Czech (Czechia)'), ('da_DK', 'Danish (Denmark)'), ('nl_AW', 'Dutch (Aruba)'), ('nl_BE', 'Dutch (Belgium)'), ('nl_NL', 'Dutch (Netherlands)'), ('nl_SR', 'Dutch (Suriname)'), ('dz_BT', 'Dzongkha (Bhutan)'), ('en_AG', 'English (Antigua & Barbuda)'), ('en_AU', 'English (Australia)'), ('en_BS', 'English (Bahamas)'), ('en_BB', 'English (Barbados)'), ('en_BZ', 'English (Belize)'), ('en_BM', 'English (Bermuda)'), ('en_BW', 'English (Botswana)'), ('en_CM', 'English (Cameroon)'), ('en_CA', 'English (Canada)'), ('en_KY', 'English (Cayman Islands)'), ('en_ER', 'English (Eritrea)'), ('en_SZ', 'English (Eswatini)'), ('en_FK', 'English (Falkland Islands)'), ('en_FJ', 'English (Fiji)'), ('en_GM', 'English (Gambia)'), ('en_GH', 'English (Ghana)'), ('en_GI', 'English (Gibraltar)'), ('en_GY', 'English (Guyana)'), ('en_HK', 'English (Hong Kong SAR China)'), ('en_IN', 'English (India)'), ('en_ID', 'English (Indonesia)'), ('en_IE', 'English (Ireland)'), ('en_JM', 'English (Jamaica)'), ('en_KE', 'English (Kenya)'), ('en_LR', 'English (Liberia)'), ('en_MG', 'English (Madagascar)'), ('en_MW', 'English (Malawi)'), ('en_MY', 'English (Malaysia)'), ('en_MU', 'English (Mauritius)'), ('en_NA', 'English (Namibia)'), ('en_NZ', 'English (New Zealand)'), ('en_NG', 'English (Nigeria)'), ('en_PK', 'English (Pakistan)'), ('en_PG', 'English (Papua New Guinea)'), ('en_PH', 'English (Philippines)'), ('en_RW', 'English (Rwanda)'), ('en_WS', 'English (Samoa)'), ('en_SC', 'English (Seychelles)'), ('en_SL', 'English (Sierra Leone)'), ('en_SG', 'English (Singapore)'), ('en_SX', 'English (Sint Maarten)'), ('en_SB', 'English (Solomon Islands)'), ('en_ZA', 'English (South Africa)'), ('en_SH', 'English (St. Helena)'), ('en_TZ', 'English (Tanzania)'), ('en_TO', 'English (Tonga)'), ('en_TT', 'English (Trinidad & Tobago)'), ('en_UG', 'English (Uganda)'), ('en_GB', 'English (United Kingdom)'), ('en_US', 'English (United States)'), ('en_VU', 'English (Vanuatu)'), ('et_EE', 'Estonian (Estonia)'), ('fi_FI', 'Finnish (Finland)'), ('fr_BE', 'French (Belgium)'), ('fr_CA', 'French (Canada)'), ('fr_KM', 'French (Comoros)'), ('fr_FR', 'French (France)'), ('fr_GN', 'French (Guinea)'), ('fr_HT', 'French (Haiti)'), ('fr_LU', 'French (Luxembourg)'), ('fr_MR', 'French (Mauritania)'), ('fr_MC', 'French (Monaco)'), ('fr_CH', 'French (Switzerland)'), ('fr_WF', 'French (Wallis & Futuna)'), ('ka_GE', 'Georgian (Georgia)'), ('de_AT', 'German (Austria)'), ('de_BE', 'German (Belgium)'), ('de_DE', 'German (Germany)'), ('de_LU', 'German (Luxembourg)'), ('de_CH', 'German (Switzerland)'), ('el_GR', 'Greek (Greece)'), ('gu_IN', 'Gujarati (India)'), ('iw_IL', 'Hebrew (Israel)'), ('hi_IN', 'Hindi (India)'), ('hu_HU', 'Hungarian (Hungary)'), ('is_IS', 'Icelandic (Iceland)'), ('in_ID', 'Indonesian (Indonesia)'), ('ga_IE', 'Irish (Ireland)'), ('it_IT', 'Italian (Italy)'), ('it_CH', 'Italian (Switzerland)'), ('ja_JP', 'Japanese (Japan)'), ('kn_IN', 'Kannada (India)'), ('kk_KZ', 'Kazakh (Kazakhstan)'), ('km_KH', 'Khmer (Cambodia)'), ('ko_KP', 'Korean (North Korea)'), ('ko_KR', 'Korean (South Korea)'), ('ky_KG', 'Kyrgyz (Kyrgyzstan)'), ('lo_LA', 'Lao (Laos)'), ('lv_LV', 'Latvian (Latvia)'), ('lt_LT', 'Lithuanian (Lithuania)'), ('lu_CD', 'Luba-Katanga (Congo - Kinshasa)'), ('lb_LU', 'Luxembourgish (Luxembourg)'), ('mk_MK', 'Macedonian (North Macedonia)'), ('ms_BN', 'Malay (Brunei)'), ('ms_MY', 'Malay (Malaysia)'), ('ml_IN', 'Malayalam (India)'), ('mt_MT', 'Maltese (Malta)'), ('mi_NZ', 'Maori (New Zealand)'), ('mr_IN', 'Marathi (India)'), ('sh_ME_USD', 'Montenegrin (Montenegro, USD)'), ('sh_ME', 'Montenegrin (Montenegro)'), ('ne_NP', 'Nepali (Nepal)'), ('no_NO', 'Norwegian (Norway)'), ('ps_AF', 'Pashto (Afghanistan)'), ('fa_IR', 'Persian (Iran)'), ('pl_PL', 'Polish (Poland)'), ('pt_AO', 'Portuguese (Angola)'), ('pt_BR', 'Portuguese (Brazil)'), ('pt_CV', 'Portuguese (Cape Verde)'), ('pt_MZ', 'Portuguese (Mozambique)'), ('pt_PT', 'Portuguese (Portugal)'), ('pt_ST', 'Portuguese (São Tomé & Príncipe)'), ('ro_MD', 'Romanian (Moldova)'), ('ro_RO', 'Romanian (Romania)'), ('rm_CH', 'Romansh (Switzerland)'), ('rn_BI', 'Rundi (Burundi)'), ('ru_KZ', 'Russian (Kazakhstan)'), ('ru_RU', 'Russian (Russia)'), ('sr_BA', 'Serbian (Cyrillic) (Bosnia and Herzegovina)'), ('sr_CS', 'Serbian (Cyrillic) (Serbia)'), ('sh_BA', 'Serbian (Latin) (Bosnia and Herzegovina)'), ('sh_CS', 'Serbian (Latin) (Serbia)'), ('sr_RS', 'Serbian (Serbia)'), ('sk_SK', 'Slovak (Slovakia)'), ('sl_SI', 'Slovenian (Slovenia)'), ('so_DJ', 'Somali (Djibouti)'), ('so_SO', 'Somali (Somalia)'), ('es_AR', 'Spanish (Argentina)'), ('es_BO', 'Spanish (Bolivia)'), ('es_CL', 'Spanish (Chile)'), ('es_CO', 'Spanish (Colombia)'), ('es_CR', 'Spanish (Costa Rica)'), ('es_CU', 'Spanish (Cuba)'), ('es_DO', 'Spanish (Dominican Republic)'), ('es_EC', 'Spanish (Ecuador)'), ('es_SV', 'Spanish (El Salvador)'), ('es_GT', 'Spanish (Guatemala)'), ('es_HN', 'Spanish (Honduras)'), ('es_MX', 'Spanish (Mexico)'), ('es_NI', 'Spanish (Nicaragua)'), ('es_PA', 'Spanish (Panama)'), ('es_PY', 'Spanish (Paraguay)'), ('es_PE', 'Spanish (Peru)'), ('es_PR', 'Spanish (Puerto Rico)'), ('es_ES', 'Spanish (Spain)'), ('es_US', 'Spanish (United States)'), ('es_UY', 'Spanish (Uruguay)'), ('es_VE', 'Spanish (Venezuela)'), ('sw_KE', 'Swahili (Kenya)'), ('sv_SE', 'Swedish (Sweden)'), ('tl_PH', 'Tagalog (Philippines)'), ('tg_TJ', 'Tajik (Tajikistan)'), ('ta_IN', 'Tamil (India)'), ('ta_LK', 'Tamil (Sri Lanka)'), ('te_IN', 'Telugu (India)'), ('th_TH', 'Thai (Thailand)'), ('ti_ET', 'Tigrinya (Ethiopia)'), ('tr_TR', 'Turkish (Turkey)'), ('uk_UA', 'Ukrainian (Ukraine)'), ('ur_PK', 'Urdu (Pakistan)'), ('uz_LATN_UZ', 'Uzbek (LATN,UZ)'), ('vi_VN', 'Vietnamese (Vietnam)'), ('cy_GB', 'Welsh (United Kingdom)'), ('xh_ZA', 'Xhosa (South Africa)'), ('yo_BJ', 'Yoruba (Benin)'), ('zu_ZA', 'Zulu (South Africa)')])
    time_zone_sid_key = models.CharField(max_length=40, verbose_name='Time Zone', sf_read_only=models.READ_ONLY, choices=[('Pacific/Kiritimati', '(GMT+14:00) Line Islands Time (Pacific/Kiritimati)'), ('Pacific/Chatham', '(GMT+13:45) Chatham Daylight Time (Pacific/Chatham)'), ('Pacific/Auckland', '(GMT+13:00) New Zealand Daylight Time (Pacific/Auckland)'), ('Pacific/Enderbury', '(GMT+13:00) Phoenix Islands Time (Pacific/Enderbury)'), ('Pacific/Tongatapu', '(GMT+13:00) Tonga Standard Time (Pacific/Tongatapu)'), ('Asia/Kamchatka', '(GMT+12:00) Petropavlovsk-Kamchatski Standard Time (Asia/Kamchatka)'), ('Pacific/Fiji', '(GMT+12:00) Fiji Standard Time (Pacific/Fiji)'), ('Pacific/Norfolk', '(GMT+12:00) Norfolk Island Time (Pacific/Norfolk)'), ('Australia/Lord_Howe', '(GMT+11:00) Lord Howe Daylight Time (Australia/Lord_Howe)'), ('Australia/Sydney', '(GMT+11:00) Australian Eastern Daylight Time (Australia/Sydney)'), ('Pacific/Guadalcanal', '(GMT+11:00) Solomon Islands Time (Pacific/Guadalcanal)'), ('Australia/Adelaide', '(GMT+10:30) Australian Central Daylight Time (Australia/Adelaide)'), ('Australia/Brisbane', '(GMT+10:00) Australian Eastern Standard Time (Australia/Brisbane)'), ('Australia/Darwin', '(GMT+09:30) Australian Central Standard Time (Australia/Darwin)'), ('Asia/Seoul', '(GMT+09:00) Korean Standard Time (Asia/Seoul)'), ('Asia/Tokyo', '(GMT+09:00) Japan Standard Time (Asia/Tokyo)'), ('Asia/Hong_Kong', '(GMT+08:00) Hong Kong Standard Time (Asia/Hong_Kong)'), ('Asia/Kuala_Lumpur', '(GMT+08:00) Malaysia Time (Asia/Kuala_Lumpur)'), ('Asia/Manila', '(GMT+08:00) Philippine Standard Time (Asia/Manila)'), ('Asia/Shanghai', '(GMT+08:00) China Standard Time (Asia/Shanghai)'), ('Asia/Singapore', '(GMT+08:00) Singapore Standard Time (Asia/Singapore)'), ('Asia/Taipei', '(GMT+08:00) Taipei Standard Time (Asia/Taipei)'), ('Australia/Perth', '(GMT+08:00) Australian Western Standard Time (Australia/Perth)'), ('Asia/Bangkok', '(GMT+07:00) Indochina Time (Asia/Bangkok)'), ('Asia/Ho_Chi_Minh', '(GMT+07:00) Indochina Time (Asia/Ho_Chi_Minh)'), ('Asia/Jakarta', '(GMT+07:00) Western Indonesia Time (Asia/Jakarta)'), ('Asia/Rangoon', '(GMT+06:30) Myanmar Time (Asia/Rangoon)'), ('Asia/Dhaka', '(GMT+06:00) Bangladesh Standard Time (Asia/Dhaka)'), ('Asia/Kathmandu', '(GMT+05:45) Nepal Time (Asia/Kathmandu)'), ('Asia/Colombo', '(GMT+05:30) India Standard Time (Asia/Colombo)'), ('Asia/Kolkata', '(GMT+05:30) India Standard Time (Asia/Kolkata)'), ('Asia/Karachi', '(GMT+05:00) Pakistan Standard Time (Asia/Karachi)'), ('Asia/Tashkent', '(GMT+05:00) Uzbekistan Standard Time (Asia/Tashkent)'), ('Asia/Yekaterinburg', '(GMT+05:00) Yekaterinburg Standard Time (Asia/Yekaterinburg)'), ('Asia/Kabul', '(GMT+04:30) Afghanistan Time (Asia/Kabul)'), ('Asia/Tehran', '(GMT+04:30) Iran Daylight Time (Asia/Tehran)'), ('Asia/Baku', '(GMT+04:00) Azerbaijan Standard Time (Asia/Baku)'), ('Asia/Dubai', '(GMT+04:00) Gulf Standard Time (Asia/Dubai)'), ('Asia/Tbilisi', '(GMT+04:00) Georgia Standard Time (Asia/Tbilisi)'), ('Asia/Yerevan', '(GMT+04:00) Armenia Standard Time (Asia/Yerevan)'), ('Africa/Nairobi', '(GMT+03:00) East Africa Time (Africa/Nairobi)'), ('Asia/Baghdad', '(GMT+03:00) Arabian Standard Time (Asia/Baghdad)'), ('Asia/Kuwait', '(GMT+03:00) Arabian Standard Time (Asia/Kuwait)'), ('Asia/Riyadh', '(GMT+03:00) Arabian Standard Time (Asia/Riyadh)'), ('Europe/Istanbul', '(GMT+03:00) Europe/Istanbul'), ('Europe/Minsk', '(GMT+03:00) Moscow Standard Time (Europe/Minsk)'), ('Europe/Moscow', '(GMT+03:00) Moscow Standard Time (Europe/Moscow)'), ('Africa/Cairo', '(GMT+02:00) Eastern European Standard Time (Africa/Cairo)'), ('Africa/Johannesburg', '(GMT+02:00) South Africa Standard Time (Africa/Johannesburg)'), ('Asia/Beirut', '(GMT+02:00) Eastern European Standard Time (Asia/Beirut)'), ('Asia/Jerusalem', '(GMT+02:00) Israel Standard Time (Asia/Jerusalem)'), ('Europe/Athens', '(GMT+02:00) Eastern European Standard Time (Europe/Athens)'), ('Europe/Bucharest', '(GMT+02:00) Eastern European Standard Time (Europe/Bucharest)'), ('Europe/Helsinki', '(GMT+02:00) Eastern European Standard Time (Europe/Helsinki)'), ('Africa/Algiers', '(GMT+01:00) Central European Standard Time (Africa/Algiers)'), ('Africa/Casablanca', '(GMT+01:00) Africa/Casablanca'), ('Europe/Amsterdam', '(GMT+01:00) Central European Standard Time (Europe/Amsterdam)'), ('Europe/Berlin', '(GMT+01:00) Central European Standard Time (Europe/Berlin)'), ('Europe/Brussels', '(GMT+01:00) Central European Standard Time (Europe/Brussels)'), ('Europe/Paris', '(GMT+01:00) Central European Standard Time (Europe/Paris)'), ('Europe/Prague', '(GMT+01:00) Central European Standard Time (Europe/Prague)'), ('Europe/Rome', '(GMT+01:00) Central European Standard Time (Europe/Rome)'), ('Europe/Dublin', '(GMT+00:00) Greenwich Mean Time (Europe/Dublin)'), ('Europe/Lisbon', '(GMT+00:00) Western European Standard Time (Europe/Lisbon)'), ('Europe/London', '(GMT+00:00) Greenwich Mean Time (Europe/London)'), ('GMT', '(GMT+00:00) Greenwich Mean Time (GMT)'), ('America/Scoresbysund', '(GMT-01:00) East Greenland Standard Time (America/Scoresbysund)'), ('Atlantic/Azores', '(GMT-01:00) Azores Standard Time (Atlantic/Azores)'), ('Atlantic/Cape_Verde', '(GMT-01:00) Cape Verde Standard Time (Atlantic/Cape_Verde)'), ('Atlantic/South_Georgia', '(GMT-02:00) South Georgia Time (Atlantic/South_Georgia)'), ('America/St_Johns', '(GMT-02:30) Newfoundland Daylight Time (America/St_Johns)'), ('America/Argentina/Buenos_Aires', '(GMT-03:00) Argentina Standard Time (America/Argentina/Buenos_Aires)'), ('America/Halifax', '(GMT-03:00) Atlantic Daylight Time (America/Halifax)'), ('America/Santiago', '(GMT-03:00) Chile Summer Time (America/Santiago)'), ('America/Sao_Paulo', '(GMT-03:00) Brasilia Standard Time (America/Sao_Paulo)'), ('Atlantic/Bermuda', '(GMT-03:00) Atlantic Daylight Time (Atlantic/Bermuda)'), ('America/Caracas', '(GMT-04:00) Venezuela Time (America/Caracas)'), ('America/Indiana/Indianapolis', '(GMT-04:00) Eastern Daylight Time (America/Indiana/Indianapolis)'), ('America/New_York', '(GMT-04:00) Eastern Daylight Time (America/New_York)'), ('America/Puerto_Rico', '(GMT-04:00) Atlantic Standard Time (America/Puerto_Rico)'), ('America/Bogota', '(GMT-05:00) Colombia Standard Time (America/Bogota)'), ('America/Chicago', '(GMT-05:00) Central Daylight Time (America/Chicago)'), ('America/Lima', '(GMT-05:00) Peru Standard Time (America/Lima)'), ('America/Panama', '(GMT-05:00) Eastern Standard Time (America/Panama)'), ('America/Denver', '(GMT-06:00) Mountain Daylight Time (America/Denver)'), ('America/El_Salvador', '(GMT-06:00) Central Standard Time (America/El_Salvador)'), ('America/Mexico_City', '(GMT-06:00) Central Standard Time (America/Mexico_City)'), ('America/Los_Angeles', '(GMT-07:00) Pacific Daylight Time (America/Los_Angeles)'), ('America/Mazatlan', '(GMT-07:00) Mexican Pacific Standard Time (America/Mazatlan)'), ('America/Phoenix', '(GMT-07:00) Mountain Standard Time (America/Phoenix)'), ('America/Tijuana', '(GMT-07:00) Pacific Daylight Time (America/Tijuana)'), ('America/Anchorage', '(GMT-08:00) Alaska Daylight Time (America/Anchorage)'), ('Pacific/Pitcairn', '(GMT-08:00) Pitcairn Time (Pacific/Pitcairn)'), ('America/Adak', '(GMT-09:00) Hawaii-Aleutian Daylight Time (America/Adak)'), ('Pacific/Gambier', '(GMT-09:00) Gambier Time (Pacific/Gambier)'), ('Pacific/Marquesas', '(GMT-09:30) Marquesas Time (Pacific/Marquesas)'), ('Pacific/Honolulu', '(GMT-10:00) Hawaii-Aleutian Standard Time (Pacific/Honolulu)'), ('Pacific/Niue', '(GMT-11:00) Niue Time (Pacific/Niue)'), ('Pacific/Pago_Pago', '(GMT-11:00) Samoa Standard Time (Pacific/Pago_Pago)')])
    language_locale_key = models.CharField(max_length=40, verbose_name='Language', sf_read_only=models.READ_ONLY, choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')])
    receives_info_emails = models.BooleanField(verbose_name='Info Emails', sf_read_only=models.READ_ONLY, default=models.DefaultedOnCreate(False))
    receives_admin_info_emails = models.BooleanField(verbose_name='Info Emails Admin', sf_read_only=models.READ_ONLY, default=models.DefaultedOnCreate(False))
    preferences_require_opportunity_products = models.BooleanField(verbose_name='RequireOpportunityProducts', sf_read_only=models.READ_ONLY)
    fiscal_year_start_month = models.IntegerField(verbose_name='Fiscal Year Starts In', sf_read_only=models.READ_ONLY, blank=True, null=True)
    uses_start_date_as_fiscal_year_name = models.BooleanField(verbose_name='Fiscal Year Name by Start', sf_read_only=models.READ_ONLY, default=models.DefaultedOnCreate(False))
    default_account_access = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('None', 'Private'), ('Read', 'Read Only'), ('Edit', 'Read/Write'), ('ControlledByLeadOrContact', 'ControlledByLeadOrContact'), ('ControlledByCampaign', 'ControlledByCampaign')], blank=True, null=True)
    default_contact_access = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('None', 'Private'), ('Read', 'Read Only'), ('Edit', 'Read/Write'), ('ControlledByParent', 'Controlled By Parent')], blank=True, null=True)
    default_opportunity_access = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('None', 'Private'), ('Read', 'Read Only'), ('Edit', 'Read/Write'), ('ControlledByLeadOrContact', 'ControlledByLeadOrContact'), ('ControlledByCampaign', 'ControlledByCampaign')], blank=True, null=True)
    default_lead_access = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('None', 'Private'), ('Read', 'Read Only'), ('Edit', 'Read/Write'), ('ReadEditTransfer', 'Read/Write/Transfer')], blank=True, null=True)
    default_case_access = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('None', 'Private'), ('Read', 'Read Only'), ('Edit', 'Read/Write'), ('ReadEditTransfer', 'Read/Write/Transfer')], blank=True, null=True)
    default_calendar_access = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, default=models.DefaultedOnCreate('HideDetailsInsert'), choices=[('HideDetails', 'Hide Details'), ('HideDetailsInsert', 'Hide Details and Add Events'), ('ShowDetails', 'Show Details'), ('ShowDetailsInsert', 'Show Details and Add Events'), ('AllowEdits', 'Full Access')], blank=True, null=True)
    default_pricebook_access = models.CharField(max_length=40, verbose_name='Default Price Book Access', sf_read_only=models.READ_ONLY, choices=[('None', 'No Access'), ('Read', 'View Only'), ('ReadSelect', 'Use')], blank=True, null=True)
    default_campaign_access = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('None', 'Private'), ('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')], blank=True, null=True)
    delegated_authentication_service_url = models.URLField(verbose_name='Single Sign-On Gateway URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, default=models.DEFAULTED_ON_CREATE)
    compliance_bcc_email = models.EmailField(verbose_name='Compliance BCC Email', sf_read_only=models.READ_ONLY, blank=True, null=True)
    ui_skin = models.CharField(max_length=40, verbose_name='UI Skin', sf_read_only=models.READ_ONLY, default=models.DefaultedOnCreate('Theme3'), choices=[('Theme1', 'salesforce.com Classic'), ('Theme2', 'Salesforce'), ('PortalDefault', 'Portal Default'), ('Webstore', 'Webstore'), ('Theme3', 'Aloha')], blank=True, null=True)
    signup_country_iso_code = models.CharField(max_length=2, verbose_name='Signup Country', sf_read_only=models.READ_ONLY, blank=True, null=True)
    trial_expiration_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    num_knowledge_service = models.IntegerField(verbose_name='Knowledge Licenses', sf_read_only=models.READ_ONLY, blank=True, null=True)
    organization_type = models.CharField(max_length=40, verbose_name='Edition', sf_read_only=models.READ_ONLY, choices=[('Team Edition', None), ('Professional Edition', None), ('Enterprise Edition', None), ('Developer Edition', None), ('Personal Edition', None), ('Unlimited Edition', None), ('Contact Manager Edition', None), ('Base Edition', None)], blank=True, null=True)
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    instance_name = models.CharField(max_length=5, sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_sandbox = models.BooleanField(sf_read_only=models.READ_ONLY, default=models.DefaultedOnCreate(False))
    web_to_case_default_origin = models.CharField(max_length=40, verbose_name='Web to Cases Default Origin', sf_read_only=models.READ_ONLY, blank=True, null=True)
    monthly_page_views_used = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    monthly_page_views_entitlement = models.IntegerField(verbose_name='Monthly Page Views Allowed', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_read_only = models.BooleanField(sf_read_only=models.READ_ONLY, default=models.DefaultedOnCreate(False))
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY, default=models.DEFAULTED_ON_CREATE)
    created_by = models.ForeignKey('salesforce.User', models.DO_NOTHING, related_name='organization_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY, default=models.DEFAULTED_ON_CREATE)
    last_modified_by = models.ForeignKey('salesforce.User', models.DO_NOTHING, related_name='organization_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'Organization'
        verbose_name = 'Organization'
        verbose_name_plural = 'Organizations'
        # keyPrefix = '00D'


class Profile(models.Model):
    name = models.CharField(max_length=255, sf_read_only=models.READ_ONLY)
    permissions_email_single = models.BooleanField(verbose_name='Send Email', sf_read_only=models.READ_ONLY)
    permissions_email_mass = models.BooleanField(verbose_name='Mass Email', sf_read_only=models.READ_ONLY)
    permissions_edit_task = models.BooleanField(verbose_name='Edit Tasks', sf_read_only=models.READ_ONLY)
    permissions_edit_event = models.BooleanField(verbose_name='Edit Events', sf_read_only=models.READ_ONLY)
    permissions_export_report = models.BooleanField(verbose_name='Export Reports', sf_read_only=models.READ_ONLY)
    permissions_import_personal = models.BooleanField(verbose_name='Import Personal Contacts', sf_read_only=models.READ_ONLY)
    permissions_data_export = models.BooleanField(verbose_name='Weekly Data Export', sf_read_only=models.READ_ONLY)
    permissions_manage_users = models.BooleanField(verbose_name='Manage Users', sf_read_only=models.READ_ONLY)
    permissions_edit_public_filters = models.BooleanField(verbose_name='Manage Public List Views', sf_read_only=models.READ_ONLY)
    permissions_edit_public_templates = models.BooleanField(verbose_name='Manage Public Classic Email Templates', sf_read_only=models.READ_ONLY)
    permissions_modify_all_data = models.BooleanField(verbose_name='Modify All Data', sf_read_only=models.READ_ONLY)
    permissions_manage_cases = models.BooleanField(verbose_name='Manage Cases', sf_read_only=models.READ_ONLY)
    permissions_mass_inline_edit = models.BooleanField(verbose_name='Mass Edits from Lists', sf_read_only=models.READ_ONLY)
    permissions_edit_knowledge = models.BooleanField(verbose_name='Manage Articles', sf_read_only=models.READ_ONLY)
    permissions_manage_knowledge = models.BooleanField(verbose_name='Manage Salesforce Knowledge', sf_read_only=models.READ_ONLY)
    permissions_manage_solutions = models.BooleanField(verbose_name='Manage Published Solutions', sf_read_only=models.READ_ONLY)
    permissions_customize_application = models.BooleanField(verbose_name='Customize Application', sf_read_only=models.READ_ONLY)
    permissions_edit_readonly_fields = models.BooleanField(verbose_name='Edit Read Only Fields', sf_read_only=models.READ_ONLY)
    permissions_run_reports = models.BooleanField(verbose_name='Run Reports', sf_read_only=models.READ_ONLY)
    permissions_view_setup = models.BooleanField(verbose_name='View Setup and Configuration', sf_read_only=models.READ_ONLY)
    permissions_transfer_any_entity = models.BooleanField(verbose_name='Transfer Record', sf_read_only=models.READ_ONLY)
    permissions_new_report_builder = models.BooleanField(verbose_name='Report Builder', sf_read_only=models.READ_ONLY)
    permissions_manage_css_users = models.BooleanField(verbose_name='Manage Customer Users', sf_read_only=models.READ_ONLY)
    permissions_activate_contract = models.BooleanField(verbose_name='Activate Contracts', sf_read_only=models.READ_ONLY)
    permissions_import_leads = models.BooleanField(verbose_name='Import Leads', sf_read_only=models.READ_ONLY)
    permissions_manage_leads = models.BooleanField(verbose_name='Manage Leads', sf_read_only=models.READ_ONLY)
    permissions_transfer_any_lead = models.BooleanField(verbose_name='Transfer Leads', sf_read_only=models.READ_ONLY)
    permissions_view_all_data = models.BooleanField(verbose_name='View All Data', sf_read_only=models.READ_ONLY)
    permissions_edit_public_documents = models.BooleanField(verbose_name='Manage Public Documents', sf_read_only=models.READ_ONLY)
    permissions_view_encrypted_data = models.BooleanField(verbose_name='View Encrypted Data', sf_read_only=models.READ_ONLY)
    permissions_edit_brand_templates = models.BooleanField(verbose_name='Manage Letterheads', sf_read_only=models.READ_ONLY)
    permissions_edit_html_templates = models.BooleanField(verbose_name='Edit HTML Templates', sf_read_only=models.READ_ONLY)
    permissions_chatter_internal_user = models.BooleanField(verbose_name='Chatter Internal User', sf_read_only=models.READ_ONLY)
    permissions_manage_encryption_keys = models.BooleanField(verbose_name='Manage Encryption Keys', sf_read_only=models.READ_ONLY)
    permissions_delete_activated_contract = models.BooleanField(verbose_name='Delete Activated Contracts', sf_read_only=models.READ_ONLY)
    permissions_chatter_invite_external_users = models.BooleanField(verbose_name='Invite Customers To Chatter', sf_read_only=models.READ_ONLY)
    permissions_send_sit_requests = models.BooleanField(verbose_name='Send Stay-in-Touch Requests', sf_read_only=models.READ_ONLY)
    permissions_override_forecasts = models.BooleanField(verbose_name='Override Forecasts', sf_read_only=models.READ_ONLY)
    permissions_view_all_forecasts = models.BooleanField(verbose_name='View All Forecasts', sf_read_only=models.READ_ONLY)
    permissions_api_user_only = models.BooleanField(verbose_name='Api Only User', sf_read_only=models.READ_ONLY)
    permissions_manage_remote_access = models.BooleanField(verbose_name='Manage Connected Apps', sf_read_only=models.READ_ONLY)
    permissions_can_use_new_dashboard_builder = models.BooleanField(verbose_name='Drag-and-Drop Dashboard Builder', sf_read_only=models.READ_ONLY)
    permissions_manage_categories = models.BooleanField(verbose_name='Manage Categories', sf_read_only=models.READ_ONLY)
    permissions_convert_leads = models.BooleanField(verbose_name='Convert Leads', sf_read_only=models.READ_ONLY)
    permissions_password_never_expires = models.BooleanField(verbose_name='Password Never Expires', sf_read_only=models.READ_ONLY)
    permissions_use_team_reassign_wizards = models.BooleanField(verbose_name='Use Team Reassignment Wizards', sf_read_only=models.READ_ONLY)
    permissions_install_multiforce = models.BooleanField(verbose_name='Download AppExchange Packages', sf_read_only=models.READ_ONLY)
    permissions_publish_multiforce = models.BooleanField(verbose_name='Upload AppExchange Packages', sf_read_only=models.READ_ONLY)
    permissions_manage_partners = models.BooleanField(verbose_name='Manage External Users', sf_read_only=models.READ_ONLY)
    permissions_chatter_own_groups = models.BooleanField(verbose_name='Create and Own New Chatter Groups', sf_read_only=models.READ_ONLY)
    permissions_edit_opp_line_item_unit_price = models.BooleanField(verbose_name='Edit Opportunity Product Sales Price', sf_read_only=models.READ_ONLY)
    permissions_create_multiforce = models.BooleanField(verbose_name='Create AppExchange Packages', sf_read_only=models.READ_ONLY)
    permissions_bulk_api_hard_delete = models.BooleanField(verbose_name='Bulk API Hard Delete', sf_read_only=models.READ_ONLY)
    permissions_inbound_migration_tools_user = models.BooleanField(verbose_name='Deploy Change Sets', sf_read_only=models.READ_ONLY)
    permissions_solution_import = models.BooleanField(verbose_name='Import Solutions', sf_read_only=models.READ_ONLY)
    permissions_manage_call_centers = models.BooleanField(verbose_name='Manage Call Centers', sf_read_only=models.READ_ONLY)
    permissions_portal_super_user = models.BooleanField(verbose_name='Portal Super User', sf_read_only=models.READ_ONLY)
    permissions_manage_synonyms = models.BooleanField(verbose_name='Manage Synonyms', sf_read_only=models.READ_ONLY)
    permissions_outbound_migration_tools_user = models.BooleanField(verbose_name='Create and Upload Change Sets', sf_read_only=models.READ_ONLY)
    permissions_delegated_portal_user_admin = models.BooleanField(verbose_name='Delegated External User Administrator', sf_read_only=models.READ_ONLY)
    permissions_view_content = models.BooleanField(verbose_name='View Content in Portals', sf_read_only=models.READ_ONLY)
    permissions_manage_email_client_config = models.BooleanField(verbose_name='Manage Email Client Configurations', sf_read_only=models.READ_ONLY)
    permissions_enable_notifications = models.BooleanField(verbose_name='Send Outbound Messages', sf_read_only=models.READ_ONLY)
    permissions_is_sso_enabled = models.BooleanField(verbose_name='Is Single Sign-On Enabled', sf_read_only=models.READ_ONLY)
    permissions_manage_data_integrations = models.BooleanField(verbose_name='Manage Data Integrations', sf_read_only=models.READ_ONLY)
    permissions_distribute_from_pers_wksp = models.BooleanField(verbose_name='Create Content Deliveries', sf_read_only=models.READ_ONLY)
    permissions_view_data_categories = models.BooleanField(verbose_name='View Data Categories in Setup', sf_read_only=models.READ_ONLY)
    permissions_manage_data_categories = models.BooleanField(verbose_name='Manage Data Categories', sf_read_only=models.READ_ONLY)
    permissions_author_apex = models.BooleanField(verbose_name='Author Apex', sf_read_only=models.READ_ONLY)
    permissions_manage_mobile = models.BooleanField(verbose_name='Manage Mobile Configurations', sf_read_only=models.READ_ONLY)
    permissions_api_enabled = models.BooleanField(verbose_name='API Enabled', sf_read_only=models.READ_ONLY)
    permissions_manage_custom_report_types = models.BooleanField(verbose_name='Manage Custom Report Types', sf_read_only=models.READ_ONLY)
    permissions_edit_case_comments = models.BooleanField(verbose_name='Edit Case Comments', sf_read_only=models.READ_ONLY)
    permissions_transfer_any_case = models.BooleanField(verbose_name='Transfer Cases', sf_read_only=models.READ_ONLY)
    permissions_content_administrator = models.BooleanField(verbose_name='Manage Salesforce CRM Content', sf_read_only=models.READ_ONLY)
    permissions_create_workspaces = models.BooleanField(verbose_name='Create Libraries', sf_read_only=models.READ_ONLY)
    permissions_manage_content_permissions = models.BooleanField(verbose_name='Manage Content Permissions', sf_read_only=models.READ_ONLY)
    permissions_manage_content_properties = models.BooleanField(verbose_name='Manage Content Properties', sf_read_only=models.READ_ONLY)
    permissions_manage_content_types = models.BooleanField(verbose_name='Manage record types and layouts for Files', sf_read_only=models.READ_ONLY)
    permissions_schedule_job = models.BooleanField(verbose_name='Schedule Dashboards', sf_read_only=models.READ_ONLY)
    permissions_manage_exchange_config = models.BooleanField(verbose_name='Manage Lightning Sync', sf_read_only=models.READ_ONLY)
    permissions_manage_analytic_snapshots = models.BooleanField(verbose_name='Manage Reporting Snapshots', sf_read_only=models.READ_ONLY)
    permissions_schedule_reports = models.BooleanField(verbose_name='Schedule Reports', sf_read_only=models.READ_ONLY)
    permissions_manage_business_hour_holidays = models.BooleanField(verbose_name='Manage Business Hours Holidays', sf_read_only=models.READ_ONLY)
    permissions_manage_entitlements = models.BooleanField(verbose_name='Manage Entitlements', sf_read_only=models.READ_ONLY)
    permissions_manage_dynamic_dashboards = models.BooleanField(verbose_name='Manage Dynamic Dashboards', sf_read_only=models.READ_ONLY)
    permissions_manage_interaction = models.BooleanField(verbose_name='Manage Flow', sf_read_only=models.READ_ONLY)
    permissions_view_my_teams_dashboards = models.BooleanField(verbose_name="View My Team's Dashboards", sf_read_only=models.READ_ONLY)
    permissions_moderate_chatter = models.BooleanField(verbose_name='Moderate Chatter', sf_read_only=models.READ_ONLY)
    permissions_reset_passwords = models.BooleanField(verbose_name='Reset User Passwords and Unlock Users', sf_read_only=models.READ_ONLY)
    permissions_flow_uflrequired = models.BooleanField(db_column='PermissionsFlowUFLRequired', verbose_name='Require Flow User Feature License', sf_read_only=models.READ_ONLY)
    permissions_can_insert_feed_system_fields = models.BooleanField(verbose_name='Insert System Field Values for Chatter Feeds', sf_read_only=models.READ_ONLY)
    permissions_activities_access = models.BooleanField(verbose_name='Access Activities', sf_read_only=models.READ_ONLY)
    permissions_manage_knowledge_import_export = models.BooleanField(verbose_name='Manage Knowledge Article Import/Export', sf_read_only=models.READ_ONLY)
    permissions_email_template_management = models.BooleanField(verbose_name='Manage Email Templates', sf_read_only=models.READ_ONLY)
    permissions_email_administration = models.BooleanField(verbose_name='Email Administration', sf_read_only=models.READ_ONLY)
    permissions_manage_chatter_messages = models.BooleanField(verbose_name='Manage Chatter Messages and Direct Messages', sf_read_only=models.READ_ONLY)
    permissions_allow_email_ic = models.BooleanField(db_column='PermissionsAllowEmailIC', verbose_name='Email-Based Identity Verification Option', sf_read_only=models.READ_ONLY)
    permissions_chatter_file_link = models.BooleanField(verbose_name='Create Public Links', sf_read_only=models.READ_ONLY)
    permissions_force_two_factor = models.BooleanField(verbose_name='Two-Factor Authentication for User Interface Logins', sf_read_only=models.READ_ONLY)
    permissions_view_event_log_files = models.BooleanField(verbose_name='View Event Log Files', sf_read_only=models.READ_ONLY)
    permissions_manage_networks = models.BooleanField(verbose_name='Create and Set Up Communities', sf_read_only=models.READ_ONLY)
    permissions_manage_auth_providers = models.BooleanField(verbose_name='Manage Auth. Providers', sf_read_only=models.READ_ONLY)
    permissions_run_flow = models.BooleanField(verbose_name='Run Flows', sf_read_only=models.READ_ONLY)
    permissions_view_global_header = models.BooleanField(verbose_name='View Global Header', sf_read_only=models.READ_ONLY)
    permissions_manage_quotas = models.BooleanField(verbose_name='Manage Quotas', sf_read_only=models.READ_ONLY)
    permissions_create_customize_dashboards = models.BooleanField(verbose_name='Create and Customize Dashboards', sf_read_only=models.READ_ONLY)
    permissions_create_dashboard_folders = models.BooleanField(verbose_name='Create Dashboard Folders', sf_read_only=models.READ_ONLY)
    permissions_view_public_dashboards = models.BooleanField(verbose_name='View Dashboards in Public Folders', sf_read_only=models.READ_ONLY)
    permissions_manage_dashbds_in_pub_folders = models.BooleanField(verbose_name='Manage Dashboards in Public Folders', sf_read_only=models.READ_ONLY)
    permissions_create_customize_reports = models.BooleanField(verbose_name='Create and Customize Reports', sf_read_only=models.READ_ONLY)
    permissions_create_report_folders = models.BooleanField(verbose_name='Create Report Folders', sf_read_only=models.READ_ONLY)
    permissions_view_public_reports = models.BooleanField(verbose_name='View Reports in Public Folders', sf_read_only=models.READ_ONLY)
    permissions_manage_reports_in_pub_folders = models.BooleanField(verbose_name='Manage Reports in Public Folders', sf_read_only=models.READ_ONLY)
    permissions_edit_my_dashboards = models.BooleanField(verbose_name='Edit My Dashboards', sf_read_only=models.READ_ONLY)
    permissions_edit_my_reports = models.BooleanField(verbose_name='Edit My Reports', sf_read_only=models.READ_ONLY)
    permissions_view_all_users = models.BooleanField(verbose_name='View All Users', sf_read_only=models.READ_ONLY)
    permissions_allow_universal_search = models.BooleanField(verbose_name='Knowledge One', sf_read_only=models.READ_ONLY)
    permissions_connect_org_to_environment_hub = models.BooleanField(verbose_name='Connect Organization to Environment Hub', sf_read_only=models.READ_ONLY)
    permissions_create_customize_filters = models.BooleanField(verbose_name='Create and Customize List Views', sf_read_only=models.READ_ONLY)
    permissions_content_hub_user = models.BooleanField(verbose_name='Files Connect Cloud', sf_read_only=models.READ_ONLY)
    permissions_moderate_network_feeds = models.BooleanField(verbose_name='Moderate Communities Feeds', sf_read_only=models.READ_ONLY)
    permissions_moderate_network_files = models.BooleanField(verbose_name='Moderate Communities Files', sf_read_only=models.READ_ONLY)
    permissions_govern_networks = models.BooleanField(verbose_name='Manage Communities', sf_read_only=models.READ_ONLY)
    permissions_sales_console = models.BooleanField(verbose_name='Sales Console', sf_read_only=models.READ_ONLY)
    permissions_two_factor_api = models.BooleanField(verbose_name='Two-Factor Authentication for API Logins', sf_read_only=models.READ_ONLY)
    permissions_delete_topics = models.BooleanField(verbose_name='Delete Topics', sf_read_only=models.READ_ONLY)
    permissions_edit_topics = models.BooleanField(verbose_name='Edit Topics', sf_read_only=models.READ_ONLY)
    permissions_create_topics = models.BooleanField(verbose_name='Create Topics', sf_read_only=models.READ_ONLY)
    permissions_assign_topics = models.BooleanField(verbose_name='Assign Topics', sf_read_only=models.READ_ONLY)
    permissions_identity_enabled = models.BooleanField(verbose_name='Use Identity Features', sf_read_only=models.READ_ONLY)
    permissions_identity_connect = models.BooleanField(verbose_name='Use Identity Connect', sf_read_only=models.READ_ONLY)
    permissions_allow_view_knowledge = models.BooleanField(verbose_name='Allow View Knowledge', sf_read_only=models.READ_ONLY)
    permissions_content_workspaces = models.BooleanField(verbose_name='Access Libraries', sf_read_only=models.READ_ONLY)
    permissions_manage_search_promotion_rules = models.BooleanField(verbose_name='Manage Promoted Search Terms', sf_read_only=models.READ_ONLY)
    permissions_custom_mobile_apps_access = models.BooleanField(verbose_name='Access Custom Mobile Apps', sf_read_only=models.READ_ONLY)
    permissions_view_help_link = models.BooleanField(verbose_name='View Help Link', sf_read_only=models.READ_ONLY)
    permissions_manage_profiles_permissionsets = models.BooleanField(verbose_name='Manage Profiles and Permission Sets', sf_read_only=models.READ_ONLY)
    permissions_assign_permission_sets = models.BooleanField(verbose_name='Assign Permission Sets', sf_read_only=models.READ_ONLY)
    permissions_manage_roles = models.BooleanField(verbose_name='Manage Roles', sf_read_only=models.READ_ONLY)
    permissions_manage_ip_addresses = models.BooleanField(verbose_name='Manage IP Addresses', sf_read_only=models.READ_ONLY)
    permissions_manage_sharing = models.BooleanField(verbose_name='Manage Sharing', sf_read_only=models.READ_ONLY)
    permissions_manage_internal_users = models.BooleanField(verbose_name='Manage Internal Users', sf_read_only=models.READ_ONLY)
    permissions_manage_password_policies = models.BooleanField(verbose_name='Manage Password Policies', sf_read_only=models.READ_ONLY)
    permissions_manage_login_access_policies = models.BooleanField(verbose_name='Manage Login Access Policies', sf_read_only=models.READ_ONLY)
    permissions_manage_custom_permissions = models.BooleanField(verbose_name='Manage Custom Permissions', sf_read_only=models.READ_ONLY)
    permissions_can_verify_comment = models.BooleanField(verbose_name='Verify Answers to Chatter Questions', sf_read_only=models.READ_ONLY)
    permissions_manage_unlisted_groups = models.BooleanField(verbose_name='Manage Unlisted Groups', sf_read_only=models.READ_ONLY)
    permissions_std_automatic_activity_capture = models.BooleanField(verbose_name='Use Einstein Activity Capture Standard', sf_read_only=models.READ_ONLY)
    permissions_insights_app_dashboard_editor = models.BooleanField(verbose_name='Create and Edit Analytics Dashboards', sf_read_only=models.READ_ONLY)
    permissions_manage_two_factor = models.BooleanField(verbose_name='Manage Two-Factor Authentication in API', sf_read_only=models.READ_ONLY)
    permissions_insights_app_user = models.BooleanField(verbose_name='Use Analytics', sf_read_only=models.READ_ONLY)
    permissions_insights_app_admin = models.BooleanField(verbose_name='Manage Analytics', sf_read_only=models.READ_ONLY)
    permissions_insights_app_elt_editor = models.BooleanField(verbose_name='Edit Analytics Dataflows', sf_read_only=models.READ_ONLY)
    permissions_insights_app_upload_user = models.BooleanField(verbose_name='Upload External Data to Analytics', sf_read_only=models.READ_ONLY)
    permissions_insights_create_application = models.BooleanField(verbose_name='Create Analytics Apps', sf_read_only=models.READ_ONLY)
    permissions_debug_apex = models.BooleanField(verbose_name='Debug Apex', sf_read_only=models.READ_ONLY)
    permissions_lightning_experience_user = models.BooleanField(verbose_name='Lightning Experience User', sf_read_only=models.READ_ONLY)
    permissions_view_data_leakage_events = models.BooleanField(verbose_name='View Data Leakage Detection Events', sf_read_only=models.READ_ONLY)
    permissions_config_custom_recs = models.BooleanField(verbose_name='Configure Custom Recommendations', sf_read_only=models.READ_ONLY)
    permissions_submit_macros_allowed = models.BooleanField(verbose_name="Manage Macros Users Can't Undo", sf_read_only=models.READ_ONLY)
    permissions_bulk_macros_allowed = models.BooleanField(verbose_name='Run Macros on Multiple Records', sf_read_only=models.READ_ONLY)
    permissions_share_internal_articles = models.BooleanField(verbose_name='Share internal Knowledge articles externally', sf_read_only=models.READ_ONLY)
    permissions_moderate_network_messages = models.BooleanField(verbose_name='Moderate Communities Chatter Messages', sf_read_only=models.READ_ONLY)
    permissions_manage_session_permission_sets = models.BooleanField(verbose_name='Manage Session Permission Set Activations', sf_read_only=models.READ_ONLY)
    permissions_manage_templated_app = models.BooleanField(verbose_name='Manage Analytics Templated Apps', sf_read_only=models.READ_ONLY)
    permissions_use_templated_app = models.BooleanField(verbose_name='Use Analytics Templated Apps', sf_read_only=models.READ_ONLY)
    permissions_send_announcement_emails = models.BooleanField(verbose_name='Send announcement emails', sf_read_only=models.READ_ONLY)
    permissions_chatter_edit_own_post = models.BooleanField(verbose_name='Edit My Own Posts', sf_read_only=models.READ_ONLY)
    permissions_chatter_edit_own_record_post = models.BooleanField(verbose_name='Edit Posts on Records I Own', sf_read_only=models.READ_ONLY)
    permissions_admin_analytics_user = models.BooleanField(verbose_name='Access Event Monitoring Analytics Templates and Apps', sf_read_only=models.READ_ONLY)
    permissions_create_audit_fields = models.BooleanField(verbose_name='Set Audit Fields upon Record Creation', sf_read_only=models.READ_ONLY)
    permissions_update_with_inactive_owner = models.BooleanField(verbose_name='Update Records with Inactive Owners', sf_read_only=models.READ_ONLY)
    permissions_assign_user_to_skill = models.BooleanField(verbose_name='Assign Chat Skills to Users', sf_read_only=models.READ_ONLY)
    permissions_wave_trend_reports = models.BooleanField(verbose_name='Trend Report Data in Analytics', sf_read_only=models.READ_ONLY)
    permissions_wave_tabular_download = models.BooleanField(verbose_name='Download Analytics Data', sf_read_only=models.READ_ONLY)
    permissions_manage_sandboxes = models.BooleanField(verbose_name='Manage Sandboxes', sf_read_only=models.READ_ONLY)
    permissions_automatic_activity_capture = models.BooleanField(verbose_name='Use Einstein Activity Capture', sf_read_only=models.READ_ONLY)
    permissions_import_custom_objects = models.BooleanField(verbose_name='Import Custom Objects', sf_read_only=models.READ_ONLY)
    permissions_delegated_two_factor = models.BooleanField(verbose_name='Manage Two-Factor Authentication in User Interface', sf_read_only=models.READ_ONLY)
    permissions_chatter_compose_ui_codesnippet = models.BooleanField(verbose_name='Allow Inclusion of Code Snippets from UI', sf_read_only=models.READ_ONLY)
    permissions_select_files_from_salesforce = models.BooleanField(verbose_name='Select Files from Salesforce', sf_read_only=models.READ_ONLY)
    permissions_moderate_network_users = models.BooleanField(verbose_name='Moderate Community Users', sf_read_only=models.READ_ONLY)
    permissions_merge_topics = models.BooleanField(verbose_name='Merge Topics', sf_read_only=models.READ_ONLY)
    permissions_subscribe_to_lightning_reports = models.BooleanField(verbose_name='Subscribe to Reports', sf_read_only=models.READ_ONLY)
    permissions_manage_pvt_rpts_and_dashbds = models.BooleanField(verbose_name='Manage All Private Reports and Dashboards', sf_read_only=models.READ_ONLY)
    permissions_campaign_influence2 = models.BooleanField(verbose_name='Campaign Influence', sf_read_only=models.READ_ONLY)
    permissions_view_data_assessment = models.BooleanField(verbose_name='Access to view Data Assessment', sf_read_only=models.READ_ONLY)
    permissions_remove_direct_message_members = models.BooleanField(verbose_name='Remove People from Direct Messages', sf_read_only=models.READ_ONLY)
    permissions_can_approve_feed_post = models.BooleanField(verbose_name='Can Approve Feed Post and Comment', sf_read_only=models.READ_ONLY)
    permissions_add_direct_message_members = models.BooleanField(verbose_name='Add People to Direct Messages', sf_read_only=models.READ_ONLY)
    permissions_allow_view_edit_converted_leads = models.BooleanField(verbose_name='View and Edit Converted Leads', sf_read_only=models.READ_ONLY)
    permissions_show_company_name_as_user_badge = models.BooleanField(verbose_name='Show Company Name as Community Role', sf_read_only=models.READ_ONLY)
    permissions_access_cmc = models.BooleanField(db_column='PermissionsAccessCMC', verbose_name='Access Community Management', sf_read_only=models.READ_ONLY)
    permissions_archive_articles = models.BooleanField(verbose_name='Archive Articles', sf_read_only=models.READ_ONLY)
    permissions_publish_articles = models.BooleanField(verbose_name='Publish Articles', sf_read_only=models.READ_ONLY)
    permissions_view_health_check = models.BooleanField(verbose_name='View Health Check', sf_read_only=models.READ_ONLY)
    permissions_manage_health_check = models.BooleanField(verbose_name='Manage Health Check', sf_read_only=models.READ_ONLY)
    permissions_packaging2 = models.BooleanField(verbose_name='Create and Update Second-Generation Packages', sf_read_only=models.READ_ONLY)
    permissions_manage_certificates = models.BooleanField(verbose_name='Manage Certificates', sf_read_only=models.READ_ONLY)
    permissions_create_report_in_lightning = models.BooleanField(verbose_name='Report Builder (Lightning Experience)', sf_read_only=models.READ_ONLY)
    permissions_prevent_classic_experience = models.BooleanField(verbose_name='Hide Option to Switch to Salesforce Classic', sf_read_only=models.READ_ONLY)
    permissions_hide_read_by_list = models.BooleanField(verbose_name='Hide the Seen By List', sf_read_only=models.READ_ONLY)
    permissions_submit_for_translation = models.BooleanField(verbose_name='Article Translation - Submit for Translation', sf_read_only=models.READ_ONLY)
    permissions_edit_translation = models.BooleanField(verbose_name='Article Translation - Edit', sf_read_only=models.READ_ONLY)
    permissions_publish_translation = models.BooleanField(verbose_name='Article Translation - Publish', sf_read_only=models.READ_ONLY)
    permissions_list_email_send = models.BooleanField(verbose_name='Allow sending of List Emails', sf_read_only=models.READ_ONLY)
    permissions_feed_pinning = models.BooleanField(verbose_name='Pin Posts in Feeds', sf_read_only=models.READ_ONLY)
    permissions_change_dashboard_colors = models.BooleanField(verbose_name='Change Dashboard Colors', sf_read_only=models.READ_ONLY)
    permissions_manage_recommendation_strategies = models.BooleanField(verbose_name='Manage Next Best Action Strategies', sf_read_only=models.READ_ONLY)
    permissions_manage_propositions = models.BooleanField(verbose_name='Manage Next Best Action Recommendations', sf_read_only=models.READ_ONLY)
    permissions_close_conversations = models.BooleanField(verbose_name='Close Conversation Threads', sf_read_only=models.READ_ONLY)
    permissions_subscribe_report_roles_grps = models.BooleanField(verbose_name='Subscribe to Reports: Send to Groups and Roles', sf_read_only=models.READ_ONLY)
    permissions_subscribe_dashboard_roles_grps = models.BooleanField(verbose_name='Subscribe to Dashboards: Send to Groups and Roles', sf_read_only=models.READ_ONLY)
    permissions_use_web_link = models.BooleanField(verbose_name='Allow Access to Customized Actions', sf_read_only=models.READ_ONLY)
    permissions_has_unlimited_nbaexecutions = models.BooleanField(db_column='PermissionsHasUnlimitedNBAExecutions', verbose_name='User Has Unlimited Next Best Action Strategy Executions', sf_read_only=models.READ_ONLY)
    permissions_view_only_embedded_app_user = models.BooleanField(verbose_name='Access to View-Only Licensed Templates and Apps', sf_read_only=models.READ_ONLY)
    permissions_view_all_activities = models.BooleanField(verbose_name='View All Activities', sf_read_only=models.READ_ONLY)
    permissions_subscribe_report_to_other_users = models.BooleanField(verbose_name='Subscribe to Reports: Add Recipients', sf_read_only=models.READ_ONLY)
    permissions_lightning_console_allowed_for_user = models.BooleanField(verbose_name='Lightning Console User', sf_read_only=models.READ_ONLY)
    permissions_subscribe_reports_run_as_user = models.BooleanField(verbose_name='Subscribe to Reports: Set Running User', sf_read_only=models.READ_ONLY)
    permissions_subscribe_to_lightning_dashboards = models.BooleanField(verbose_name='Subscribe to Dashboards', sf_read_only=models.READ_ONLY)
    permissions_subscribe_dashboard_to_other_users = models.BooleanField(verbose_name='Subscribe to Dashboards: Add Recipients', sf_read_only=models.READ_ONLY)
    permissions_create_ltng_temp_in_pub = models.BooleanField(verbose_name='Manage Public Lightning Email Templates', sf_read_only=models.READ_ONLY)
    permissions_transactional_email_send = models.BooleanField(verbose_name='Send Non-Commercial Email', sf_read_only=models.READ_ONLY)
    permissions_view_private_static_resources = models.BooleanField(verbose_name='View Private Static Resources', sf_read_only=models.READ_ONLY)
    permissions_view_customer_sentiment = models.BooleanField(verbose_name='View Community 360', sf_read_only=models.READ_ONLY)
    permissions_create_ltng_temp_folder = models.BooleanField(verbose_name='Create Folders for Lightning Email Templates', sf_read_only=models.READ_ONLY)
    permissions_apex_rest_services = models.BooleanField(verbose_name='Apex REST Services', sf_read_only=models.READ_ONLY)
    permissions_enable_community_app_launcher = models.BooleanField(verbose_name='Show App Launcher in Communities', sf_read_only=models.READ_ONLY)
    permissions_give_recognition_badge = models.BooleanField(verbose_name='Give Recognition Badges in Lightning Communities', sf_read_only=models.READ_ONLY)
    permissions_use_my_search = models.BooleanField(verbose_name='Einstein Search', sf_read_only=models.READ_ONLY)
    permissions_ltng_promo_reserved01_user_perm = models.BooleanField(verbose_name='Remain in Salesforce Classic', sf_read_only=models.READ_ONLY)
    permissions_manage_subscriptions = models.BooleanField(verbose_name='Manage Analytics Subscriptions', sf_read_only=models.READ_ONLY)
    permissions_wave_manage_private_assets_user = models.BooleanField(verbose_name='Manage Analytics Private Assets', sf_read_only=models.READ_ONLY)
    permissions_can_edit_data_prep_recipe = models.BooleanField(verbose_name='Edit Dataset Recipes', sf_read_only=models.READ_ONLY)
    permissions_add_analytics_remote_connections = models.BooleanField(verbose_name='Add Analytics Remote Connections', sf_read_only=models.READ_ONLY)
    permissions_manage_surveys = models.BooleanField(verbose_name='Manage Surveys', sf_read_only=models.READ_ONLY)
    permissions_use_assistant_dialog = models.BooleanField(verbose_name='Einstein Search Record Previews', sf_read_only=models.READ_ONLY)
    permissions_use_query_suggestions = models.BooleanField(verbose_name='Einstein Search Results Based On Conversational Queries', sf_read_only=models.READ_ONLY)
    permissions_record_visibility_api = models.BooleanField(db_column='PermissionsRecordVisibilityAPI', verbose_name='Enable RecordVisibility API', sf_read_only=models.READ_ONLY)
    permissions_view_roles = models.BooleanField(verbose_name='View Roles and Role Hierarchy', sf_read_only=models.READ_ONLY)
    permissions_can_manage_maps = models.BooleanField(verbose_name='Manage Analytics Custom Maps', sf_read_only=models.READ_ONLY)
    permissions_lmoutbound_messaging_user_perm = models.BooleanField(db_column='PermissionsLMOutboundMessagingUserPerm', verbose_name='Agent Initiated Outbound Messaging', sf_read_only=models.READ_ONLY)
    permissions_modify_data_classification = models.BooleanField(verbose_name='Modify Data Classification', sf_read_only=models.READ_ONLY)
    permissions_privacy_data_access = models.BooleanField(verbose_name='Allow user to access privacy data', sf_read_only=models.READ_ONLY)
    permissions_query_all_files = models.BooleanField(verbose_name='Query All Files', sf_read_only=models.READ_ONLY)
    permissions_modify_metadata = models.BooleanField(verbose_name='Modify Metadata Through Metadata API Functions', sf_read_only=models.READ_ONLY)
    permissions_manage_cms = models.BooleanField(db_column='PermissionsManageCMS', verbose_name='Manage CMS Workspaces and Channels', sf_read_only=models.READ_ONLY)
    permissions_sandbox_testing_in_community_app = models.BooleanField(verbose_name='Enables testing a sandbox community in the Mobile Publisher for Community Cloud app.', sf_read_only=models.READ_ONLY)
    permissions_view_flow_usage_and_flow_event_data = models.BooleanField(verbose_name='View Flow Usage and Flow Event Data', sf_read_only=models.READ_ONLY)
    permissions_can_edit_prompts = models.BooleanField(verbose_name='Manage Prompts', sf_read_only=models.READ_ONLY)
    user_license = models.ForeignKey('UserLicense', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    user_type = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Standard', 'Standard'), ('PowerPartner', 'Partner'), ('PowerCustomerSuccess', 'Customer Portal Manager'), ('CustomerSuccess', 'Customer Portal User'), ('Guest', 'Guest'), ('CspLitePortal', 'High Volume Portal'), ('CsnOnly', 'CSN Only'), ('SelfService', 'Self Service')], blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY, default=models.DEFAULTED_ON_CREATE)
    created_by = models.ForeignKey('salesforce.User', models.DO_NOTHING, related_name='profile_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY, default=models.DEFAULTED_ON_CREATE)
    last_modified_by = models.ForeignKey('salesforce.User', models.DO_NOTHING, related_name='profile_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, default=models.DEFAULTED_ON_CREATE)
    is_sso_enabled = models.BooleanField(verbose_name='Is Single Sign-On Enabled', sf_read_only=models.READ_ONLY, default=models.DefaultedOnCreate(False))
    description = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Profile'
        verbose_name = 'Profile'
        verbose_name_plural = 'Profile'
        # keyPrefix = '00e'


class QueueRoutingConfig(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=models.DefaultedOnCreate(False))
    developer_name = models.CharField(max_length=80, sf_read_only=models.READ_ONLY)
    language = models.CharField(max_length=40, verbose_name='Master Language', sf_read_only=models.READ_ONLY, choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')])
    master_label = models.CharField(max_length=80, verbose_name='Routing Configuration Name', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY, default=models.DEFAULTED_ON_CREATE)
    created_by = models.ForeignKey('salesforce.User', models.DO_NOTHING, related_name='queueroutingconfig_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY, default=models.DEFAULTED_ON_CREATE)
    last_modified_by = models.ForeignKey('salesforce.User', models.DO_NOTHING, related_name='queueroutingconfig_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, default=models.DEFAULTED_ON_CREATE)
    routing_priority = models.IntegerField(sf_read_only=models.READ_ONLY)
    routing_model = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, choices=[('LeastActive', 'Least Active'), ('MostAvailable', 'Most Available'), ('ExternalRouting', 'External Routing')])
    capacity_weight = models.DecimalField(max_digits=10, decimal_places=2, verbose_name='Units of Capacity', sf_read_only=models.READ_ONLY, blank=True, null=True)
    capacity_percentage = models.DecimalField(max_digits=5, decimal_places=2, verbose_name='Percentage  of Capacity', sf_read_only=models.READ_ONLY, blank=True, null=True)
    push_timeout = models.IntegerField(verbose_name='Push Time-Out (seconds)', sf_read_only=models.READ_ONLY, blank=True, null=True)
    overflow_assignee = models.ForeignKey(Group, models.DO_NOTHING, related_name='queueroutingconfig_overflowassignee_set', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [Group, User]
    is_attribute_based = models.BooleanField(verbose_name='Use with Attribute Setup for Skills-Based Routing', sf_read_only=models.READ_ONLY, default=models.DefaultedOnCreate(False))
    drop_additional_skills_timeout = models.IntegerField(verbose_name='Drop Additional Skills Time-Out (seconds)', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'QueueRoutingConfig'
        verbose_name = 'Routing Configuration'
        verbose_name_plural = 'Routing Configurations'
        # keyPrefix = '0K9'


class RecordType(models.Model):
    name = models.CharField(max_length=80, sf_read_only=models.READ_ONLY)
    developer_name = models.CharField(max_length=80, verbose_name='Record Type Name', sf_read_only=models.READ_ONLY)
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    description = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    business_process = models.ForeignKey(BusinessProcess, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    sobject_type = models.CharField(max_length=80, verbose_name='Sobject Type Name', sf_read_only=models.READ_ONLY, choices=[('Account', None), ('Account_Bundle__c', None), ('AccountBrand', None), ('Agent_Affiliation__c', None), ('AgentWork', None), ('Alert__c', None), ('ambition__AmbitionEmailRecipient__c', None), ('ambition__AmbitionEntity__c', None), ('ambition__AmbitionEntityField__c', None), ('ambition__AmbitionGeneralConfig__c', None), ('ambition__AmbitionLogEntry__c', None), ('ambition__AmbitionPushableObject__c', None), ('ambition__AmbitionPushableObjectField__c', None), ('ambition__AmbitionPushableObjectTestObject__c', None), ('ambition__AmbitionReportFilter__c', None), ('ambition__AmbitionReportInstance__c', None), ('ambition__AmbitionReportInstanceChunk__c', None), ('ambition__AmbitionReportRunConfig__c', None), ('ambition__log_entry__c', None), ('AMS_Account_Team__c', None), ('Announcement', None), ('ANTS_Letters_and_Attachments__c', None), ('Apex_Error__c', None), ('AppAnalyticsQueryRequest', None), ('Asset', None), ('AssetRelationship', None), ('AssistantProgress', None), ('Authorization__c', None), ('AuthorizationForm', None), ('AuthorizationFormConsent', None), ('AuthorizationFormDataUse', None), ('AuthorizationFormText', None), ('Benefits_Upsell_Opportunity__c', None), ('Broker_Commission__c', None), ('Broker_Email_Archive__c', None), ('Broker_Favorites__c', None), ('Broker_Trip_Status__c', None), ('BrokerOpportunity__c', None), ('BrokerSales__c', None), ('CalendarModel', None), ('CalendarView', None), ('Campaign', None), ('CampaignMember', None), ('Carrier__c', None), ('Carrier_Data_Mapping__c', None), ('Carrier_RFP__c', None), ('CarrierLibrary__c', None), ('Case', None), ('Case_Dimension_Email__c', None), ('Case_Route__c', None), ('CaseExternalDocument', None), ('Checklist__c', None), ('Class__c', None), ('CollaborationGroup', None), ('CollaborationGroupRank', None), ('CollaborationGroupRecord', None), ('Commission__c', None), ('CommSubscription', None), ('CommSubscriptionChannelType', None), ('CommSubscriptionConsent', None), ('CommSubscriptionTiming', None), ('Community_Message__c', None), ('CommunityTiles__c', None), ('ComponentResponseCache', None), ('Connection_Credential__c', None), ('Contact', None), ('ContactPointConsent', None), ('ContactPointEmail', None), ('ContactPointPhone', None), ('ContactPointTypeConsent', None), ('ContactRequest', None), ('ContentDocumentListViewMapping', None), ('ContentFolderDistribution', None), ('ContentVersion', None), ('Contract', None), ('ContractLineItem', None), ('ConversationContextEntry', None), ('Course__c', None), ('Credential__c', None), ('DataPrepServiceLocator', None), ('DataUseLegalBasis', None), ('DataUsePurpose', None), ('DeflectionSignal', None), ('DuplicateErrorLog', None), ('DuplicateRecordItem', None), ('DuplicateRecordSet', None), ('Email_Signature_Attachments__c', None), ('EngagementChannelType', None), ('Enrollment__c', None), ('Entitlement', None), ('EntitlementContact', None), ('Event', None), ('ExpressionFilter', None), ('ExpressionFilterCriteria', None), ('Feedback__c', None), ('FileInspectionResult', None), ('FileSearchActivity', None), ('FlowExecutionEventMetric', None), ('FlowRecordRelation', None), ('FlowStageRelation', None), ('Group_Calendar__c', None), ('Idea', None), ('Image', None), ('InboundSocialPost', None), ('Individual', None), ('INQ__Criteria_Fields_Status__c', None), ('INQ__Data_Mapping_Configuration__c', None), ('INQ__Data_Transfer_Criteria__c', None), ('INQ__Data_Transfer_Criteria_Detail__c', None), ('INQ__Email_Template_Mapping_Configuration__c', None), ('INQ__Exception_Logger__c', None), ('INQ__iConnectionStatus__c', None), ('INQ__Inquisium_Activity_Tracker__c', None), ('INQ__Respondent__c', None), ('INQ__Respondent_Field_Mapping__c', None), ('INQ__Survey_Answer__c', None), ('INQ__Survey_Criteria__c', None), ('INQ__Survey_Criteria_Detail__c', None), ('INQ__Survey_Program__c', None), ('INQ__Survey_Program_Question__c', None), ('INQ__Survey_Staging__c', None), ('INQ__Trigger_Object_Exclusion__c', None), ('Intake__c', None), ('Knowledge__kav', None), ('KnowledgeMigrationStat', None), ('Lead', None), ('Lead_Assignment_Rules__c', None), ('LinkedArticle', None), ('ListEmail', None), ('ListEmailIndividualRecipient', None), ('ListEmailRecipientSource', None), ('ListEmailSentResult', None), ('LiveAgentSession', None), ('LiveChatFileToken', None), ('LiveChatTranscript', None), ('Macro', None), ('MacroAction', None), ('MacroInstruction', None), ('MacroUsage', None), ('ManagedContent', None), ('ManagedContentBlock', None), ('ManagedContentBlockVersion', None), ('ManagedContentBodyLink', None), ('ManagedContentChannel', None), ('ManagedContentFolderMember', None), ('ManagedContentMigration', None), ('ManagedContentNode', None), ('ManagedContentNodeRefTree', None), ('ManagedContentNodeRendition', None), ('ManagedContentRelease', None), ('ManagedContentReleaseItem', None), ('ManagedContentSet', None), ('ManagedContentSetLink', None), ('ManagedContentSpaceChannel', None), ('ManagedContentSpaceFolderMember', None), ('ManagedContentSpaceItem', None), ('ManagedContentTranslationJob', None), ('ManagedContentTranslationTask', None), ('ManagedContentTypeSearchBlackList', None), ('ManagedContentVariant', None), ('ManagedContentVersion', None), ('Menu__c', None), ('Migration_Task__c', None), ('mkto_si__Best_Bets_View__c', None), ('mkto_si__Best_Bets_View_Detail__c', None), ('mkto_si__BestBetsCache__c', None), ('mkto_si__EmailActivityCache__c', None), ('mkto_si__GroupedWebActivityCache__c', None), ('mkto_si__InterestingMomentsCache__c', None), ('mkto_si__Marketo_Sales_Insight_Config__c', None), ('mkto_si__ScoringCache__c', None), ('mkto_si__Value__c', None), ('mkto_si__WebActivityCache__c', None), ('myobj__c', None), ('NetworkSearchQueryFrequency', None), ('NetworkUserHistoryRecent', None), ('Notification__c', None), ('OE_Error__c', None), ('Office__c', None), ('Opportunity', None), ('Opportunity_Pipeline_Snapshot__c', None), ('OrgDeleteRequest', None), ('OrgMetric', None), ('OrgMetricScanResult', None), ('OrgMetricScanSummary', None), ('Out_Of_Office__c', None), ('PartyConsent', None), ('Payroll_Price_Book__c', None), ('PendingServiceRouting', None), ('PersonalizationResource', None), ('Plan_Selection__c', None), ('Plan_Type__c', None), ('Platform_History__c', None), ('Postal_Code__c', None), ('Pricebook2', None), ('Product2', None), ('PromptAction', None), ('qbdialer__ContactScore__c', None), ('qbdialer__DialerQuery__c', None), ('qbdialer__DialerQueryAttendee__c', None), ('qbdialer__DialerQueryItem__c', None), ('qbdialer__isDialerConfig__c', None), ('qbdialer__SeekInitiative__c', None), ('qbdialer__SeekInitiativeAttendee__c', None), ('qbdialer__SeekInitiativeItem__c', None), ('QuickText', None), ('QuickTextUsage', None), ('Quote', None), ('Quote_Line_Item__c', None), ('Recommendation', None), ('RecommendationReaction', None), ('RecordAction', None), ('RecordMergeHistory', None), ('RecordOrigin', None), ('Referral__c', None), ('ReportResultBlob', None), ('RequestsForAccessSIQ', None), ('sbv2__Group__c', None), ('sbv2__List_Object__c', None), ('sbv2__Quality_Sample__c', None), ('sbv2__Sample_Criteria_Filter__c', None), ('sbv2__Score_List__c', None), ('sbv2__Summary_Score__c', None), ('sbv2__Team__c', None), ('sbv2__Team_User__c', None), ('Scorecard', None), ('ScorecardAssociation', None), ('ScorecardMetric', None), ('SearchActivity', None), ('SearchPromotionRule', None), ('Security_Questions__c', None), ('seismic__Debug_Log__c', None), ('ServiceContract', None), ('Services__c', None), ('SetupAssistantAnswer', None), ('SetupAssistantProgress', None), ('SetupFlowProgress', None), ('Shipment__c', None), ('SIC_Code__c', None), ('SiqUserBlacklist', None), ('sma__AvailableField__c', None), ('sma__MAAJAXDebugLog__c', None), ('sma__MAAnalytic__c', None), ('sma__MAArcGISBatchPushLog__c', None), ('sma__MAArcGISBatchPushSetting__c', None), ('sma__MAArcGISBatchPushTest__c', None), ('sma__MAAssignmentDebugLog__c', None), ('sma__MAAssignmentPlan__c', None), ('sma__MAAssignmentRule__c', None), ('sma__MABaseObject__c', None), ('sma__MAButtonSet__c', None), ('sma__MACache__c', None), ('sma__MAClick2Create__c', None), ('sma__MACustomAction__c', None), ('sma__MADataLayerSetting__c', None), ('sma__MADataLoad__c', None), ('sma__MADataLoadSegment__c', None), ('sma__MADriveProfile__c', None), ('sma__MAEventBaseObj__c', None), ('sma__MAEventLookup__c', None), ('sma__MAExport__c', None), ('sma__MAExportRow__c', None), ('sma__MAFolder__c', None), ('sma__MAFolderPermission__c', None), ('sma__MALayer__c', None), ('sma__MALocation__c', None), ('sma__MALocationFolder__c', None), ('sma__MALog__c', None), ('sma__MAMiniMapSetting__c', None), ('sma__MARelatedList__c', None), ('sma__MARoute__c', None), ('sma__MASavedQry__c', None), ('sma__MASavedQryComponent__c', None), ('sma__MAScheduledJob__c', None), ('sma__MASettingsAssignments__c', None), ('sma__MASettingsGroup__c', None), ('sma__MAShift__c', None), ('sma__MATerritory__c', None), ('sma__MATerritoryAggregation__c', None), ('sma__MATerritoryAggregationSetting__c', None), ('sma__MATerritoryCollection__c', None), ('sma__MATerritoryCollectionBaseObject__c', None), ('sma__MATerritoryCollectionFieldUpdate__c', None), ('sma__MATerritoryGeometry__c', None), ('sma__MATerritoryNode__c', None), ('sma__MATerritoryRollup__c', None), ('sma__MATerritoryRollupComponent__c', None), ('sma__MATerritoryRollupFolder__c', None), ('sma__MATerritoryRollupRun__c', None), ('sma__MATerritoryRollupValue__c', None), ('sma__MAWaypoint__c', None), ('SocialPost', None), ('Solution', None), ('Source_Account_Team__c', None), ('StrategyMonthlyStats', None), ('StreamActivityAccess', None), ('SyncTransactionLog', None), ('Task', None), ('TaxNotice__c', None), ('trailheadapp__Badge__c', None), ('trailheadapp__Debug_Log__c', None), ('trailheadapp__Trail__c', None), ('trailheadapp__Trailhead_User_Data__c', None), ('trailheadapp__Trailmix__c', None), ('trailheadapp__Trailmix_Assignment__c', None), ('trailheadapp__User_Badge__c', None), ('trailheadapp__User_Trailmix__c', None), ('TrainingEnrollment__c', None), ('TransactionSecurityAction', None), ('TransactionSecurityActionEvent', None), ('Trip_Status_Eligibility__c', None), ('Twilio_Voice_Response__c', None), ('Upsell_Opportunity__c', None), ('User_Login_Snapshot__c', None), ('UserEmailPreferredPerson', None), ('UserMetrics', None), ('UserNavItem', None), ('UserServicePresence', None), ('vidyard__Video_View__c', None), ('XactlyCorp__XactlyUserBusiness__c', None), ('XactlyCorp__XCIncentBusiness__c', None)])
    is_active = models.BooleanField(verbose_name='Active', sf_read_only=models.READ_ONLY, default=models.DefaultedOnCreate(False))
    created_by = models.ForeignKey('salesforce.User', models.DO_NOTHING, related_name='recordtype_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY, default=models.DEFAULTED_ON_CREATE)
    last_modified_by = models.ForeignKey('salesforce.User', models.DO_NOTHING, related_name='recordtype_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY, default=models.DEFAULTED_ON_CREATE)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, default=models.DEFAULTED_ON_CREATE)
    class Meta(models.Model.Meta):
        db_table = 'RecordType'
        verbose_name = 'Record Type'
        verbose_name_plural = 'Record Types'
        # keyPrefix = '012'


class User(models.Model):
    username = models.CharField(max_length=80)
    last_name = models.CharField(max_length=80)
    first_name = models.CharField(max_length=40, blank=True, null=True)
    name = models.CharField(max_length=121, verbose_name='Full Name', sf_read_only=models.READ_ONLY)
    company_name = models.CharField(max_length=80, blank=True, null=True)
    division = models.CharField(max_length=80, blank=True, null=True)
    department = models.CharField(max_length=80, blank=True, null=True)
    title = models.CharField(max_length=80, blank=True, null=True)
    street = models.TextField(blank=True, null=True)
    city = models.CharField(max_length=40, blank=True, null=True)
    state = models.CharField(max_length=80, verbose_name='State/Province', blank=True, null=True)
    postal_code = models.CharField(max_length=20, verbose_name='Zip/Postal Code', blank=True, null=True)
    country = models.CharField(max_length=80, blank=True, null=True)
    state_code = models.CharField(max_length=10, verbose_name='State/Province Code', choices=[('AL', 'Alabama'), ('AK', 'Alaska'), ('AB', 'Alberta'), ('AZ', 'Arizona'), ('AR', 'Arkansas'), ('BC', 'British Columbia'), ('CA', 'California'), ('CO', 'Colorado'), ('CT', 'Connecticut'), ('DE', 'Delaware'), ('DC', 'District of Columbia'), ('FL', 'Florida'), ('GA', 'Georgia'), ('GU', 'Guam'), ('HI', 'Hawaii'), ('ID', 'Idaho'), ('IL', 'Illinois'), ('IN', 'Indiana'), ('IA', 'Iowa'), ('KS', 'Kansas'), ('KY', 'Kentucky'), ('LA', 'Louisiana'), ('ME', 'Maine'), ('MB', 'Manitoba'), ('MD', 'Maryland'), ('MA', 'Massachusetts'), ('MI', 'Michigan'), ('MN', 'Minnesota'), ('MS', 'Mississippi'), ('MO', 'Missouri'), ('MT', 'Montana'), ('NE', 'Nebraska'), ('NV', 'Nevada'), ('NB', 'New Brunswick'), ('NL', 'Newfoundland and Labrador'), ('NH', 'New Hampshire'), ('NJ', 'New Jersey'), ('NM', 'New Mexico'), ('NY', 'New York'), ('NC', 'North Carolina'), ('ND', 'North Dakota'), ('NT', 'Northwest Territories'), ('NS', 'Nova Scotia'), ('NU', 'Nunavut'), ('OH', 'Ohio'), ('OK', 'Oklahoma'), ('ON', 'Ontario'), ('OR', 'Oregon'), ('PA', 'Pennsylvania'), ('PE', 'Prince Edward Island'), ('PR', 'Puerto Rico'), ('QC', 'Quebec'), ('RI', 'Rhode Island'), ('SK', 'Saskatchewan'), ('SC', 'South Carolina'), ('SD', 'South Dakota'), ('TN', 'Tennessee'), ('TX', 'Texas'), ('VI', 'US Virgin Islands'), ('UT', 'Utah'), ('VT', 'Vermont'), ('VA', 'Virginia'), ('WA', 'Washington'), ('WV', 'West Virginia'), ('WI', 'Wisconsin'), ('WY', 'Wyoming'), ('YT', 'Yukon Territories')], blank=True, null=True)
    country_code = models.CharField(max_length=10, default=models.DefaultedOnCreate('US'), choices=[('CA', 'Canada'), ('US', 'United States')], blank=True, null=True)
    latitude = models.DecimalField(max_digits=18, decimal_places=15, blank=True, null=True)
    longitude = models.DecimalField(max_digits=18, decimal_places=15, blank=True, null=True)
    geocode_accuracy = models.CharField(max_length=40, choices=[('Address', 'Address'), ('NearAddress', 'NearAddress'), ('Block', 'Block'), ('Street', 'Street'), ('ExtendedZip', 'ExtendedZip'), ('Zip', 'Zip'), ('Neighborhood', 'Neighborhood'), ('City', 'City'), ('County', 'County'), ('State', 'State'), ('Unknown', 'Unknown')], blank=True, null=True)
    address = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)  # This field type is a guess.
    email = models.EmailField()
    email_preferences_auto_bcc = models.BooleanField(verbose_name='AutoBcc')
    email_preferences_auto_bcc_stay_in_touch = models.BooleanField(verbose_name='AutoBccStayInTouch')
    email_preferences_stay_in_touch_reminder = models.BooleanField(verbose_name='StayInTouchReminder')
    sender_email = models.EmailField(verbose_name='Email Sender Address', blank=True, null=True)
    sender_name = models.CharField(max_length=80, verbose_name='Email Sender Name', blank=True, null=True)
    signature = models.TextField(verbose_name='Email Signature', blank=True, null=True)
    stay_in_touch_subject = models.CharField(max_length=80, verbose_name='Stay-in-Touch Email Subject', blank=True, null=True)
    stay_in_touch_signature = models.TextField(verbose_name='Stay-in-Touch Email Signature', blank=True, null=True)
    stay_in_touch_note = models.CharField(max_length=512, verbose_name='Stay-in-Touch Email Note', blank=True, null=True)
    phone = models.CharField(max_length=40, blank=True, null=True)
    fax = models.CharField(max_length=40, blank=True, null=True)
    mobile_phone = models.CharField(max_length=40, verbose_name='Mobile', blank=True, null=True)
    alias = models.CharField(max_length=8)
    community_nickname = models.CharField(max_length=40, verbose_name='Nickname')
    badge_text = models.CharField(max_length=80, verbose_name='User Photo badge text overlay', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_active = models.BooleanField(verbose_name='Active', default=models.DefaultedOnCreate(False))
    time_zone_sid_key = models.CharField(max_length=40, verbose_name='Time Zone', choices=[('Pacific/Kiritimati', '(GMT+14:00) Line Islands Time (Pacific/Kiritimati)'), ('Pacific/Chatham', '(GMT+13:45) Chatham Daylight Time (Pacific/Chatham)'), ('Pacific/Auckland', '(GMT+13:00) New Zealand Daylight Time (Pacific/Auckland)'), ('Pacific/Enderbury', '(GMT+13:00) Phoenix Islands Time (Pacific/Enderbury)'), ('Pacific/Tongatapu', '(GMT+13:00) Tonga Standard Time (Pacific/Tongatapu)'), ('Asia/Kamchatka', '(GMT+12:00) Petropavlovsk-Kamchatski Standard Time (Asia/Kamchatka)'), ('Pacific/Fiji', '(GMT+12:00) Fiji Standard Time (Pacific/Fiji)'), ('Pacific/Norfolk', '(GMT+12:00) Norfolk Island Time (Pacific/Norfolk)'), ('Australia/Lord_Howe', '(GMT+11:00) Lord Howe Daylight Time (Australia/Lord_Howe)'), ('Australia/Sydney', '(GMT+11:00) Australian Eastern Daylight Time (Australia/Sydney)'), ('Pacific/Guadalcanal', '(GMT+11:00) Solomon Islands Time (Pacific/Guadalcanal)'), ('Australia/Adelaide', '(GMT+10:30) Australian Central Daylight Time (Australia/Adelaide)'), ('Australia/Brisbane', '(GMT+10:00) Australian Eastern Standard Time (Australia/Brisbane)'), ('Australia/Darwin', '(GMT+09:30) Australian Central Standard Time (Australia/Darwin)'), ('Asia/Seoul', '(GMT+09:00) Korean Standard Time (Asia/Seoul)'), ('Asia/Tokyo', '(GMT+09:00) Japan Standard Time (Asia/Tokyo)'), ('Asia/Hong_Kong', '(GMT+08:00) Hong Kong Standard Time (Asia/Hong_Kong)'), ('Asia/Kuala_Lumpur', '(GMT+08:00) Malaysia Time (Asia/Kuala_Lumpur)'), ('Asia/Manila', '(GMT+08:00) Philippine Standard Time (Asia/Manila)'), ('Asia/Shanghai', '(GMT+08:00) China Standard Time (Asia/Shanghai)'), ('Asia/Singapore', '(GMT+08:00) Singapore Standard Time (Asia/Singapore)'), ('Asia/Taipei', '(GMT+08:00) Taipei Standard Time (Asia/Taipei)'), ('Australia/Perth', '(GMT+08:00) Australian Western Standard Time (Australia/Perth)'), ('Asia/Bangkok', '(GMT+07:00) Indochina Time (Asia/Bangkok)'), ('Asia/Ho_Chi_Minh', '(GMT+07:00) Indochina Time (Asia/Ho_Chi_Minh)'), ('Asia/Jakarta', '(GMT+07:00) Western Indonesia Time (Asia/Jakarta)'), ('Asia/Rangoon', '(GMT+06:30) Myanmar Time (Asia/Rangoon)'), ('Asia/Dhaka', '(GMT+06:00) Bangladesh Standard Time (Asia/Dhaka)'), ('Asia/Kathmandu', '(GMT+05:45) Nepal Time (Asia/Kathmandu)'), ('Asia/Colombo', '(GMT+05:30) India Standard Time (Asia/Colombo)'), ('Asia/Kolkata', '(GMT+05:30) India Standard Time (Asia/Kolkata)'), ('Asia/Karachi', '(GMT+05:00) Pakistan Standard Time (Asia/Karachi)'), ('Asia/Tashkent', '(GMT+05:00) Uzbekistan Standard Time (Asia/Tashkent)'), ('Asia/Yekaterinburg', '(GMT+05:00) Yekaterinburg Standard Time (Asia/Yekaterinburg)'), ('Asia/Kabul', '(GMT+04:30) Afghanistan Time (Asia/Kabul)'), ('Asia/Tehran', '(GMT+04:30) Iran Daylight Time (Asia/Tehran)'), ('Asia/Baku', '(GMT+04:00) Azerbaijan Standard Time (Asia/Baku)'), ('Asia/Dubai', '(GMT+04:00) Gulf Standard Time (Asia/Dubai)'), ('Asia/Tbilisi', '(GMT+04:00) Georgia Standard Time (Asia/Tbilisi)'), ('Asia/Yerevan', '(GMT+04:00) Armenia Standard Time (Asia/Yerevan)'), ('Africa/Nairobi', '(GMT+03:00) East Africa Time (Africa/Nairobi)'), ('Asia/Baghdad', '(GMT+03:00) Arabian Standard Time (Asia/Baghdad)'), ('Asia/Kuwait', '(GMT+03:00) Arabian Standard Time (Asia/Kuwait)'), ('Asia/Riyadh', '(GMT+03:00) Arabian Standard Time (Asia/Riyadh)'), ('Europe/Istanbul', '(GMT+03:00) Europe/Istanbul'), ('Europe/Minsk', '(GMT+03:00) Moscow Standard Time (Europe/Minsk)'), ('Europe/Moscow', '(GMT+03:00) Moscow Standard Time (Europe/Moscow)'), ('Africa/Cairo', '(GMT+02:00) Eastern European Standard Time (Africa/Cairo)'), ('Africa/Johannesburg', '(GMT+02:00) South Africa Standard Time (Africa/Johannesburg)'), ('Asia/Beirut', '(GMT+02:00) Eastern European Standard Time (Asia/Beirut)'), ('Asia/Jerusalem', '(GMT+02:00) Israel Standard Time (Asia/Jerusalem)'), ('Europe/Athens', '(GMT+02:00) Eastern European Standard Time (Europe/Athens)'), ('Europe/Bucharest', '(GMT+02:00) Eastern European Standard Time (Europe/Bucharest)'), ('Europe/Helsinki', '(GMT+02:00) Eastern European Standard Time (Europe/Helsinki)'), ('Africa/Algiers', '(GMT+01:00) Central European Standard Time (Africa/Algiers)'), ('Africa/Casablanca', '(GMT+01:00) Africa/Casablanca'), ('Europe/Amsterdam', '(GMT+01:00) Central European Standard Time (Europe/Amsterdam)'), ('Europe/Berlin', '(GMT+01:00) Central European Standard Time (Europe/Berlin)'), ('Europe/Brussels', '(GMT+01:00) Central European Standard Time (Europe/Brussels)'), ('Europe/Paris', '(GMT+01:00) Central European Standard Time (Europe/Paris)'), ('Europe/Prague', '(GMT+01:00) Central European Standard Time (Europe/Prague)'), ('Europe/Rome', '(GMT+01:00) Central European Standard Time (Europe/Rome)'), ('Europe/Dublin', '(GMT+00:00) Greenwich Mean Time (Europe/Dublin)'), ('Europe/Lisbon', '(GMT+00:00) Western European Standard Time (Europe/Lisbon)'), ('Europe/London', '(GMT+00:00) Greenwich Mean Time (Europe/London)'), ('GMT', '(GMT+00:00) Greenwich Mean Time (GMT)'), ('America/Scoresbysund', '(GMT-01:00) East Greenland Standard Time (America/Scoresbysund)'), ('Atlantic/Azores', '(GMT-01:00) Azores Standard Time (Atlantic/Azores)'), ('Atlantic/Cape_Verde', '(GMT-01:00) Cape Verde Standard Time (Atlantic/Cape_Verde)'), ('Atlantic/South_Georgia', '(GMT-02:00) South Georgia Time (Atlantic/South_Georgia)'), ('America/St_Johns', '(GMT-02:30) Newfoundland Daylight Time (America/St_Johns)'), ('America/Argentina/Buenos_Aires', '(GMT-03:00) Argentina Standard Time (America/Argentina/Buenos_Aires)'), ('America/Halifax', '(GMT-03:00) Atlantic Daylight Time (America/Halifax)'), ('America/Santiago', '(GMT-03:00) Chile Summer Time (America/Santiago)'), ('America/Sao_Paulo', '(GMT-03:00) Brasilia Standard Time (America/Sao_Paulo)'), ('Atlantic/Bermuda', '(GMT-03:00) Atlantic Daylight Time (Atlantic/Bermuda)'), ('America/Caracas', '(GMT-04:00) Venezuela Time (America/Caracas)'), ('America/Indiana/Indianapolis', '(GMT-04:00) Eastern Daylight Time (America/Indiana/Indianapolis)'), ('America/New_York', '(GMT-04:00) Eastern Daylight Time (America/New_York)'), ('America/Puerto_Rico', '(GMT-04:00) Atlantic Standard Time (America/Puerto_Rico)'), ('America/Bogota', '(GMT-05:00) Colombia Standard Time (America/Bogota)'), ('America/Chicago', '(GMT-05:00) Central Daylight Time (America/Chicago)'), ('America/Lima', '(GMT-05:00) Peru Standard Time (America/Lima)'), ('America/Panama', '(GMT-05:00) Eastern Standard Time (America/Panama)'), ('America/Denver', '(GMT-06:00) Mountain Daylight Time (America/Denver)'), ('America/El_Salvador', '(GMT-06:00) Central Standard Time (America/El_Salvador)'), ('America/Mexico_City', '(GMT-06:00) Central Standard Time (America/Mexico_City)'), ('America/Los_Angeles', '(GMT-07:00) Pacific Daylight Time (America/Los_Angeles)'), ('America/Mazatlan', '(GMT-07:00) Mexican Pacific Standard Time (America/Mazatlan)'), ('America/Phoenix', '(GMT-07:00) Mountain Standard Time (America/Phoenix)'), ('America/Tijuana', '(GMT-07:00) Pacific Daylight Time (America/Tijuana)'), ('America/Anchorage', '(GMT-08:00) Alaska Daylight Time (America/Anchorage)'), ('Pacific/Pitcairn', '(GMT-08:00) Pitcairn Time (Pacific/Pitcairn)'), ('America/Adak', '(GMT-09:00) Hawaii-Aleutian Daylight Time (America/Adak)'), ('Pacific/Gambier', '(GMT-09:00) Gambier Time (Pacific/Gambier)'), ('Pacific/Marquesas', '(GMT-09:30) Marquesas Time (Pacific/Marquesas)'), ('Pacific/Honolulu', '(GMT-10:00) Hawaii-Aleutian Standard Time (Pacific/Honolulu)'), ('Pacific/Niue', '(GMT-11:00) Niue Time (Pacific/Niue)'), ('Pacific/Pago_Pago', '(GMT-11:00) Samoa Standard Time (Pacific/Pago_Pago)')])
    user_role = models.ForeignKey('UserRole', models.DO_NOTHING, blank=True, null=True)
    locale_sid_key = models.CharField(max_length=40, verbose_name='Locale', choices=[('af_ZA', 'Afrikaans (South Africa)'), ('sq_AL', 'Albanian (Albania)'), ('ar_DZ', 'Arabic (Algeria)'), ('ar_BH', 'Arabic (Bahrain)'), ('ar_EG', 'Arabic (Egypt)'), ('ar_IQ', 'Arabic (Iraq)'), ('ar_JO', 'Arabic (Jordan)'), ('ar_KW', 'Arabic (Kuwait)'), ('ar_LB', 'Arabic (Lebanon)'), ('ar_LY', 'Arabic (Libya)'), ('ar_MA', 'Arabic (Morocco)'), ('ar_OM', 'Arabic (Oman)'), ('ar_QA', 'Arabic (Qatar)'), ('ar_SA', 'Arabic (Saudi Arabia)'), ('ar_SD', 'Arabic (Sudan)'), ('ar_SY', 'Arabic (Syria)'), ('ar_TN', 'Arabic (Tunisia)'), ('ar_AE', 'Arabic (United Arab Emirates)'), ('ar_YE', 'Arabic (Yemen)'), ('hy_AM', 'Armenian (Armenia)'), ('az_AZ', 'Azerbaijani (Azerbaijan)'), ('bn_BD', 'Bangla (Bangladesh)'), ('bn_IN', 'Bangla (India)'), ('eu_ES', 'Basque (Spain)'), ('be_BY', 'Belarusian (Belarus)'), ('bs_BA', 'Bosnian (Bosnia & Herzegovina)'), ('bg_BG', 'Bulgarian (Bulgaria)'), ('my_MM', 'Burmese (Myanmar (Burma))'), ('ca_ES', 'Catalan (Spain)'), ('zh_CN_PINYIN', 'Chinese (China, Pinyin Ordering)'), ('zh_CN_STROKE', 'Chinese (China, Stroke Ordering)'), ('zh_CN', 'Chinese (China)'), ('zh_HK_STROKE', 'Chinese (Hong Kong SAR China, Stroke Ordering)'), ('zh_HK', 'Chinese (Hong Kong SAR China)'), ('zh_MO', 'Chinese (Macao SAR China)'), ('zh_SG', 'Chinese (Singapore)'), ('zh_TW_STROKE', 'Chinese (Taiwan, Stroke Ordering)'), ('zh_TW', 'Chinese (Taiwan)'), ('hr_HR', 'Croatian (Croatia)'), ('cs_CZ', 'Czech (Czechia)'), ('da_DK', 'Danish (Denmark)'), ('nl_AW', 'Dutch (Aruba)'), ('nl_BE', 'Dutch (Belgium)'), ('nl_NL', 'Dutch (Netherlands)'), ('nl_SR', 'Dutch (Suriname)'), ('dz_BT', 'Dzongkha (Bhutan)'), ('en_AG', 'English (Antigua & Barbuda)'), ('en_AU', 'English (Australia)'), ('en_BS', 'English (Bahamas)'), ('en_BB', 'English (Barbados)'), ('en_BZ', 'English (Belize)'), ('en_BM', 'English (Bermuda)'), ('en_BW', 'English (Botswana)'), ('en_CM', 'English (Cameroon)'), ('en_CA', 'English (Canada)'), ('en_KY', 'English (Cayman Islands)'), ('en_ER', 'English (Eritrea)'), ('en_SZ', 'English (Eswatini)'), ('en_FK', 'English (Falkland Islands)'), ('en_FJ', 'English (Fiji)'), ('en_GM', 'English (Gambia)'), ('en_GH', 'English (Ghana)'), ('en_GI', 'English (Gibraltar)'), ('en_GY', 'English (Guyana)'), ('en_HK', 'English (Hong Kong SAR China)'), ('en_IN', 'English (India)'), ('en_ID', 'English (Indonesia)'), ('en_IE', 'English (Ireland)'), ('en_JM', 'English (Jamaica)'), ('en_KE', 'English (Kenya)'), ('en_LR', 'English (Liberia)'), ('en_MG', 'English (Madagascar)'), ('en_MW', 'English (Malawi)'), ('en_MY', 'English (Malaysia)'), ('en_MU', 'English (Mauritius)'), ('en_NA', 'English (Namibia)'), ('en_NZ', 'English (New Zealand)'), ('en_NG', 'English (Nigeria)'), ('en_PK', 'English (Pakistan)'), ('en_PG', 'English (Papua New Guinea)'), ('en_PH', 'English (Philippines)'), ('en_RW', 'English (Rwanda)'), ('en_WS', 'English (Samoa)'), ('en_SC', 'English (Seychelles)'), ('en_SL', 'English (Sierra Leone)'), ('en_SG', 'English (Singapore)'), ('en_SX', 'English (Sint Maarten)'), ('en_SB', 'English (Solomon Islands)'), ('en_ZA', 'English (South Africa)'), ('en_SH', 'English (St. Helena)'), ('en_TZ', 'English (Tanzania)'), ('en_TO', 'English (Tonga)'), ('en_TT', 'English (Trinidad & Tobago)'), ('en_UG', 'English (Uganda)'), ('en_GB', 'English (United Kingdom)'), ('en_US', 'English (United States)'), ('en_VU', 'English (Vanuatu)'), ('et_EE', 'Estonian (Estonia)'), ('fi_FI', 'Finnish (Finland)'), ('fr_BE', 'French (Belgium)'), ('fr_CA', 'French (Canada)'), ('fr_KM', 'French (Comoros)'), ('fr_FR', 'French (France)'), ('fr_GN', 'French (Guinea)'), ('fr_HT', 'French (Haiti)'), ('fr_LU', 'French (Luxembourg)'), ('fr_MR', 'French (Mauritania)'), ('fr_MC', 'French (Monaco)'), ('fr_CH', 'French (Switzerland)'), ('fr_WF', 'French (Wallis & Futuna)'), ('ka_GE', 'Georgian (Georgia)'), ('de_AT', 'German (Austria)'), ('de_BE', 'German (Belgium)'), ('de_DE', 'German (Germany)'), ('de_LU', 'German (Luxembourg)'), ('de_CH', 'German (Switzerland)'), ('el_GR', 'Greek (Greece)'), ('gu_IN', 'Gujarati (India)'), ('iw_IL', 'Hebrew (Israel)'), ('hi_IN', 'Hindi (India)'), ('hu_HU', 'Hungarian (Hungary)'), ('is_IS', 'Icelandic (Iceland)'), ('in_ID', 'Indonesian (Indonesia)'), ('ga_IE', 'Irish (Ireland)'), ('it_IT', 'Italian (Italy)'), ('it_CH', 'Italian (Switzerland)'), ('ja_JP', 'Japanese (Japan)'), ('kn_IN', 'Kannada (India)'), ('kk_KZ', 'Kazakh (Kazakhstan)'), ('km_KH', 'Khmer (Cambodia)'), ('ko_KP', 'Korean (North Korea)'), ('ko_KR', 'Korean (South Korea)'), ('ky_KG', 'Kyrgyz (Kyrgyzstan)'), ('lo_LA', 'Lao (Laos)'), ('lv_LV', 'Latvian (Latvia)'), ('lt_LT', 'Lithuanian (Lithuania)'), ('lu_CD', 'Luba-Katanga (Congo - Kinshasa)'), ('lb_LU', 'Luxembourgish (Luxembourg)'), ('mk_MK', 'Macedonian (North Macedonia)'), ('ms_BN', 'Malay (Brunei)'), ('ms_MY', 'Malay (Malaysia)'), ('ml_IN', 'Malayalam (India)'), ('mt_MT', 'Maltese (Malta)'), ('mi_NZ', 'Maori (New Zealand)'), ('mr_IN', 'Marathi (India)'), ('sh_ME_USD', 'Montenegrin (Montenegro, USD)'), ('sh_ME', 'Montenegrin (Montenegro)'), ('ne_NP', 'Nepali (Nepal)'), ('no_NO', 'Norwegian (Norway)'), ('ps_AF', 'Pashto (Afghanistan)'), ('fa_IR', 'Persian (Iran)'), ('pl_PL', 'Polish (Poland)'), ('pt_AO', 'Portuguese (Angola)'), ('pt_BR', 'Portuguese (Brazil)'), ('pt_CV', 'Portuguese (Cape Verde)'), ('pt_MZ', 'Portuguese (Mozambique)'), ('pt_PT', 'Portuguese (Portugal)'), ('pt_ST', 'Portuguese (São Tomé & Príncipe)'), ('ro_MD', 'Romanian (Moldova)'), ('ro_RO', 'Romanian (Romania)'), ('rm_CH', 'Romansh (Switzerland)'), ('rn_BI', 'Rundi (Burundi)'), ('ru_KZ', 'Russian (Kazakhstan)'), ('ru_RU', 'Russian (Russia)'), ('sr_BA', 'Serbian (Cyrillic) (Bosnia and Herzegovina)'), ('sr_CS', 'Serbian (Cyrillic) (Serbia)'), ('sh_BA', 'Serbian (Latin) (Bosnia and Herzegovina)'), ('sh_CS', 'Serbian (Latin) (Serbia)'), ('sr_RS', 'Serbian (Serbia)'), ('sk_SK', 'Slovak (Slovakia)'), ('sl_SI', 'Slovenian (Slovenia)'), ('so_DJ', 'Somali (Djibouti)'), ('so_SO', 'Somali (Somalia)'), ('es_AR', 'Spanish (Argentina)'), ('es_BO', 'Spanish (Bolivia)'), ('es_CL', 'Spanish (Chile)'), ('es_CO', 'Spanish (Colombia)'), ('es_CR', 'Spanish (Costa Rica)'), ('es_CU', 'Spanish (Cuba)'), ('es_DO', 'Spanish (Dominican Republic)'), ('es_EC', 'Spanish (Ecuador)'), ('es_SV', 'Spanish (El Salvador)'), ('es_GT', 'Spanish (Guatemala)'), ('es_HN', 'Spanish (Honduras)'), ('es_MX', 'Spanish (Mexico)'), ('es_NI', 'Spanish (Nicaragua)'), ('es_PA', 'Spanish (Panama)'), ('es_PY', 'Spanish (Paraguay)'), ('es_PE', 'Spanish (Peru)'), ('es_PR', 'Spanish (Puerto Rico)'), ('es_ES', 'Spanish (Spain)'), ('es_US', 'Spanish (United States)'), ('es_UY', 'Spanish (Uruguay)'), ('es_VE', 'Spanish (Venezuela)'), ('sw_KE', 'Swahili (Kenya)'), ('sv_SE', 'Swedish (Sweden)'), ('tl_PH', 'Tagalog (Philippines)'), ('tg_TJ', 'Tajik (Tajikistan)'), ('ta_IN', 'Tamil (India)'), ('ta_LK', 'Tamil (Sri Lanka)'), ('te_IN', 'Telugu (India)'), ('th_TH', 'Thai (Thailand)'), ('ti_ET', 'Tigrinya (Ethiopia)'), ('tr_TR', 'Turkish (Turkey)'), ('uk_UA', 'Ukrainian (Ukraine)'), ('ur_PK', 'Urdu (Pakistan)'), ('uz_LATN_UZ', 'Uzbek (LATN,UZ)'), ('vi_VN', 'Vietnamese (Vietnam)'), ('cy_GB', 'Welsh (United Kingdom)'), ('xh_ZA', 'Xhosa (South Africa)'), ('yo_BJ', 'Yoruba (Benin)'), ('zu_ZA', 'Zulu (South Africa)')])
    receives_info_emails = models.BooleanField(verbose_name='Info Emails', default=models.DefaultedOnCreate(False))
    receives_admin_info_emails = models.BooleanField(verbose_name='Admin Info Emails', default=models.DefaultedOnCreate(False))
    email_encoding_key = models.CharField(max_length=40, verbose_name='Email Encoding', choices=[('UTF-8', 'Unicode (UTF-8)'), ('ISO-8859-1', 'General US & Western Europe (ISO-8859-1, ISO-LATIN-1)'), ('Shift_JIS', 'Japanese (Shift-JIS)'), ('ISO-2022-JP', 'Japanese (JIS)'), ('EUC-JP', 'Japanese (EUC)'), ('ks_c_5601-1987', 'Korean (ks_c_5601-1987)'), ('Big5', 'Traditional Chinese (Big5)'), ('GB2312', 'Simplified Chinese (GB2312)'), ('Big5-HKSCS', 'Traditional Chinese Hong Kong (Big5-HKSCS)'), ('x-SJIS_0213', 'Japanese (Shift-JIS_2004)')])
    profile = models.ForeignKey(Profile, models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    user_type = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Standard', 'Standard'), ('PowerPartner', 'Partner'), ('PowerCustomerSuccess', 'Customer Portal Manager'), ('CustomerSuccess', 'Customer Portal User'), ('Guest', 'Guest'), ('CspLitePortal', 'High Volume Portal'), ('CsnOnly', 'CSN Only'), ('SelfService', 'Self Service')], blank=True, null=True)
    language_locale_key = models.CharField(max_length=40, verbose_name='Language', choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')])
    employee_number = models.CharField(max_length=20, blank=True, null=True)
    delegated_approver = models.ForeignKey(Group, models.DO_NOTHING, blank=True, null=True)  # Reference to tables [Group, User]
    manager = models.ForeignKey('self', models.DO_NOTHING, related_name='user_manager_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_login_date = models.DateTimeField(verbose_name='Last Login', sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY, default=models.DEFAULTED_ON_CREATE)
    created_by = models.ForeignKey('self', models.DO_NOTHING, related_name='user_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY, default=models.DEFAULTED_ON_CREATE)
    last_modified_by = models.ForeignKey('self', models.DO_NOTHING, related_name='user_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, default=models.DEFAULTED_ON_CREATE)
    offline_trial_expiration_date = models.DateTimeField(verbose_name='Offline Edition Trial Expiration Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    offline_pda_trial_expiration_date = models.DateTimeField(verbose_name='Sales Anywhere Trial Expiration Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    user_permissions_marketing_user = models.BooleanField(verbose_name='Marketing User', sf_read_only=models.READ_ONLY)
    user_permissions_offline_user = models.BooleanField(verbose_name='Offline User', sf_read_only=models.READ_ONLY)
    user_permissions_avantgo_user = models.BooleanField(verbose_name='AvantGo User', sf_read_only=models.READ_ONLY)
    user_permissions_call_center_auto_login = models.BooleanField(verbose_name='Auto-login To Call Center')
    user_permissions_mobile_user = models.BooleanField(verbose_name='Apex Mobile User', sf_read_only=models.READ_ONLY)
    user_permissions_sfcontent_user = models.BooleanField(db_column='UserPermissionsSFContentUser', verbose_name='Salesforce CRM Content User', sf_read_only=models.READ_ONLY)
    user_permissions_knowledge_user = models.BooleanField(verbose_name='Knowledge User', sf_read_only=models.READ_ONLY)
    user_permissions_interaction_user = models.BooleanField(verbose_name='Flow User', sf_read_only=models.READ_ONLY)
    user_permissions_support_user = models.BooleanField(verbose_name='Service Cloud User', sf_read_only=models.READ_ONLY)
    user_permissions_live_agent_user = models.BooleanField(verbose_name='Chat User', sf_read_only=models.READ_ONLY)
    user_permissions_chatter_answers_user = models.BooleanField(verbose_name='Chatter Answers User', sf_read_only=models.READ_ONLY)
    forecast_enabled = models.BooleanField(verbose_name='Allow Forecasting', default=models.DefaultedOnCreate(False))
    user_preferences_activity_reminders_popup = models.BooleanField(verbose_name='ActivityRemindersPopup')
    user_preferences_event_reminders_checkbox_default = models.BooleanField(verbose_name='EventRemindersCheckboxDefault')
    user_preferences_task_reminders_checkbox_default = models.BooleanField(verbose_name='TaskRemindersCheckboxDefault')
    user_preferences_reminder_sound_off = models.BooleanField(verbose_name='ReminderSoundOff')
    user_preferences_disable_all_feeds_email = models.BooleanField(verbose_name='DisableAllFeedsEmail')
    user_preferences_disable_followers_email = models.BooleanField(verbose_name='DisableFollowersEmail')
    user_preferences_disable_profile_post_email = models.BooleanField(verbose_name='DisableProfilePostEmail')
    user_preferences_disable_change_comment_email = models.BooleanField(verbose_name='DisableChangeCommentEmail')
    user_preferences_disable_later_comment_email = models.BooleanField(verbose_name='DisableLaterCommentEmail')
    user_preferences_dis_prof_post_comment_email = models.BooleanField(verbose_name='DisProfPostCommentEmail')
    user_preferences_content_no_email = models.BooleanField(verbose_name='ContentNoEmail')
    user_preferences_content_email_as_and_when = models.BooleanField(verbose_name='ContentEmailAsAndWhen')
    user_preferences_apex_pages_developer_mode = models.BooleanField(verbose_name='ApexPagesDeveloperMode')
    user_preferences_receive_no_notifications_as_approver = models.BooleanField(verbose_name='ReceiveNoNotificationsAsApprover')
    user_preferences_receive_notifications_as_delegated_approver = models.BooleanField(verbose_name='ReceiveNotificationsAsDelegatedApprover')
    user_preferences_hide_csnget_chatter_mobile_task = models.BooleanField(db_column='UserPreferencesHideCSNGetChatterMobileTask', verbose_name='HideCSNGetChatterMobileTask')
    user_preferences_disable_mentions_post_email = models.BooleanField(verbose_name='DisableMentionsPostEmail')
    user_preferences_dis_mentions_comment_email = models.BooleanField(verbose_name='DisMentionsCommentEmail')
    user_preferences_hide_csndesktop_task = models.BooleanField(db_column='UserPreferencesHideCSNDesktopTask', verbose_name='HideCSNDesktopTask')
    user_preferences_hide_chatter_onboarding_splash = models.BooleanField(verbose_name='HideChatterOnboardingSplash')
    user_preferences_hide_second_chatter_onboarding_splash = models.BooleanField(verbose_name='HideSecondChatterOnboardingSplash')
    user_preferences_dis_comment_after_like_email = models.BooleanField(verbose_name='DisCommentAfterLikeEmail')
    user_preferences_disable_like_email = models.BooleanField(verbose_name='DisableLikeEmail')
    user_preferences_sort_feed_by_comment = models.BooleanField(verbose_name='SortFeedByComment')
    user_preferences_disable_message_email = models.BooleanField(verbose_name='DisableMessageEmail')
    user_preferences_disable_bookmark_email = models.BooleanField(verbose_name='DisableBookmarkEmail')
    user_preferences_disable_share_post_email = models.BooleanField(verbose_name='DisableSharePostEmail')
    user_preferences_enable_auto_sub_for_feeds = models.BooleanField(verbose_name='EnableAutoSubForFeeds')
    user_preferences_disable_file_share_notifications_for_api = models.BooleanField(verbose_name='DisableFileShareNotificationsForApi')
    user_preferences_show_title_to_external_users = models.BooleanField(verbose_name='ShowTitleToExternalUsers')
    user_preferences_show_manager_to_external_users = models.BooleanField(verbose_name='ShowManagerToExternalUsers')
    user_preferences_show_email_to_external_users = models.BooleanField(verbose_name='ShowEmailToExternalUsers')
    user_preferences_show_work_phone_to_external_users = models.BooleanField(verbose_name='ShowWorkPhoneToExternalUsers')
    user_preferences_show_mobile_phone_to_external_users = models.BooleanField(verbose_name='ShowMobilePhoneToExternalUsers')
    user_preferences_show_fax_to_external_users = models.BooleanField(verbose_name='ShowFaxToExternalUsers')
    user_preferences_show_street_address_to_external_users = models.BooleanField(verbose_name='ShowStreetAddressToExternalUsers')
    user_preferences_show_city_to_external_users = models.BooleanField(verbose_name='ShowCityToExternalUsers')
    user_preferences_show_state_to_external_users = models.BooleanField(verbose_name='ShowStateToExternalUsers')
    user_preferences_show_postal_code_to_external_users = models.BooleanField(verbose_name='ShowPostalCodeToExternalUsers')
    user_preferences_show_country_to_external_users = models.BooleanField(verbose_name='ShowCountryToExternalUsers')
    user_preferences_show_profile_pic_to_guest_users = models.BooleanField(verbose_name='ShowProfilePicToGuestUsers')
    user_preferences_show_title_to_guest_users = models.BooleanField(verbose_name='ShowTitleToGuestUsers')
    user_preferences_show_city_to_guest_users = models.BooleanField(verbose_name='ShowCityToGuestUsers')
    user_preferences_show_state_to_guest_users = models.BooleanField(verbose_name='ShowStateToGuestUsers')
    user_preferences_show_postal_code_to_guest_users = models.BooleanField(verbose_name='ShowPostalCodeToGuestUsers')
    user_preferences_show_country_to_guest_users = models.BooleanField(verbose_name='ShowCountryToGuestUsers')
    user_preferences_pipeline_view_hide_help_popover = models.BooleanField(verbose_name='PipelineViewHideHelpPopover')
    user_preferences_hide_s1_browser_ui = models.BooleanField(db_column='UserPreferencesHideS1BrowserUI', verbose_name='HideS1BrowserUI')
    user_preferences_disable_endorsement_email = models.BooleanField(verbose_name='DisableEndorsementEmail')
    user_preferences_path_assistant_collapsed = models.BooleanField(verbose_name='PathAssistantCollapsed')
    user_preferences_cache_diagnostics = models.BooleanField(verbose_name='CacheDiagnostics')
    user_preferences_show_email_to_guest_users = models.BooleanField(verbose_name='ShowEmailToGuestUsers')
    user_preferences_show_manager_to_guest_users = models.BooleanField(verbose_name='ShowManagerToGuestUsers')
    user_preferences_show_work_phone_to_guest_users = models.BooleanField(verbose_name='ShowWorkPhoneToGuestUsers')
    user_preferences_show_mobile_phone_to_guest_users = models.BooleanField(verbose_name='ShowMobilePhoneToGuestUsers')
    user_preferences_show_fax_to_guest_users = models.BooleanField(verbose_name='ShowFaxToGuestUsers')
    user_preferences_show_street_address_to_guest_users = models.BooleanField(verbose_name='ShowStreetAddressToGuestUsers')
    user_preferences_lightning_experience_preferred = models.BooleanField(verbose_name='LightningExperiencePreferred')
    user_preferences_hide_end_user_onboarding_assistant_modal = models.BooleanField(verbose_name='HideEndUserOnboardingAssistantModal')
    user_preferences_hide_lightning_migration_modal = models.BooleanField(verbose_name='HideLightningMigrationModal')
    user_preferences_hide_sfx_welcome_mat = models.BooleanField(verbose_name='HideSfxWelcomeMat')
    user_preferences_hide_bigger_photo_callout = models.BooleanField(verbose_name='HideBiggerPhotoCallout')
    user_preferences_global_nav_bar_wtshown = models.BooleanField(db_column='UserPreferencesGlobalNavBarWTShown', verbose_name='GlobalNavBarWTShown')
    user_preferences_global_nav_grid_menu_wtshown = models.BooleanField(db_column='UserPreferencesGlobalNavGridMenuWTShown', verbose_name='GlobalNavGridMenuWTShown')
    user_preferences_create_lexapps_wtshown = models.BooleanField(db_column='UserPreferencesCreateLEXAppsWTShown', verbose_name='CreateLEXAppsWTShown')
    user_preferences_favorites_wtshown = models.BooleanField(db_column='UserPreferencesFavoritesWTShown', verbose_name='FavoritesWTShown')
    user_preferences_record_home_section_collapse_wtshown = models.BooleanField(db_column='UserPreferencesRecordHomeSectionCollapseWTShown', verbose_name='RecordHomeSectionCollapseWTShown')
    user_preferences_record_home_reserved_wtshown = models.BooleanField(db_column='UserPreferencesRecordHomeReservedWTShown', verbose_name='RecordHomeReservedWTShown')
    user_preferences_favorites_show_top_favorites = models.BooleanField(verbose_name='FavoritesShowTopFavorites')
    user_preferences_exclude_mail_app_attachments = models.BooleanField(verbose_name='ExcludeMailAppAttachments')
    user_preferences_suppress_task_sfxreminders = models.BooleanField(db_column='UserPreferencesSuppressTaskSFXReminders', verbose_name='SuppressTaskSFXReminders')
    user_preferences_suppress_event_sfxreminders = models.BooleanField(db_column='UserPreferencesSuppressEventSFXReminders', verbose_name='SuppressEventSFXReminders')
    user_preferences_preview_custom_theme = models.BooleanField(verbose_name='PreviewCustomTheme')
    user_preferences_has_celebration_badge = models.BooleanField(verbose_name='HasCelebrationBadge')
    user_preferences_user_debug_mode_pref = models.BooleanField(verbose_name='UserDebugModePref')
    user_preferences_srhoverride_activities = models.BooleanField(db_column='UserPreferencesSRHOverrideActivities', verbose_name='SRHOverrideActivities')
    user_preferences_new_lightning_report_run_page_enabled = models.BooleanField(verbose_name='NewLightningReportRunPageEnabled')
    account = models.ForeignKey(Account, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    call_center = models.ForeignKey(CallCenter, models.DO_NOTHING, blank=True, null=True)
    extension = models.CharField(max_length=40, blank=True, null=True)
    portal_role = models.CharField(max_length=40, verbose_name='Portal Role Level', choices=[('Executive', 'Executive'), ('Manager', 'Manager'), ('Worker', 'User'), ('PersonAccount', 'Person Account')], blank=True, null=True)
    is_portal_enabled = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, default=models.DefaultedOnCreate(False))
    federation_identifier = models.CharField(max_length=512, verbose_name='SAML Federation ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    about_me = models.TextField(blank=True, null=True)
    full_photo_url = models.URLField(verbose_name='Url for full-sized Photo', sf_read_only=models.READ_ONLY, blank=True, null=True)
    small_photo_url = models.URLField(verbose_name='Photo', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_ext_indicator_visible = models.BooleanField(verbose_name='Show external indicator', sf_read_only=models.READ_ONLY, default=models.DefaultedOnCreate(False))
    out_of_office_message = models.CharField(max_length=40, verbose_name='Out of office message', sf_read_only=models.READ_ONLY, blank=True, null=True)
    medium_photo_url = models.URLField(verbose_name='Url for medium profile photo', sf_read_only=models.READ_ONLY, blank=True, null=True)
    digest_frequency = models.CharField(max_length=40, verbose_name='Chatter Email Highlights Frequency', default=models.DefaultedOnCreate('N'), choices=[('D', 'Daily'), ('W', 'Weekly'), ('N', 'Never')])
    default_group_notification_frequency = models.CharField(max_length=40, verbose_name='Default Notification Frequency when Joining Groups', default=models.DefaultedOnCreate('N'), choices=[('P', 'Email on Each Post'), ('D', 'Daily Digests'), ('W', 'Weekly Digests'), ('N', 'Never')])
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    banner_photo_url = models.URLField(verbose_name='Url for banner photo', sf_read_only=models.READ_ONLY, blank=True, null=True)
    small_banner_photo_url = models.URLField(verbose_name='Url for IOS banner photo', sf_read_only=models.READ_ONLY, blank=True, null=True)
    medium_banner_photo_url = models.URLField(verbose_name='Url for Android banner photo', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_profile_photo_active = models.BooleanField(verbose_name='Has Profile Photo', sf_read_only=models.READ_ONLY, default=models.DefaultedOnCreate(False))
    new_account_setup = models.CharField(custom=True, db_column='New_Account_Setup__c', max_length=255, verbose_name='New Account Setup Region', sf_read_only=models.READ_ONLY, choices=[('East', 'East'), ('Central', 'Central'), ('West', 'West')], blank=True, null=True)
    benefit_region = models.CharField(custom=True, db_column='Benefit_Region__c', max_length=255, verbose_name='Benefit Region', choices=[('West', 'West'), ('Southwest', 'Southwest'), ('Southeast', 'Southeast'), ('East', 'East'), ('Northeast', 'Northeast'), ('National', 'National')], blank=True, null=True)
    hire_date = models.DateField(custom=True, db_column='Hire_Date__c', verbose_name='Hire Date', help_text='Employee Hire Date', blank=True, null=True)
    termination_date = models.DateField(custom=True, db_column='Termination_Date__c', verbose_name='Termination Date', blank=True, null=True)
    mkto_si_is_caching_anon_web_activity_list = models.BooleanField(db_column='mkto_si__IsCachingAnonWebActivityList__c', custom=True, verbose_name='IsCachingAnonWebActivityList', default=models.DefaultedOnCreate(False))
    mkto_si_is_caching_best_bets = models.BooleanField(db_column='mkto_si__IsCachingBestBets__c', custom=True, verbose_name='IsCachingBestBets', default=models.DefaultedOnCreate(False))
    mkto_si_is_caching_email_activity_list = models.BooleanField(db_column='mkto_si__IsCachingEmailActivityList__c', custom=True, verbose_name='IsCachingEmailActivityList', default=models.DefaultedOnCreate(False))
    mkto_si_is_caching_grouped_web_activity_list = models.BooleanField(db_column='mkto_si__IsCachingGroupedWebActivityList__c', custom=True, verbose_name='IsCachingGroupedWebActivityList', default=models.DefaultedOnCreate(False))
    mkto_si_is_caching_interesting_moments_list = models.BooleanField(db_column='mkto_si__IsCachingInterestingMomentsList__c', custom=True, verbose_name='IsCachingInterestingMomentsList', default=models.DefaultedOnCreate(False))
    mkto_si_is_caching_scoring_list = models.BooleanField(db_column='mkto_si__IsCachingScoringList__c', custom=True, verbose_name='IsCachingScoringList', default=models.DefaultedOnCreate(False))
    mkto_si_is_caching_stream_list = models.BooleanField(db_column='mkto_si__IsCachingStreamList__c', custom=True, verbose_name='IsCachingStreamList', default=models.DefaultedOnCreate(False))
    mkto_si_is_caching_watch_list = models.BooleanField(db_column='mkto_si__IsCachingWatchList__c', custom=True, verbose_name='IsCachingWatchList', default=models.DefaultedOnCreate(False))
    mkto_si_is_caching_web_activity_list = models.BooleanField(db_column='mkto_si__IsCachingWebActivityList__c', custom=True, verbose_name='IsCachingWebActivityList', default=models.DefaultedOnCreate(False))
    mkto_si_sales_insight_counter = models.DecimalField(db_column='mkto_si__Sales_Insight_Counter__c', custom=True, max_digits=4, decimal_places=0, verbose_name='Marketo Sales Insight Welcome Counter', default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    payroll_area = models.CharField(custom=True, db_column='Payroll_Area__c', max_length=255, verbose_name='Payroll Area', sf_read_only=models.READ_ONLY, choices=[('APS', 'APS'), ('California', 'California'), ('Florida', 'Florida'), ('Inside Sales NA', 'Inside Sales NA'), ('Inside Sales SB', 'Inside Sales SB'), ('Mid Atlantic', 'Mid Atlantic'), ('New Jersey', 'New Jersey'), ('New York', 'New York'), ('Northeast', 'Northeast'), ('Northwest', 'Northwest'), ('Southeast', 'Southeast'), ('Southwest', 'Southwest'), ('Texas', 'Texas')], blank=True, null=True)
    payroll_market = models.CharField(custom=True, db_column='Payroll_Market__c', max_length=255, verbose_name='Payroll Market', sf_read_only=models.READ_ONLY, choices=[('Arizona', 'Arizona'), ('Central Florida', 'Central Florida'), ('Central Texas', 'Central Texas'), ('Colorado', 'Colorado'), ('Houston', 'Houston'), ('Inside Sales', 'Inside Sales'), ('Inside Sales Channel', 'Inside Sales Channel'), ('Inside Sales Dallas', 'Inside Sales Dallas'), ('Irvine', 'Irvine'), ('Long Island/Queens', 'Long Island/Queens'), ('Los Angeles', 'Los Angeles'), ('Miami North', 'Miami North'), ('Miami South', 'Miami South'), ('Mid Atlantic', 'Mid Atlantic'), ('Miramar', 'Miramar'), ('N. California', 'N. California'), ('National Accounts', 'National Accounts'), ('Nevada', 'Nevada'), ('New England', 'New England'), ('New Jersey', 'New Jersey'), ('New York City', 'New York City'), ('NYC South', 'NYC South'), ('North Texas', 'North Texas'), ('Northwest', 'Northwest'), ('Orange County', 'Orange County'), ('Phoenix', 'Phoenix'), ('San Diego', 'San Diego'), ('Southeast', 'Southeast'), ('West Palm Beach', 'West Palm Beach'), ('Woodland Hills', 'Woodland Hills')], blank=True, null=True)
    payroll_region = models.CharField(custom=True, db_column='Payroll_Region__c', max_length=255, verbose_name='Payroll Region', sf_read_only=models.READ_ONLY, choices=[('Northeast', 'Northeast'), ('Southeast', 'Southeast'), ('West', 'West'), ('Inside Sales', 'Inside Sales'), ('Business Development', 'Business Development')], blank=True, null=True)
    team_name = models.CharField(custom=True, db_column='Team_Name__c', max_length=255, verbose_name='Team Name', sf_read_only=models.READ_ONLY, choices=[('Accounts_Receivable', 'Accounts Receivable'), ('APS - 401k', 'APS - 401k'), ('APS - Other', 'APS - Other'), ('APS - Sec125', 'APS - Sec125'), ('APS - Workers Comp', 'APS - Workers Comp'), ('Conversion', 'Conversion'), ('Executive', 'Executive'), ('HRIS Support', 'HRIS Support'), ('New Accounts - East', 'New Accounts - East'), ('New Accounts HRIS', 'New Accounts HRIS'), ('New Accounts - Mid-Market', 'New Accounts - Mid-Market'), ('New Accounts  PayFocus Central', 'New Accounts  PayFocus Central'), ('New Accounts PayFocus East', 'New Accounts PayFocus East'), ('New Accounts  PayFocus Tampa', 'New Accounts  PayFocus Tampa'), ('New Accounts PayFocus West', 'New Accounts PayFocus West'), ('New Accounts PRO Central', 'New Accounts PRO Central'), ('New Accounts PRO East', 'New Accounts PRO East'), ('New Accounts PRO West', 'New Accounts PRO West'), ('New Accounts QA Team - Construction Payroll', 'New Accounts QA Team - Construction Payroll'), ('New Accounts QA Team - CPO', 'New Accounts QA Team - CPO'), ('New Accounts QA Team - PAM', 'New Accounts QA Team - PAM'), ('New Accounts QA Team - PayFocus', 'New Accounts QA Team - PayFocus'), ('New Accounts QA Team - Payload', 'New Accounts QA Team - Payload'), ('New Accounts QA Team - PP/XP', 'New Accounts QA Team - PP/XP'), ('New Accounts - West', 'New Accounts - West'), ('PayFocus Support', 'PayFocus Support'), ('Service East - Construction Payroll', 'Service East - Construction Payroll'), ('Service East - Franklin', 'Service East - Franklin'), ('Service East - Maine', 'Service East - Maine'), ('Service East - Miramar', 'Service East - Miramar'), ('Service East - Tampa', 'Service East - Tampa'), ('Service Full Service - Miramar', 'Service Full Service - Miramar'), ('Service Full Service - Orange County', 'Service Full Service - Orange County'), ('Service Full Service - Phoenix', 'Service Full Service - Phoenix'), ('Service Full Service - Seattle', 'Service Full Service - Seattle'), ('Service Full Service - Tampa', 'Service Full Service - Tampa'), ('Service West - Orange County', 'Service West - Orange County'), ('Service West - Phoenix', 'Service West - Phoenix'), ('Service West - Seattle', 'Service West - Seattle'), ('Support - Credit', 'Support - Credit'), ('Support - Operations', 'Support - Operations'), ('Support - Tax Amendment', 'Support - Tax Amendment'), ('Support - Tax Compliance', 'Support - Tax Compliance'), ('Support - Tax Entity', 'Support - Tax Entity'), ('Support - Tax Notice', 'Support - Tax Notice'), ('Support - Tax Operations', 'Support - Tax Operations'), ('Support - Tax QA', 'Support - Tax QA'), ('Support - Tax Support Center', 'Support - Tax Support Center'), ('Support Team - Professional Services', 'Support Team - Professional Services'), ('Support - Treasury', 'Support - Treasury'), ('Tax Quality Assurance', 'Tax Quality Assurance'), ('White Glove - New Accounts and Support', 'White Glove - New Accounts and Support')], blank=True, null=True)
    application_supported = models.CharField(custom=True, db_column='Application_Supported__c', max_length=4099, verbose_name='Application Supported', sf_read_only=models.READ_ONLY, choices=[('CPO', 'CPO'), ('DSI', 'DSI'), ('PAM', 'PAM'), ('PL', 'PL'), ('PP/XP', 'PP/XP'), ('All', 'All')], blank=True, null=True)
    sma_allow_map_anything_exports = models.BooleanField(db_column='sma__AllowMapAnythingExports__c', custom=True, verbose_name='Allow MapAnything Exports', default=models.DefaultedOnCreate(False))
    sma_default_proximity_radius = models.DecimalField(db_column='sma__DefaultProximityRadius__c', custom=True, max_digits=7, decimal_places=2, verbose_name='Default Proximity Radius', blank=True, null=True)
    sma_edit_map_anything_org_wirde_queries = models.BooleanField(db_column='sma__EditMapAnythingOrgWirdeQueries__c', custom=True, verbose_name='Edit MapAnything Org Wide Queries', default=models.DefaultedOnCreate(False))
    sma_mabeta_tester = models.BooleanField(db_column='sma__MABetaTester__c', custom=True, verbose_name='MapAnything Beta Tester', default=models.DefaultedOnCreate(False))
    sma_madefault_latitude = models.DecimalField(db_column='sma__MADefaultLatitude__c', custom=True, max_digits=18, decimal_places=15, verbose_name='MapAnything Default Latitude', blank=True, null=True)
    sma_madefault_longitude = models.DecimalField(db_column='sma__MADefaultLongitude__c', custom=True, max_digits=18, decimal_places=15, verbose_name='MapAnything Default Longitude', blank=True, null=True)
    sma_madefault_type = models.CharField(db_column='sma__MADefaultType__c', custom=True, max_length=255, verbose_name='MADefaultType', blank=True, null=True)
    sma_madefault_zoom_level = models.DecimalField(db_column='sma__MADefaultZoomLevel__c', custom=True, max_digits=2, decimal_places=0, verbose_name='MapAnything Default Zoom Level', blank=True, null=True)
    sma_mamax_export_size = models.DecimalField(db_column='sma__MAMaxExportSize__c', custom=True, max_digits=18, decimal_places=0, verbose_name='MapAnything Max Export Size', blank=True, null=True)
    sma_mamax_query_size = models.DecimalField(db_column='sma__MAMaxQuerySize__c', custom=True, max_digits=6, decimal_places=0, verbose_name='MapAnything Max Query Size', blank=True, null=True)
    sma_maversion = models.CharField(db_column='sma__MAVersion__c', custom=True, max_length=255, verbose_name='MapAnything Version', choices=[('Previous', 'Previous'), ('Current', 'Current'), ('Beta', 'Beta')], blank=True, null=True)
    sma_map_anything_settings = models.TextField(db_column='sma__MapAnythingSettings__c', custom=True, verbose_name='Map Anything Settings', blank=True, null=True)
    sma_preferred_type_of_measurement = models.CharField(db_column='sma__PreferredTypeOfMeasurement__c', custom=True, max_length=255, verbose_name='Preferred Type of Measurement', choices=[('Miles', 'Miles'), ('Km', 'Km'), ('Meters', 'Meters'), ('Yards', 'Yards'), ('Feet', 'Feet')], blank=True, null=True)
    sma_receive_batch_exception_emails = models.BooleanField(db_column='sma__ReceiveBatchExceptionEmails__c', custom=True, verbose_name='Receive Batch Exception Emails', default=models.DefaultedOnCreate(False))
    qbdialer_inside_sales_admin = models.BooleanField(db_column='qbdialer__InsideSales_Admin__c', custom=True, verbose_name='InsideSales Admin', default=models.DefaultedOnCreate(False))
    qbdialer_is_subdomain = models.CharField(db_column='qbdialer__is_subdomain__c', custom=True, max_length=20, verbose_name='InsideSales Subdomain', blank=True, null=True)
    qbdialer_is_token = models.CharField(db_column='qbdialer__is_token__c', custom=True, max_length=128, verbose_name='InsideSales Authorization Token', blank=True, null=True)
    qbdialer_password = models.CharField(db_column='qbdialer__password__c', custom=True, max_length=16, verbose_name='InsideSales Password', blank=True, null=True)
    qbdialer_permissions = models.TextField(db_column='qbdialer__permissions__c', custom=True, verbose_name='InsideSales Permissions', blank=True, null=True)
    qbdialer_username = models.CharField(db_column='qbdialer__username__c', custom=True, max_length=55, verbose_name='InsideSales Username', blank=True, null=True)
    benefit_market = models.CharField(custom=True, db_column='Benefit_Market__c', max_length=255, verbose_name='Benefit Market', choices=[('North CA', 'North CA'), ('South CA', 'South CA'), ('Colorado', 'Colorado'), ('North TX', 'North TX'), ('South TX', 'South TX'), ('Central TX', 'Central TX'), ('North FL', 'North FL'), ('South FL', 'South FL'), ('Georgia', 'Georgia'), ('Mid-Atlantic', 'Mid-Atlantic'), ('North NJ', 'North NJ'), ('South NJ', 'South NJ'), ('Ohio', 'Ohio'), ('NY North', 'NY North'), ('NY South', 'NY South'), ('National', 'National')], blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'User'
        verbose_name = 'User'
        verbose_name_plural = 'Users'
        # keyPrefix = '005'


class UserLicense(models.Model):
    license_definition_key = models.CharField(max_length=40, verbose_name='License Def. ID', sf_read_only=models.READ_ONLY)
    total_licenses = models.IntegerField(sf_read_only=models.READ_ONLY)
    status = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Active', 'Active'), ('Disabled', 'Disabled')])
    used_licenses = models.IntegerField(sf_read_only=models.READ_ONLY)
    used_licenses_last_updated = models.DateTimeField(sf_read_only=models.READ_ONLY)
    name = models.CharField(max_length=40, sf_read_only=models.READ_ONLY)
    master_label = models.CharField(max_length=80, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY, default=models.DEFAULTED_ON_CREATE)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY, default=models.DEFAULTED_ON_CREATE)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, default=models.DEFAULTED_ON_CREATE)
    class Meta(models.Model.Meta):
        db_table = 'UserLicense'
        verbose_name = 'User License'
        verbose_name_plural = 'User Licenses'
        # keyPrefix = '100'


class UserRole(models.Model):
    name = models.CharField(max_length=80, sf_read_only=models.READ_ONLY)
    parent_role = models.ForeignKey('self', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    rollup_description = models.CharField(max_length=80, verbose_name='Description', sf_read_only=models.READ_ONLY, blank=True, null=True)
    opportunity_access_for_account_owner = models.CharField(max_length=40, verbose_name='Opportunity Access Level for Account Owner', sf_read_only=models.READ_ONLY, choices=[('None', 'Private'), ('Read', 'Read Only'), ('Edit', 'Read/Write')])
    case_access_for_account_owner = models.CharField(max_length=40, verbose_name='Case Access Level for Account Owner', sf_read_only=models.READ_ONLY, choices=[('None', 'Private'), ('Read', 'Read Only'), ('Edit', 'Read/Write')], blank=True, null=True)
    contact_access_for_account_owner = models.CharField(max_length=40, verbose_name='Contact Access Level for Account Owner', sf_read_only=models.READ_ONLY, choices=[('None', 'Private'), ('Read', 'Read Only'), ('Edit', 'Read/Write')], blank=True, null=True)
    forecast_user = models.ForeignKey(User, models.DO_NOTHING, related_name='userrole_forecastuser_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    may_forecast_manager_share = models.BooleanField(sf_read_only=models.READ_ONLY, default=models.DefaultedOnCreate(False))
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY, default=models.DEFAULTED_ON_CREATE)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='userrole_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY, default=models.DEFAULTED_ON_CREATE)
    developer_name = models.CharField(max_length=80, sf_read_only=models.READ_ONLY, blank=True, null=True)
    portal_account = models.ForeignKey(Account, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    portal_type = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('None', 'None'), ('CustomerPortal', 'Customer Portal'), ('Partner', 'Partner Portal')], blank=True, null=True)
    portal_role = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Executive', 'Executive'), ('Manager', 'Manager'), ('Worker', 'User'), ('PersonAccount', 'Person Account')], blank=True, null=True)
    portal_account_owner = models.ForeignKey(User, models.DO_NOTHING, related_name='userrole_portalaccountowner_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'UserRole'
        verbose_name = 'Role'
        verbose_name_plural = 'Role'
        # keyPrefix = '00E'
